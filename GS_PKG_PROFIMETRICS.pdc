CREATE OR REPLACE EDITIONABLE PACKAGE BODY "GSRETAIL"."GS_PKG_PROFIMETRICS" is

procedure registrarLog(message varchar2, usuario varchar2, modulo varchar2, operacao varchar2) is
PRAGMA AUTONOMOUS_TRANSACTION;
begin
      insert into gs_log_integracao_mensagem (data, mensagem, usuario, modulo, operacao) values (sysdate, message, usuario, modulo, operacao);
      commit; 
exception
    when others then null;
end;

function f_get_table(p_interface pls_integer, 
                     p_ano pls_integer,
                     p_mes pls_integer,
                     p_dia pls_integer,
                     p_seq pls_integer) return varchar2 is
    v_origem varchar2(500);
begin
    /* ATIVA PROFIMETRICS E CAPTURA NOME DA TABELA ORIGEM */
    v_origem := pck_interface_api.get_dsa_table_name(p_interface, 'COOP', p_ano, p_mes, p_dia, p_seq);
    
    /* SE EXISTE ORGIEM REGISTRA LOG DA INTERFACE */
    if (v_origem is not null) then
        begin
          INSERT INTO gs_log_profimetrics_interface (dia_exec, interface, ano, mes, dia, seq, destino, submit)
          VALUES ((p_ano-1900)*10000+p_mes*100+p_dia, p_interface, p_ano, p_mes, p_dia, p_seq, v_origem, 0);
          commit;
        exception when dup_val_on_index then
          update gs_log_profimetrics_interface set submit = 0
          where interface = p_interface
          and   dia_exec = (p_ano-1900)*10000+p_mes*100+p_dia;
          commit;
        end;
    end if;
    return v_origem;
end f_get_table;

procedure f_change_status(p_interface pls_integer, 
                     p_ano pls_integer,
                     p_mes pls_integer,
                     p_dia pls_integer,
                     p_seq pls_integer,
                     p_status varchar2) is
begin
  
     pck_interface_api.change_status_avl (p_interface, 'COOP', p_seq, p_ano, p_mes, p_seq, p_status);
     
     if (p_status in ( 'A', 'E')) then
         update gs_log_profimetrics_interface lp set submit = case when p_status = 'A' then 1 else 9 end
         where lp.dia_exec = ((p_ano-1900)*100+p_mes)*100+p_dia
         and lp.ano = p_ano
         and lp.mes = p_mes
         and lp.dia = p_dia
         and lp.seq = p_seq;
         
         commit;
     end if;
     
end f_change_status;                     

function f_ativa_api(p_interface pls_integer, 
                     p_ano pls_integer,
                     p_mes pls_integer,
                     p_dia pls_integer) return varchar2 is
   v_destino  varchar2(500);
   v_seq      pls_integer;                     
begin
  /* VERIFICA QUAL ? A SEQUENCIA ATUAL DA INTERFACE */
  begin
      SELECT COUNT(1)+1 INTO v_seq
      FROM gs_log_profimetrics_interface lp
      WHERE lp.dia_exec = (p_ano-1900)*10000+p_mes*100+p_dia
      AND lp.ano = p_ano
      AND lp.mes = p_mes
      AND lp.dia = p_dia
      and lp.interface = p_interface;
  exception when others then
      v_seq := 1; /* NAO TEM REGISTRO AINDA DESSA INTEFACE */
  end;
  
  /* ATIVA PROFIMETRICS E CAPTURA NOME DA TABELA DESTINO */
  v_destino := PCK_INTERFACE_API.get_source_table_name_at (p_interface, p_ano, p_mes, p_dia, v_seq);
  
  /* REGISTRA LOG DA INTERFACE */
  INSERT INTO gs_log_profimetrics_interface (dia_exec, interface, ano, mes, dia, seq, destino, submit)
  VALUES ((p_ano-1900)*10000+p_mes*100+p_dia, p_interface, p_ano, p_mes, p_dia, v_seq, v_destino, 0);
  commit;
  return v_destino;
end f_ativa_api;

procedure f_submit_api(p_interface pls_integer, 
                     p_ano pls_integer,
                     p_mes pls_integer,
                     p_dia pls_integer) is   
begin
  /* VERIFICA QUAIS SEQUENCIAS NAO FORAM SUBMIT */
  for reg in(
    select lp.dia_exec, lp.interface, lp.ano, lp.mes, lp.dia, lp.seq, lp.destino, lp.submit
    from gs_log_profimetrics_interface lp
    where lp.dia_exec = (p_ano-1900)*10000+p_mes*100+p_dia
    and   lp.interface = p_interface
    and   lp.submit = 0)
  loop
      PCK_INTERFACE_API.submit_interface (reg.interface, reg.ano, reg.mes, reg.dia, reg.seq);
      update gs_log_profimetrics_interface lp set submit = 1
      where lp.dia_exec = reg.dia_exec
      and   lp.interface = reg.interface
      and   lp.ano       = reg.ano
      and   lp.mes       = reg.mes
      and   lp.dia       = reg.dia
      and   lp.seq       = reg.seq;
      commit;
  end loop;
  
  --return (1);
end f_submit_api;

Function PROXIMO_NROPED return number is
PRAGMA AUTONOMOUS_TRANSACTION;
--Busca proximo Numero de pedido
vFLAG       number(1);
vNROPED     number;
vNROPED_INI number;
vNROPED_FIM number;
begin
    SELECT TO_NUMBER(SUBSTR(PAR_CONTEUDO, 1,10))
          ,TO_NUMBER(SUBSTR(PAR_CONTEUDO,11,10))
          ,TO_NUMBER(SUBSTR(PAR_CONTEUDO,21,10))
    INTO
        vNROPED, vNROPED_INI, vNROPED_FIM
    FROM AA2CPARA
    WHERE PAR_CODIGO = 105
    AND   PAR_ACESSO = 'NROPED    '
    FOR UPDATE;

    if (vNROPED = 0 OR vNROPED >= vNROPED_FIM) then
        raise_application_error(-20000, 'Erro 105-NROPED');
    end if;

    loop
        vFLAG := 0;
        begin
            SELECT 1 INTO vFLAG
            FROM AG1LPEDI
            WHERE NROPED_CAR = vNROPED;
        exception when others then null;
        end;
        if (vFLAG = 0) then
            begin
                SELECT 1 INTO vFLAG
                FROM AG1FLPED
                WHERE NROPED_CARF = vNROPED;
            exception when others then null;
            end;
        end if;
        if (vFLAG = 0) then
            exit;
        end if;
        vNROPED := vNROPED + 1;
        if (vNROPED > vNROPED_FIM) then
            vNROPED :=vNROPED_INI;
        end if;
    end loop;

    UPDATE AA2CPARA
    SET PAR_CONTEUDO = TO_CHAR(vNROPED + 1,'FM0000000000')
                    || TO_CHAR(vNROPED_INI,'FM0000000000')
                    || TO_CHAR(vNROPED_FIM,'FM0000000000')
    WHERE PAR_CODIGO = 105
    AND   PAR_ACESSO = 'NROPED    ';
    COMMIT;

    return vNROPED;
end;

function PROXIMO_CONTROLE(pComprador number) return number is
  vFLAG       number(1);
  vNROPED     number;
  vNROPED_INI number;
  vNROPED_FIM number;
begin
  SELECT TO_NUMBER(SUBSTR(PAR_CONTEUDO, 1,10))
          ,TO_NUMBER(SUBSTR(PAR_CONTEUDO,11,10))
          ,TO_NUMBER(SUBSTR(PAR_CONTEUDO,21,10))
    INTO
        vNROPED, vNROPED_INI, vNROPED_FIM
    FROM AA2CPARA
    WHERE PAR_CODIGO = 107
    AND   PAR_ACESSO = rpad(to_char(pComprador, 'fm000'), 10, ' ')
    FOR UPDATE;
    
    if (vNROPED >= vNROPED_FIM) then
      vNROPED :=vNROPED_INI;
    end if;
    
    if (vNROPED = 0 OR vNROPED >= vNROPED_FIM) then
        raise_application_error(-20000, 'Erro 107-CONTROLE');
    end if;
    
    
    
    loop
        vFLAG := 0;
        begin
            SELECT 1 INTO vFLAG
            FROM AG2CCONT C
            WHERE C.CNT_CONTROLE = vNROPED
            AND C.CNT_COMPRADOR = pComprador;
        exception when others then null;
        end;        
        if (vFLAG = 0) then
            exit;
        end if;
        vNROPED := vNROPED + 1;
        if (vNROPED > vNROPED_FIM) then
            vNROPED :=vNROPED_INI;
        end if;
    end loop;

    UPDATE AA2CPARA
    SET PAR_CONTEUDO = TO_CHAR(vNROPED + 1,'FM0000000000')
                    || TO_CHAR(vNROPED_INI,'FM0000000000')
                    || TO_CHAR(vNROPED_FIM,'FM0000000000')
    WHERE PAR_CODIGO = 107
    AND   PAR_ACESSO  = rpad(to_char(pComprador, 'fm000'), 10, ' ');
    COMMIT;

    return vNROPED;
    
    
end PROXIMO_CONTROLE;

procedure ExportaSeason(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  -- INTERFACE 219
  -- DINTERFACE SEASON
  v_inicio := sysdate;
  v_interface := 219;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_season';
  execute immediate v_query;
  commit;
  
  
  INSERT INTO GS_PRF_SEASON (SEASON_ID, ORIGIN_ID, SEASON_DESC, START_DATE, END_DATE,
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
  SELECT TO_CHAR(sf.cod_saz) SEASON_ID,
         '01' ORIGIN_ID,
         trim(SUBSTR(max(sf.descr_saz),1, 120)) season_desc,
         max(sf.dt_ini_saz) start_date,
         max(sf.dt_fim_saz) end_date,
         'A' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         sysdate  CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         sysdate  LAST_UPDATE_DATETIME
  FROM gti.TAB_SAZ_PRICING@lksfcoop sf
  GROUP BY sf.cod_saz;
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'SEASON' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from GS_PRF_SEASON
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  v_extracao := sysdate;
  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); --PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (SEASON_ID, ORIGIN_ID, SEASON_DESC, START_DATE, END_DATE,
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
   select SEASON_ID, ORIGIN_ID, SEASON_DESC, START_DATE, END_DATE,
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME
   from GS_PRF_SEASON';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia);  --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);  
end ExportaSeason;

procedure ExportaBrandLabel(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  -- INTERFACE 210
  -- DINTERFACE BRAND/LABEL
  v_inicio := sysdate;
  v_interface := 210;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_brandlabel';
  execute immediate v_query;
  
  -- INCLUI NA TABELA STAGE
  INSERT INTO GS_PRF_BRANDLABEL (LABEL_ID, ORIGIN_ID, LABEL_DESC, OWN_LABEL_FLAG, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
  SELECT trim(I.MARCA) LABEL_ID, 
         '01' ORIGEN_ID,
         trim(I.MARCA) LABEL_DESC,
         CASE WHEN MAX(I.MARCAPROP) = 'M' THEN 'Y' ELSE 'N' END MARCAPROP,
         'A' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         sysdate  CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         sysdate  LAST_UPDATE_DATETIME
  FROM GS_MVW_CADITENS I
  LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
  left join (select prod,
       sum(e.estqqtd) estq,
       max(e.dt_ult_fat) ultVenda
      from gs_mvw_posestq e
      where e.estqqtd >= 0
      group by e.prod ) e on e.prod = i.prod  -- VERIFICA ESTOQUE E VENDA
  WHERE TRIM(I.MARCA) is not null
  AND i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
  AND CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
  AND i.linha not in ('82','94')
  AND (I.SAILIN = 0 -- TODOS EM LINHA
  OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
  OR nvl(e.estq, 0) >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
  OR trunc(sysdate)-nvl(e.ultVenda, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
  )--OR trunc(sysdate)-rmsto_date(i.ultent) < 365) -- SOMENTE SE A ULTIMA COMPRA FOI NO ULTIMO ANO
  GROUP BY trim(I.MARCA);
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             210 INTERFACE,
             'BRAND/LABEL' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_brandlabel
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  v_extracao := sysdate;
  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); --PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (LABEL_ID, ORIGIN_ID, LABEL_DESC, OWN_LABEL_FLAG, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
   select LABEL_ID, ORIGIN_ID, LABEL_DESC, OWN_LABEL_FLAG, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME
   from GS_PRF_BRANDLABEL';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia);  --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);
end ExportaBrandLabel;

procedure ExportaLocation(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 224;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  -- INTERFACE 224
  -- DINTERFACE LOCATION
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_location';
  execute immediate v_query;
  
  -- INCLUI NA TABELA STAGE
  INSERT INTO gs_prf_location (STORE_ID, ORIGIN_ID, REGION_ID, CURRENCY_ID, STORE_DESC, STORE_OPEN_DATE, store_type,
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
  SELECT to_char(f.codigo*10+f.digito) STORE_ID, 
         '01' ORIGEN_ID,
          TO_CHAR(R.REG_REGIAO) REGION_ID,
          '01' CURRENCY_ID,
          TRIM(SUBSTR(F.NOME_FANTASIA, 1, 60)) STORE_DESC,
          F.DTINIVENDA STORE_OPEN_DATE,
          case when f.tipofilial = 'L' then 'S' else 'W' end store_type,
         'A' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         sysdate  CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         sysdate  LAST_UPDATE_DATETIME
  FROM GS_MVW_FILIAIS F
  LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and exp.gsku_filial = f.codigo
                        and exp.gsku_grupo > 0
  LEFT JOIN AA1CREGI R ON R.REG_REGIAO = F.REGIAO
                      AND R.REG_DIVISAO = 0
                      AND R.REG_DISTRITO = 0
                      AND R.REG_REGIAO > 0
  where exp.gsku_descricao is null;
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             224 INTERFACE,
             'LOCATION' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_location
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (STORE_ID, ORIGIN_ID, REGION_ID, CURRENCY_ID, STORE_DESC, STORE_OPEN_DATE, store_type,
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
   select STORE_ID, ORIGIN_ID, REGION_ID, CURRENCY_ID, STORE_DESC, STORE_OPEN_DATE, store_type,
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME
   from GS_PRF_LOCATION';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;

  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
  
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);
end ExportaLocation;

procedure ExportaSupplier(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 225;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;  
  -- INTERFACE 225
  -- DINTERFACE SUPPLIER
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_supplier';
  execute immediate v_query;
  
  -- INCLUI NA TABELA STAGE
  INSERT INTO gs_prf_supplier (supplier_id , ORIGIN_ID, CURRENCY_ID, supplier_desc , 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
  select to_char(i.codigo*10+i.digito) supplier_id ,
         '01' origin_id,
         '01' currency_id,
         trim(i.nome_fantasia) supplier_desc,
         'A' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         sysdate  CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         sysdate  LAST_UPDATE_DATETIME
  from gs_mvw_tipos i
  where i.tipofilial not in ('L', 'D');
  /*select to_char(i.forn*10+dac(i.forn)) supplier_id ,
         '01' origin_id,
         '01' currency_id,
         trim(substr(max(i.dforn), 10, 240)) supplier_desc,
         'A' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         sysdate  CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         sysdate  LAST_UPDATE_DATETIME
  from gs_mvw_caditens i
  WHERE CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
  group by i.forn;*/
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             225 INTERFACE,
             'SUPPLIER' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_supplier
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (supplier_id , ORIGIN_ID, CURRENCY_ID, supplier_desc , 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
   select supplier_id , ORIGIN_ID, CURRENCY_ID, supplier_desc , 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME
   from gs_prf_supplier';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia);-- PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
  
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);  
end ExportaSupplier;

procedure ExportaMerch01(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 237;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  -- INTERFACE 237
  -- DINTERFACE MERCHANDISE LEVEL 1
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_merch01';
  execute immediate v_query;
    
  -- INCLUI NA TABELA STAGE
  INSERT INTO gs_prf_merch01 (merch_l1_id  , ORIGIN_ID, merch_l1_desc ,
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
  VALUES ('1', '01', 'Coop', 'A', 'Coop', sysdate, 'Coop', sysdate);
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             237 INTERFACE,
             'MERCHANDISE LEVEL 1' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_merch01
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (merch_l1_id  , ORIGIN_ID, merch_l1_desc ,
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
   select merch_l1_id  , ORIGIN_ID, merch_l1_desc ,
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME
   from gs_prf_merch01';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia);  --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
  
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);  
end ExportaMerch01;

procedure ExportaMerch02(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 238;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  -- INTERFACE 238
  -- DINTERFACE MERCHANDISE LEVEL 2
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_merch02';
  execute immediate v_query;
  
  -- INCLUI NA TABELA STAGE
  INSERT INTO gs_prf_merch02 (merch_l1_id, merch_l2_id  , ORIGIN_ID, merch_l2_desc, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
  select '1' merch_l1_id, 
         '1.'||to_char(e.departamento, 'fm000') merch_l2_id,
         '01' ORIGIN_ID,
         trim(substr(max(e.ddepartamento), 5, 120)) merch_l2_desc,
         'A' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         sysdate  CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         sysdate  LAST_UPDATE_DATETIME
  from gs_mvw_estr_mercadologica e  
  where e.departamento > 0
  and e.grupo = 0
  and e.subgrupo = 0
  and e.categoria = 0
  and e.secao in (select distinct i.sec from GS_MVW_CADITENS i
              LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
              left join (select prod,
                           sum(e.estqqtd) estq,
                           max(e.dt_ult_fat) ultVenda
                          from gs_mvw_posestq e
                          where e.estqqtd >= 0 
                          group by e.prod ) e on e.prod = i.prod  -- VERIFICA ESTOQUE E VENDA
              WHERE i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
              AND i.linha not in ('82','94')
              and CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
              AND (I.SAILIN = 0 -- TODOS EM LINHA
              OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
              OR nvl(e.estq, 0) >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
              OR trunc(sysdate)-nvl(e.ultVenda, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
              )--OR trunc(sysdate)-rmsto_date(i.ultent) < 365) -- SOMENTE SE A ULTIMA COMPRA FOI NO ULTIMO ANO
              OR i.prod in (select distinct sm.abs_codsim from ag1cdabs sm where sm.abs_tipo = 'S') -- PRODUTO SIMILAR SEMPRE ENVIA
              )
   group by e.departamento;
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             238 INTERFACE,
             'MERCHANDISE LEVEL 2' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_merch02
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;

  v_extracao  := sysdate;
  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (merch_l1_id, merch_l2_id  , ORIGIN_ID, merch_l2_desc, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
   select merch_l1_id, merch_l2_id  , ORIGIN_ID, merch_l2_desc, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME
   from gs_prf_merch02';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
  
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);  
end ExportaMerch02;

procedure ExportaMerch03(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 239;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  -- INTERFACE 239
  -- DINTERFACE MERCHANDISE LEVEL 3
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_merch03';
  execute immediate v_query;
  
  -- INCLUI NA TABELA STAGE
  INSERT INTO gs_prf_merch03 (merch_l2_id, merch_l3_id  , ORIGIN_ID, merch_l3_desc, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
  select '1.'||to_char(max(e.departamento), 'fm000') merch_l2_id,
         '1.'||to_char(max(e.departamento), 'fm000')||'.'||to_char(e.secao, 'fm000') merch_l3_id,
         '01' ORIGIN_ID,
         trim(substr(max(e.dsecao), 5, 120)) merch_l3_desc,
         'A' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         sysdate  CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         sysdate  LAST_UPDATE_DATETIME
  from gs_mvw_estr_mercadologica e
  where e.departamento > 0
  and e.grupo = 0
  and e.subgrupo = 0
  and e.categoria = 0
  and (e.secao) in (select distinct i.sec from GS_MVW_CADITENS i
              LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
              left join (select prod,
                           sum(e.estqqtd) estq,
                           max(e.dt_ult_fat) ultVenda
                          from gs_mvw_posestq e
                          where e.estqqtd >= 0 
                          group by e.prod ) e on e.prod = i.prod  -- VERIFICA ESTOQUE E VENDA
              WHERE i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
              AND i.linha not in ('82','94')
              and CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
              AND (I.SAILIN = 0 -- TODOS EM LINHA
              OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
              OR nvl(e.estq, 0) >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
              OR trunc(sysdate)-nvl(e.ultVenda, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
              )--OR trunc(sysdate)-rmsto_date(i.ultent) < 365) -- SOMENTE SE A ULTIMA COMPRA FOI NO ULTIMO ANO
              OR i.prod in (select distinct sm.abs_codsim from ag1cdabs sm where sm.abs_tipo = 'S') -- PRODUTO SIMILAR SEMPRE ENVIA
              )
  group by e.departamento, e.secao;
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             239 INTERFACE,
             'MERCHANDISE LEVEL 3' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_merch03
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  v_extracao  := sysdate;
  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (merch_l2_id, merch_l3_id  , ORIGIN_ID, merch_l3_desc, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
   select merch_l2_id, merch_l3_id  , ORIGIN_ID, merch_l3_desc, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME
   from gs_prf_merch03';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
  
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);
end ExportaMerch03;

procedure ExportaMerch04(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 240;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  -- INTERFACE 240
  -- DINTERFACE MERCHANDISE LEVEL 4
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_merch04';
  execute immediate v_query;
  
  -- INCLUI NA TABELA STAGE
  INSERT INTO gs_prf_merch04 (merch_l3_id, merch_l4_id  , ORIGIN_ID, merch_l4_desc, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
  select '1.'||to_char(max(e.departamento), 'fm000')||'.'||to_char(max(e.secao), 'fm000') merch_l3_id,
         '1.'||to_char(max(e.departamento), 'fm000')||'.'||to_char(max(e.secao), 'fm000')||
         '.'||to_char(e.grupo, 'fm000') merch_l4_id,
         '01' ORIGIN_ID,
         trim(substr(max(e.dgrupo), 5, 120)) merch_l4_desc,
         'A' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         sysdate  CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         sysdate  LAST_UPDATE_DATETIME
  from gs_mvw_estr_mercadologica e
  where e.departamento > 0
  and e.subgrupo = 0
  and e.categoria = 0
  and (e.secao, e.grupo) in (select distinct i.sec, i.grp from GS_MVW_CADITENS i
              LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
              left join (select prod,
                           sum(e.estqqtd) estq,
                           max(e.dt_ult_fat) ultVenda
                          from gs_mvw_posestq e
                          where e.estqqtd >= 0 
                          group by e.prod ) e on e.prod = i.prod  -- VERIFICA ESTOQUE E VENDA
              WHERE i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
              AND i.linha not in ('82','94')
              and CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
              AND (I.SAILIN = 0 -- TODOS EM LINHA
              OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
              OR nvl(e.estq, 0) >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
              OR trunc(sysdate)-nvl(e.ultVenda, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
              )--OR trunc(sysdate)-rmsto_date(i.ultent) < 365) -- SOMENTE SE A ULTIMA COMPRA FOI NO ULTIMO ANO
              OR i.prod in (select distinct sm.abs_codsim from ag1cdabs sm where sm.abs_tipo = 'S') -- PRODUTO SIMILAR SEMPRE ENVIA
              )
  group by e.departamento, e.secao, e.grupo;
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             240 INTERFACE,
             'MERCHANDISE LEVEL 4' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_merch04
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;

  v_extracao  := sysdate;

  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (merch_l3_id, merch_l4_id  , ORIGIN_ID, merch_l4_desc, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
   select merch_l3_id, merch_l4_id  , ORIGIN_ID, merch_l4_desc, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME
   from gs_prf_merch04';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;

  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
  
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);  
end ExportaMerch04;

procedure ExportaMerch05(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 241;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  -- INTERFACE 241
  -- DINTERFACE MERCHANDISE LEVEL 5
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_merch05';
  execute immediate v_query;
  
  -- INCLUI NA TABELA STAGE
  INSERT INTO gs_prf_merch05 (merch_l4_id, merch_l5_id  , ORIGIN_ID, merch_l5_desc, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
  select '1.'||to_char(max(e.departamento), 'fm000')||'.'||to_char(max(e.secao), 'fm000')||
         '.'||to_char(e.grupo, 'fm000') merch_l4_id,
         '1.'||to_char(max(e.departamento), 'fm000')||'.'||to_char(max(e.secao), 'fm000')||
         '.'||to_char(e.grupo, 'fm000')||'.'||to_char(e.subgrupo, 'fm000') merch_l5_id,
         '01' ORIGIN_ID,
         trim(substr(max(e.dsubgrupo), 5, 120)) merch_l5_desc,
         'A' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         sysdate  CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         sysdate  LAST_UPDATE_DATETIME
  from gs_mvw_estr_mercadologica e
  where e.departamento > 0
  and e.categoria = 0
  and (e.secao, e.grupo, e.subgrupo) in (select distinct i.sec, i.grp, i.sgrp from GS_MVW_CADITENS i
              LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
              left join (select prod,
                           sum(e.estqqtd) estq,
                           max(e.dt_ult_fat) ultVenda
                          from gs_mvw_posestq e
                          where e.estqqtd >= 0 
                          group by e.prod ) e on e.prod = i.prod  -- VERIFICA ESTOQUE E VENDA
              WHERE i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
              AND i.linha not in ('82','94')
              and CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
              AND (I.SAILIN = 0 -- TODOS EM LINHA
              OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
              OR nvl(e.estq, 0) >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
              OR trunc(sysdate)-nvl(e.ultVenda, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
              )--OR trunc(sysdate)-rmsto_date(i.ultent) < 365) -- SOMENTE SE A ULTIMA COMPRA FOI NO ULTIMO ANO
              OR i.prod in (select distinct sm.abs_codsim from ag1cdabs sm where sm.abs_tipo = 'S') -- PRODUTO SIMILAR SEMPRE ENVIA
              )
  group by e.departamento, e.secao, e.grupo, e.subgrupo;
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             241 INTERFACE,
             'MERCHANDISE LEVEL 5' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_merch05
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (merch_l4_id, merch_l5_id  , ORIGIN_ID, merch_l5_desc, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
   select merch_l4_id, merch_l5_id  , ORIGIN_ID, merch_l5_desc, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME
   from gs_prf_merch05';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
  
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);  
end ExportaMerch05;

procedure ExportaMerch06(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 242;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: Interface nao habilitada');
  -- INTERFACE 242
  -- DINTERFACE MERCHANDISE LEVEL 6
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_merch06';
  execute immediate v_query;
  
  -- INCLUI NA TABELA STAGE
  INSERT INTO gs_prf_merch06 (merch_l5_id, merch_l6_id  , ORIGIN_ID, merch_l6_desc, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
  select '1.'||to_char(max(e.departamento), 'fm000')||'.'||to_char(max(e.secao), 'fm000')||
         '.'||to_char(e.grupo, 'fm000')||'.'||to_char(e.subgrupo, 'fm000') merch_l5_id,
         '1.'||to_char(max(e.departamento), 'fm000')||'.'||to_char(max(e.secao), 'fm000')||
         '.'||to_char(e.grupo, 'fm000')||'.'||to_char(e.subgrupo, 'fm000')||'.000' merch_l6_id,
         '01' ORIGIN_ID,
         ' ' merch_l6_desc,
         'A' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         sysdate  CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         sysdate  LAST_UPDATE_DATETIME
  from gs_mvw_estr_mercadologica e
  where e.departamento > 0
  and e.secao > 0
  and e.grupo > 0
  and e.subgrupo > 0
  and e.categoria = 0
  group by e.departamento, e.secao, e.grupo, e.subgrupo;
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             242 INTERFACE,
             'MERCHANDISE LEVEL 6' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_merch06
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (merch_l5_id, merch_l6_id  , ORIGIN_ID, merch_l6_desc, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
   select merch_l5_id, merch_l6_id  , ORIGIN_ID, merch_l6_desc, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME
   from gs_prf_merch06';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
  
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);  
end ExportaMerch06;

procedure ExportaItemStoreVat(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 331;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  -- INTERFACE 331
  -- DINTERFACE ITEM STORE VAT
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_itemstorevat';
  execute immediate v_query;
  
  -- INCLUI NA TABELA STAGE
  INSERT INTO GS_PRF_ITEMSTOREVAT (SKU_ID, STORE_ID, EFFECTIVE_DATE, VAT_ID, VAT_RATE, 
  ORIGIN_ID, RECORD_STATUS,CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
  SELECT SKU_ID,
         STORE_ID,
         trunc(sysdate) EFFECTIVE_DATE,
         '01' VAT_ID,
         VAT_RATE,
         '01' ORIGIN_ID,
         'A' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         sysdate CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         sysdate LAST_UPDATE_DATETIME
  FROM (
  select to_char(produto) SKU_ID, 
         to_char(loja) STORE_ID,
         /*trunc(sysdate) EFFECTIVE_DATE,
         '01' VAT_ID,*/
         (AlqPisCofins+AlqICMS) VAT_RATE/*,
         '01' ORIGIN_ID,
         'A' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         sysdate  CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         sysdate  LAST_UPDATE_DATETIME*/
  from (
       select distinct
               case when trunc(e.filial/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   and trunc(e.filial/10) <> 84
                   and i.dep = 3
                  then (trunc(e.filial/10)+600)*10+dac((trunc(e.filial/10)+600)) 
                    else e.filial end loja,
              e.prod*10+dac(e.prod) produto,
              case when a.git_categoria_ant = 0 then 9.25
                   when a.git_categoria_ant in (07, 05, 08) then (d.det_pis_alq + d.det_cof_alq)
                   else 0 end AlqPisCofins,
              t.tfi_aliq_icm - (t.tfi_aliq_icm * T.TFI_BASE_REDUZ_ICMS / 100 ) AlqICMS-- t.tfi_aliq_icm AlqICMS ALTERADO HENRIQUE 28/10/2019 ADICIONADO REDUCAO ICMS
       from gs_mvw_posestq e
       inner join aa3citem a on a.git_cod_item = e.prod
       inner join aa1ditem d on d.det_cod_item = e.prod  
       inner join aa2ctipo f on f.tip_codigo = trunc(e.filial/10)
       inner join  aa2cloja l on l.loj_codigo = trunc(e.filial/10)
       inner join aa3tfisc t on t.tfi_origem = f.tip_estado
                            and t.tfi_destino = f.tip_estado
                            and t.tfi_automacao = l.loj_autonomia
                            and t.tfi_figura = a.git_nat_fiscal
                            and (t.tfi_dta_inicio = 0 /*or rms7to_date(t.tfi_dta_fim) >= trunc(sysdate)*/)--REMOVI O or EM 24/12, SOLUCAO TEMPORARIA PQ A INTERFACE FOI COM DADOS DUPLICADOS
       -- TFI_TIPO_TABELA, TFI_ORIGEM, TFI_DESTINO, TFI_CFOP, TFI_AUTOMACAO, TFI_FIGURA, TFI_ALIQ_ICM
       inner join GS_MVW_CADITENS i on i.prod = a.git_cod_item
       LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and exp.gsku_filial = trunc(e.filial/10)
                        and exp.gsku_grupo > 0
       LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
       WHERE exp.gsku_descricao is null
       and e.filial not between 6000 and 6999
       and  i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
       and CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
       AND i.linha not in ('82','94')
       AND (I.SAILIN = 0 -- TODOS EM LINHA
       OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
       OR e.estqqtd >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
       OR trunc(sysdate)-nvl(e.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
       --OR trunc(sysdate)-rmsto_date(i.ultent) < 365 -- SOMENTE SE A ULTIMA COMPRA FOI NO ULTIMO ANO
       )
       and t.tfi_tipo_tabela = 'T'
       and t.tfi_cfop = 5102)
       
       group by produto, loja, AlqPisCofins, AlqICMS
       
       );
  
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G 
  USING
  (
     SELECT dateto_rms7(sysdate) DIA,
            331 INTERFACE,
            'ITEM STORE VAT' DINTERFACE,
            dateto_rms7(sysdate) dia_envio,
            1 qtd_envio,
            count(*) registros,
            0 valor
     from gs_prf_itemstorevat
  ) A
  ON
  (
     G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
  )
  WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
  WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  commit;
  
  v_extracao  := sysdate;
  
  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (SKU_ID, STORE_ID, EFFECTIVE_DATE, VAT_ID, VAT_RATE, 
  ORIGIN_ID, RECORD_STATUS,CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
   select SKU_ID, STORE_ID, EFFECTIVE_DATE, VAT_ID, VAT_RATE, 
  ORIGIN_ID, RECORD_STATUS,CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME
   from gs_prf_itemstorevat';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
  
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);  
end ExportaItemStoreVat;

procedure ExportaRegion(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 248;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  -- INTERFACE 248
  -- DINTERFACE REGION
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_region';
  execute immediate v_query;
  
  -- INCLUI NA TABELA STAGE
  INSERT INTO gs_prf_region (region_id, region_desc  , ORIGIN_ID, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
  select to_char(reg_regiao) region_id,
       trim(substr(reg_descricao, 1, 64)) region_desc,
       '01' ORIGIN_ID,
       'A' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         sysdate  CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         sysdate  LAST_UPDATE_DATETIME
  from aa1cregi 
  where reg_regiao > 0
  and reg_divisao = 0
  and reg_distrito = 0
  and exists (select 1 
              from gs_mvw_filiais f 
              LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and exp.gsku_filial = f.codigo
                        and exp.gsku_grupo > 0
              where f.regiao = reg_regiao
              AND exp.gsku_descricao is null);
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             248 INTERFACE,
             'REGION' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_region
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (region_id, region_desc  , ORIGIN_ID, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME)
   select region_id, region_desc  , ORIGIN_ID, 
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME
   from gs_prf_region';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia);--PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
  
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);  
end ExportaRegion;

procedure ExportaItemStore(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 323;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
   -- INTERFACE 323
  -- DINTERFACE ITEM STORE
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_itemstore';
  execute immediate v_query;
  
  -- INCLUI NA TABELA STAGE
  INSERT INTO gs_prf_itemstore (store_id , sku_id   , ORIGIN_ID, open_to_buy , sensitivity_id,st_item_attr_01_no,
         st_item_attr_02_flag,st_item_attr_03_flag,st_item_attr_04_flag,ret_allow_ind,    
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME,
         season_id,end_of_life_date,first_date_on_sale,freight_price,freight_time,ST_ITEM_ATTR_01_DATE     )
  select distinct 
         to_char( case when trunc(e.filial/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(e.filial/10) <> 84
                   and f.natureza != 'LV'
                   and i.dep = 3
                  then (trunc(e.filial/10)+600)*10+dac((trunc(e.filial/10)+600)) 
                    else e.filial end)  STORE_ID,
         to_char(e.prod*10+DAC(e.prod)) SKU_ID,
         '01' ORIGIN_ID,
         case when e.bloqueio in (3,4) then 'N' else 'Y' end open_to_buy,
         to_char(nvl(ss.tipo, nvl(sd.tipo, 3)), 'fm00') SENSITIVITY_ID, -- SENSIBILIDADE 
         nvl(p.pre_preco, 0) ST_ITEM_ATTR_01_NO, -- VALOR PMC 
         CASE WHEN I.SAILIN > 0 then 'Y' else 'N' end ST_ITEM_ATTR_02_FLAG, -- PRODUTO DESCONTINUADO
         CASE WHEN I.TP IN (3) THEN 'Y' else 'N' end ST_ITEM_ATTR_03_FLAG, -- PRODUTO FILHO DE DERIVADO
         case when nvl(i.pp, ' ') = 'B' then 'Y' else 'N' end ST_ITEM_ATTR_04_FLAG, -- PRODUTO BLOQUEADO PARA ALTERACAO DE PRECO ???
         'Y' RET_ALLOW_IND, -- INDICA SE O FORNECEDOR ACEITA DEVOLUCAO        
         'A' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         sysdate  CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         sysdate  LAST_UPDATE_DATETIME,
         to_char(sf.cod_saz) SEASON_ID, -- ID DA SAZONALIDADE
         rmsto_Date(i.sailin) END_OF_LIFE_DATE,
         rmsto_Date(i.entlin) FIRST_DATE_ON_SALE,
         0 FREIGHT_PRICE, -- PRECO DO FRETE???
         0 FREIGHT_TIME, -- TEMPO DO FRETE???
         rms7to_date(P.PRE_DAT_INICIO) AS ST_ITEM_ATTR_01_DATE --adicionado HENRIQUE 06/10/2021 --ENVIA A DATA DO PMC
  from gs_mvw_posestq e
  inner join gs_mvw_caditens i on i.prod = e.prod
  inner join gs_mvw_filiais f on f.codigo = trunc(e.filial/10) -- ESSE JOIN REMOVE FILIAIS 401, 403 E 405 QUE EST?O NA POS ESTQ
  LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and exp.gsku_filial = trunc(e.filial/10)
  LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
  left join gti.tab_sensib_pricing@lksfcoop sd on sd.cod_prod_rms = e.prod*10+dac(e.prod)
                                              and sd.loja = 999
  left join gti.tab_sensib_pricing@lksfcoop ss on ss.cod_prod_rms = e.prod*10+dac(e.prod)
                                              and ss.loja = e.filial
  left join ( SELECT MAX(PRE_DAT_INICIO) dt_ini, p.pre_loja, p.pre_nivel, p.pre_cod_item, p.pre_tipo
            FROM AA2CPREC p
            WHERE PRE_LOJA      = 1
            AND PRE_NIVEL       = 1
            AND PRE_TIPO        = 'M'
            AND PRE_DAT_INICIO <= dateto_rms7(sysdate) AND (PRE_DAT_FIM = 0 OR PRE_DAT_FIM >= dateto_rms7(sysdate))
            AND PRE_CUSTO       = 0
            group by p.pre_loja, p.pre_nivel, p.pre_cod_item, p.pre_tipo
         ) mp on  mp.pre_cod_item = i.prod         
  left join aa2cprec p on p.pre_loja = mp.pre_loja
                      and p.pre_tipo = mp.pre_tipo
                      and p.pre_cod_item = mp.pre_cod_item
                      and p.pre_dat_inicio = mp.dt_ini
                      and p.pre_nivel = mp.pre_nivel
  where exp.gsku_descricao is null
  and e.filial not between 6000 and 6999
  and e.filial not between 4000 and 4999 --Excluir drogarias parceiras  
  AND i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
  AND i.linha not in ('82','94')
  and CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
  AND (I.SAILIN = 0 -- TODOS EM LINHA
  OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
  OR nvl(e.estqqtd, 0) >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
  OR trunc(sysdate)-nvl(e.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
  )
  OR i.prod in (/*select distinct sm.abs_codsim from ag1cdabs sm where sm.abs_tipo = 'S'*/
                select distinct sm.abs_codsim
                  from ag1cdabs sm
                  left join aa3citem a
                    on sm.abs_codsim = a.git_cod_item
                 where sm.abs_tipo = 'S'
                   and a.git_linha not in ('82', '94')
               ); -- PRODUTO SIMILAR SEMPRE ENVIA;--OR trunc(sysdate)-rmsto_date(i.ultent) < 365); -- SOMENTE SE A ULTIMA COMPRA FOI NO ULTIMO ANO;;--OR trunc(sysdate)-rmsto_date(i.ultent) < 365); -- SOMENTE SE A ULTIMA COMPRA FOI NO ULTIMO ANO;
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             323 INTERFACE,
             'ITEM STORE' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_itemstore
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (store_id , sku_id   , ORIGIN_ID, open_to_buy , sensitivity_id,st_item_attr_01_no,
         st_item_attr_02_flag,st_item_attr_03_flag,st_item_attr_04_flag,ret_allow_ind,    
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME,
         season_id,end_of_life_date,first_date_on_sale,freight_price,freight_time,ST_ITEM_ATTR_01_DATE     )
   select store_id , sku_id   , ORIGIN_ID, open_to_buy , sensitivity_id,st_item_attr_01_no,
         st_item_attr_02_flag,st_item_attr_03_flag,st_item_attr_04_flag,ret_allow_ind,    
         RECORD_STATUS, CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME,
         season_id,end_of_life_date,first_date_on_sale,freight_price,freight_time,ST_ITEM_ATTR_01_DATE     
   from gs_prf_itemstore';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;

  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
  
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);  
end ExportaItemStore;

procedure ExportaItem(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 226;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  -- INTERFACE 226
  -- DINTERFACE ITEM
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_item';
  execute immediate v_query;
  
  -- INCLUI NA TABELA STAGE
  INSERT INTO gs_prf_item (sku_id, merch_l1_id, merch_l2_id, merch_l3_id, merch_l4_id, merch_l5_id, merch_l6_id,
         vat_id, origin_id, label_id, primary_supplier_id, season_id, sku_desc, sku_short_desc, last_received,
         shelf_life_flag, shelf_life_days, item_attr_01_char, item_attr_02_char, item_attr_03_char, item_attr_01_flag, ITEM_ATTR_02_FLAG,
         ITEM_ATTR_01_ID, ITEM_ATTR_04_CHAR, record_status, create_user_id, create_datetime, last_update_user_id, last_update_datetime,END_OF_LIFE_DATE,ITEM_ATTR_03_FLAG)
  SELECT TO_CHAR(i.prod*10+dac(i.prod)) SKU_ID,
       '1' MERCH_L1_ID,
       '1.'||TO_CHAR(I.DEP, 'fm000') MERCH_L2_ID,
       '1.'||TO_CHAR(I.DEP, 'fm000')||'.'||to_char(i.sec, 'fm000') MERCH_L3_ID,
       '1.'||TO_CHAR(I.DEP, 'fm000')||'.'||to_char(i.sec, 'fm000')||'.'||to_char(i.grp,'fm000') MERCH_L4_ID,
       '1.'||TO_CHAR(I.DEP, 'fm000')||'.'||to_char(i.sec, 'fm000')||'.'||to_char(i.grp,'fm000')||'.'||to_char(i.sgrp,'fm000') MERCH_L5_ID,
       null MERCH_L6_ID, -- NAO VAI TRABALHAR COM NIVEL DE CATEGORIA '1.'||TO_CHAR(I.DEP, 'fm000')||'.'||to_char(i.sec, 'fm000')||'.'||to_char(i.grp,'fm000')||'.'||to_char(i.sgrp,'fm000')||'.000'
       '01' VAT_ID,
       '01' ORIGIN_ID,
       trim(i.marca) LABEL_ID,
       to_char(i.forn*10+dac(i.forn)) PRIMARY_SUPPLIER_ID,
       to_char(sf.cod_saz) SEASON_ID, -- ID DA SAZONALIDADE 
       trim(substr(I.DPROD, 10, 128)) SKU_DESC,
       trim(substr(I.DPROD, 10, 120)) SKU_SHORT_DESC,
       rmsto_date(i.ultent) LAST_RECEIVED, -- ULTIMO RECEBIMENTO
       case when i.perec = 'S' then 'Y' else 'N' end SHELF_LIFE_FLAG, -- PERECIVEL
       i.prz_validade SHELF_LIFE_DAYS, -- VALIDADE
       trim(substr(i.princ_ativo, 1, 40)) ITEM_ATTR_01_CHAR,
       SFd.TP_TRAT_DROG ITEM_ATTR_02_CHAR, -- TIPO TRATAMENTO E USO
       sfd.tp_tarja_drog ITEM_ATTR_03_CHAR, -- TARJA 
       case when nvl(p.pre_preco, 0) > 0 then 'Y' else 'N' end ITEM_ATTR_01_FLAG, -- TEM PMC
       case when i.sec in (34,41,42,43,44,45,49,71,72,73,358) THEN 'Y' else 'N' end ITEM_ATTR_02_FLAG, -- NAO REVENDA -- ADICIONADO POR HENRIQUE 15/12/2020
       I.COMPR AS ITEM_ATTR_01_ID, -- COD COMPRADOR --ADICIONADO POR HENRIQUE 05/06/2019, FAZER FILTRO POR COMPRADOR NA FERRAMENTA
       to_char(DESC_GRUPO_COTACAO)  ITEM_ATTR_04_CHAR,
       'A' RECORD_STATUS,
       'Coop' CREATE_USER_ID,
       sysdate  CREATE_DATETIME,
       'Coop' LAST_UPDATE_USER_ID,
       sysdate  LAST_UPDATE_DATETIME,
       rms7to_date(rms6to_rms7(I.SAILIN)) AS END_OF_LIFE_DATE,
       CASE
         when det.det_far_popular = 'S' then 'Y'
         else 'N'
       END ITEM_ATTR_03_FLAG--, --FARMACIA POPULAR
       --I.MARCAPROP AS ITEM_ATTR_01_DESC, -- Codigo da Especie. Ex: P
       --SUBSTR(I.DMARCAPROP,3,32) AS ITEM_ATTR_02_DESC -- Descric?o da Especie. Ex: Normal       
  FROM GS_MVW_CADITENS i
  LEFT JOIN GTI.TAB_ITEM_COTACAO@LKSFCOOP ic on ic.cod_prod_cotacao = i.prod*10+dac(i.prod)  
  LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
  LEFT JOIN GTI.TAB_PRIC_DROG@LKSFCOOP sfd on sfd.cod_prod_rms = i.prod*10+dac(i.prod)
  left join ( SELECT MAX(PRE_DAT_INICIO) dt_ini, p.pre_loja, p.pre_nivel, p.pre_cod_item, p.pre_tipo
            FROM AA2CPREC p
            WHERE PRE_LOJA      = 1
            AND PRE_NIVEL       = 1
            AND PRE_TIPO        = 'M'
            AND PRE_DAT_INICIO <= dateto_rms7(sysdate) AND (PRE_DAT_FIM = 0 OR PRE_DAT_FIM >= dateto_rms7(sysdate))
            and PRE_CUSTO = 0
            group by p.pre_loja, p.pre_nivel, p.pre_cod_item, p.pre_tipo
         ) mp on  mp.pre_cod_item = i.prod         
  left join aa2cprec p on p.pre_loja = mp.pre_loja
                      and p.pre_tipo = mp.pre_tipo
                      and p.pre_cod_item = mp.pre_cod_item
                      and p.pre_dat_inicio = mp.dt_ini
                      and p.pre_nivel = mp.pre_nivel
  left join (select prod,
       sum(e.estqqtd) estq,
       max(e.dt_ult_fat) ultVenda
      from gs_mvw_posestq e
      where e.estqqtd >= 0 
      group by e.prod ) e on e.prod = i.prod  -- VERIFICA ESTOQUE E VENDA
 left join aa1ditem det
   on i.prod = det.det_cod_item --PUXAR A FARMACIA POPULAR
  WHERE i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
  AND i.linha not in ('82','94')
  and CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
  AND (I.SAILIN = 0 -- TODOS EM LINHA
  OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
  OR nvl(e.estq, 0) >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
  OR trunc(sysdate)-nvl(e.ultVenda, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
  --OR trunc(sysdate)-rmsto_date(i.ultent) < 365 -- SOMENTE SE A ULTIMA COMPRA FOI NO ULTIMO ANO
  )
  OR i.prod in (/*select distinct sm.abs_codsim from ag1cdabs sm where sm.abs_tipo = 'S'*/
                select distinct sm.abs_codsim
                  from ag1cdabs sm
                  left join aa3citem a
                    on sm.abs_codsim = a.git_cod_item
                 where sm.abs_tipo = 'S'
                   and a.git_linha not in ('82', '94')
               ); -- PRODUTO SIMILAR SEMPRE ENVIA;
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             226 INTERFACE,
             'ITEM' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_item
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (sku_id, merch_l1_id, merch_l2_id, merch_l3_id, merch_l4_id, merch_l5_id, merch_l6_id,
         vat_id, origin_id, label_id, primary_supplier_id, season_id, sku_desc, sku_short_desc, last_received,
         shelf_life_flag, shelf_life_days, item_attr_01_char, item_attr_02_char, item_attr_03_char, item_attr_01_flag,ITEM_ATTR_02_FLAG,
         ITEM_ATTR_01_ID, ITEM_ATTR_04_CHAR, record_status, create_user_id, create_datetime, last_update_user_id, last_update_datetime,END_OF_LIFE_DATE,ITEM_ATTR_03_FLAG)
   select sku_id, merch_l1_id, merch_l2_id, merch_l3_id, merch_l4_id, merch_l5_id, merch_l6_id,
         vat_id, origin_id, label_id, primary_supplier_id, season_id, sku_desc, sku_short_desc, last_received,
         shelf_life_flag, shelf_life_days, item_attr_01_char, item_attr_02_char, item_attr_03_char, item_attr_01_flag,ITEM_ATTR_02_FLAG,
         ITEM_ATTR_01_ID, ITEM_ATTR_04_CHAR, record_status, create_user_id, create_datetime, last_update_user_id, last_update_datetime,END_OF_LIFE_DATE,ITEM_ATTR_03_FLAG     
   from gs_prf_item';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia);-- PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
  
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);
end ExportaItem;

procedure ExportaItemEan(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 381;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  -- INTERFACE 381
  -- DINTERFACE ITEMEAN
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_itemean';
  execute immediate v_query;
  
  -- INCLUI NA TABELA STAGE
  INSERT INTO gs_prf_itemean (ean_id, sku_id, 
         record_status, create_user_id, create_datetime, last_update_user_id, last_update_datetime)
  select TO_CHAR(e.ean_cod_ean) EAN_ID,
         TO_CHAR(i.prod*10+dac(i.prod)) SKU_ID,
         'A' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         sysdate  CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         sysdate  LAST_UPDATE_DATETIME     
  FROM GS_MVW_CADITENS i
  inner join aa3ccean e on e.ean_cod_pro_alt = i.prod*10+dac(i.prod)
  LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
  left join (select prod,
       sum(e.estqqtd) estq,
       max(e.dt_ult_fat) ultVenda
      from gs_mvw_posestq e
      where e.estqqtd >= 0 
      group by e.prod ) e on e.prod = i.prod  -- VERIFICA ESTOQUE E VENDA
  WHERE i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
  AND i.linha not in ('82','94')
  and CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
  AND (I.SAILIN = 0 -- TODOS EM LINHA
  OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
  OR nvl(e.estq, 0) >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
  OR trunc(sysdate)-nvl(e.ultVenda, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
  --OR trunc(sysdate)-rmsto_date(i.ultent) < 365 -- SOMENTE SE A ULTIMA COMPRA FOI NO ULTIMO ANO
  );
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             381 INTERFACE,
             'ITEM EAN' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_itemean
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (ean_id, sku_id, 
         record_status, create_user_id, create_datetime, last_update_user_id, last_update_datetime)
   select ean_id, sku_id, 
         record_status, create_user_id, create_datetime, last_update_user_id, last_update_datetime     
   from gs_prf_itemean';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
  
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);
end ExportaItemEan;


procedure ExportaCostPrice (p_full pls_integer := 0, p_databatch date := trunc(sysdate))is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 407;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  -- INTERFACE 407
  -- DINTERFACE COST PRICE STORE
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_costprice';
  execute immediate v_query;
  
  -- INCLUI NA TABELA STAGE
  INSERT INTO gs_prf_costprice (EFFECTIVE_DATE, CALCULATE_DATE,SKU_ID,SUPPLIER_ID,STORE_ID,CURRENCY_ID,
         ORIGIN_ID,UNIT_COST,NET_COST,AVG_COST)
  select rmsto_date(e.get_dt_cus_med) EFFECTIVE_DATE,
         rmsto_date(e.get_dt_cus_med) CALCULATE_DATE,
         to_char(e.get_cod_produto)   SKU_ID,
         to_char(i.forn*10+dac(i.forn)) SUPPLIER_ID,
         to_char( case when trunc(p.filial/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   and trunc(p.filial/10) <> 84
                   and f.natureza != 'LV'
                   and i.dep = 3
                  then (trunc(p.filial/10)+600)*10+dac((trunc(p.filial/10)+600)) 
                    else p.filial end)  STORE_ID,
         '01'                         CURRENCY_ID,
         '01'                         ORIGIN_ID,
         ROUND(e.get_cus_med, 4)      UNIT_COST,
         ROUND(e.get_cus_med, 4)      NET_COST,
         ROUND(e.get_cus_med, 4)      AVG_COST
  from gs_mvw_posestq p
  inner join aa2cestq e on e.get_cod_produto = p.prod*10+dac(p.prod)
                       and e.get_cod_local = p.filial
  inner join gs_mvw_filiais f on f.codigo = trunc(p.filial/10)                       
  inner join gs_mvw_caditens i on i.prod = p.prod
  LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and exp.gsku_filial = trunc( p.filial /10)
  LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
  where (p_full = 1 OR e.get_dt_cus_med = dateto_rms(sysdate)) -- REGRA PARA FULL OU DELTA 
  AND e.get_dt_cus_med > 0
  and rmsto_date(e.get_dt_cus_med) >= rms7to_date(1150101)
  and p.filial not between 6000 and 6999
  and p.filial not between 4000 and 4999
  and exp.gsku_descricao is null
  AND i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
  AND i.linha not in ('82','94')
  and CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
  AND (I.SAILIN = 0 -- TODOS EM LINHA
  OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
  OR p.estqqtd >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
  OR trunc(sysdate)-nvl(p.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
  );--OR trunc(sysdate)-rmsto_date(i.ultent) < 365);
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'COST PRICE STORE' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_costprice
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (EFFECTIVE_DATE, CALCULATE_DATE,SKU_ID,SUPPLIER_ID,STORE_ID,CURRENCY_ID,
         ORIGIN_ID,UNIT_COST,NET_COST,AVG_COST)
   select EFFECTIVE_DATE, CALCULATE_DATE,SKU_ID,SUPPLIER_ID,STORE_ID,CURRENCY_ID,
         ORIGIN_ID,UNIT_COST,NET_COST,AVG_COST
   from gs_prf_costprice';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia);-- PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;


exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);
end ExportaCostPrice;

procedure ExportaFixedPrices(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 329;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  -- INTERFACE 329
  -- DINTERFACE FIXED PRICES
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_fixedprices';
  execute immediate v_query;
  -- EXCLUI DA TABELA ATUAL
  v_query := 'TRUNCATE TABLE gs_prf_fixedprices_atual';
  execute immediate v_query;
  
  -- INCLUI NA TABELA ATUAL
  INSERT INTO gs_prf_fixedprices_atual (SKU_ID, SUPPLIER_ID,LOCATION_LEVEL,LOCATION_ID,SUPP_REC_PRICE,START_DATE,
         END_DATE,SUPP_REC_PRICE_MIN,SUPP_REC_PRICE_MAX,RECORD_STATUS,create_user_id,create_datetime,last_update_user_id, last_update_datetime)
  select to_char(e.prod*10+dac(e.prod))                    SKU_ID,
         to_char(i.forn*10+dac(i.forn))                          SUPPLIER_ID,
         'STORE'                                                 LOCATION_LEVEL,
         to_char( case when trunc(e.filial/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   and trunc(e.filial/10) <> 84
                   and i.dep = 3
                  then (trunc(e.filial/10)+600)*10+dac((trunc(e.filial/10)+600)) 
                    else e.filial end)  LOCATION_ID,
         f_calcstpr(2, e.prod, dateto_rms7(sysdate),trunc(e.filial/10)) SUPP_REC_PRICE,
         trunc(sysdate)                                          START_DATE,
         null                                                    END_DATE,
         null                                                    SUPP_REC_PRICE_MIN,
         null                                                    SUPP_REC_PRICE_MAX,
         'A'                                                     RECORD_STATUS,
         'Coop'                                                  CREATE_USER_ID,
         sysdate                                                 CREATE_DATETIME,
         'Coop'                                                  LAST_UPDATE_USER_ID,
         sysdate                                                 LAST_UPDATE_DATETIME
  from gs_mvw_posestq e
  inner join gs_mvw_caditens i on i.prod = e.prod
  LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and exp.gsku_filial = trunc(e.filial/10)
  LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
  where exp.gsku_descricao is null
  and e.filial not between 6000 and 6999
  and i.pp = 'T'
  AND i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
  AND i.linha not in ('82','94')
  and CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
  AND (I.SAILIN = 0 -- TODOS EM LINHA
  OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
  OR e.estqqtd >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
  OR trunc(sysdate)-nvl(e.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
  );--OR trunc(sysdate)-rmsto_date(i.ultent) < 365); -- SOMENTE SE A ULTIMA COMPRA FOI NO ULTIMO ANO;
  
  -- COMPARA COM A POSICAO ATUAL DO PROFIMETRICS PARA INCLUIR NA 
  -- STAGE OS REGISTROS ADICIONADOS OU MODIFICADOS
  INSERT INTO gs_prf_fixedprices (SKU_ID, SUPPLIER_ID,LOCATION_LEVEL,LOCATION_ID,SUPP_REC_PRICE,START_DATE,
         END_DATE,SUPP_REC_PRICE_MIN,SUPP_REC_PRICE_MAX,RECORD_STATUS,create_user_id,create_datetime,last_update_user_id, last_update_datetime)
  select a.sku_id,
         a.supplier_id,
         a.location_level,
         a.location_id,
         a.supp_rec_price,
         a.start_date,
         a.end_date,
         a.supp_rec_price_min,
         a.supp_rec_price_max,
         case when nvl(p.supp_rec_price, 0) = 0 then 'A'
              else 'U' END record_status,
         case when nvl(p.supp_rec_price, 0) = 0 then a.create_user_id
              else p.create_user_id END create_user_id,
         case when nvl(p.supp_rec_price, 0) = 0 then a.create_datetime
              else p.create_datetime END create_datetime,
         a.last_update_user_id,
         a.last_update_datetime
  from gs_prf_fixedprices_atual a
  left join gs_prf_fixedprices_pos p on p.sku_id = a.sku_id
                                    and p.location_id = a.location_id
  where nvl(p.supp_rec_price, 0) != a.supp_rec_price;
  
  -- COMPARA COM A POSICAO ATUAL DO PROFIMETRICS PARA INCLUIR NA 
  -- STAGE OS REGISTROS EXCLUIDOS
  INSERT INTO gs_prf_fixedprices (SKU_ID, SUPPLIER_ID,LOCATION_LEVEL,LOCATION_ID,SUPP_REC_PRICE,START_DATE,
         END_DATE,SUPP_REC_PRICE_MIN,SUPP_REC_PRICE_MAX,RECORD_STATUS,create_user_id,create_datetime,last_update_user_id, last_update_datetime)
  select p.sku_id,
         p.supplier_id,
         p.location_level,
         p.location_id,
         p.supp_rec_price,
         p.start_date,
         p.end_date,
         p.supp_rec_price_min,
         p.supp_rec_price_max,
         'D' record_status, -- 'D' = DELETADO
         p.create_user_id,
         p.create_datetime,
         p.last_update_user_id,
         p.last_update_datetime
  from gs_prf_fixedprices_pos p
  left join gs_prf_fixedprices_atual a on p.sku_id = a.sku_id
                                    and p.location_id = a.location_id
  where a.supp_rec_price is null;

  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'FIXED PRICES' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_fixedprices
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (SKU_ID, SUPPLIER_ID,LOCATION_LEVEL,LOCATION_ID,SUPP_REC_PRICE,START_DATE,
         END_DATE,SUPP_REC_PRICE_MIN,SUPP_REC_PRICE_MAX,RECORD_STATUS,create_user_id,create_datetime,last_update_user_id, last_update_datetime)
   select SKU_ID, SUPPLIER_ID,LOCATION_LEVEL,LOCATION_ID,SUPP_REC_PRICE,START_DATE,
         END_DATE,SUPP_REC_PRICE_MIN,SUPP_REC_PRICE_MAX,RECORD_STATUS,create_user_id,create_datetime,last_update_user_id, last_update_datetime
   from gs_prf_fixedprices';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  -- ATUALIZA A POSICAO DO PROFIMETRICS
  merge into gs_prf_fixedprices_pos g
  using
  (
        select s.sku_id,
               s.supplier_id,
               s.location_level,
               s.location_id,
               s.supp_rec_price,
               s.start_date,
               s.end_date,
               s.supp_rec_price_min,
               s.supp_rec_price_max,
               s.record_status,
               s.create_user_id,
               s.create_datetime,
               s.last_update_user_id,
               s.last_update_datetime
        from gs_prf_fixedprices s
  ) a
  on
  (
        g.sku_id = a.sku_id
    and g.location_id = a.location_id
  )
  when matched then 
    update set g.location_level = a.location_level,
               g.supp_rec_price = a.supp_rec_price,
               g.start_date = a.start_date, 
               g.supp_rec_price_min = a.supp_rec_price_min,
               g.supp_rec_price_max = a.supp_rec_price_max, 
               g.record_status = a.record_status,
               g.last_update_user_id = a.last_update_user_id, 
               g.last_update_datetime = a.last_update_datetime
  when not matched then 
    insert (SKU_ID, SUPPLIER_ID,LOCATION_LEVEL,LOCATION_ID,SUPP_REC_PRICE,START_DATE,
         END_DATE,SUPP_REC_PRICE_MIN,SUPP_REC_PRICE_MAX,RECORD_STATUS,create_user_id,create_datetime,last_update_user_id, last_update_datetime)
    values (a.SKU_ID, a.SUPPLIER_ID, a.LOCATION_LEVEL, a.LOCATION_ID, a.SUPP_REC_PRICE, a.START_DATE,
         a.END_DATE, a.SUPP_REC_PRICE_MIN, a.SUPP_REC_PRICE_MAX, a.RECORD_STATUS, a.create_user_id, a.create_datetime, a.last_update_user_id, a.last_update_datetime);
  commit;
  
  delete from gs_prf_fixedprices_pos fp where fp.record_status = 'D';
  commit;
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);
end ExportaFixedPrices;

procedure ExportaRetailPrices(p_inicio pls_integer := dateto_rms7(sysdate+1), p_fim pls_integer := dateto_rms7(sysdate+1), p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino   date;
  v_loop      pls_integer;
begin  
  v_interface := 810;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  v_loop := p_inicio;
   v_inicio    := sysdate;     
      
      -- INTERFACE 810
      -- DINTERFACE RETAIL PRICES
      -- EXCLUI DA TABELA STAGE
      v_query := 'TRUNCATE TABLE gs_prf_retailprices';
      execute immediate v_query;
  while v_loop <= p_fim 
  loop 
     
      -- INCLUI NA TABELA STAGE
      insert into gs_prf_retailprices (TRAN_TYPE,APPROVED_DATE,EFFECTIVE_DATE,
             DUE_DATE,SKU_ID,LOC_LEVEL,LOC_ID,RETAIL_PRICE,CURRENCY_ID,OFFER_ID,STORE_REQUEST_ID,
             ORIGIN_ID,PRICE_SYSTEM_ID,PRICE_TYPE,INSTALLMENTS_NUMBER,INSTALLMENT_PRICE,
             ST_PRC_ATTR_01_NO,ST_PRC_ATTR_02_NO,ST_PRC_ATTR_03_NO,ST_PRC_ATTR_04_NO,ST_PRC_ATTR_05_NO,
             ST_PRC_ATTR_01_CHAR,ST_PRC_ATTR_02_CHAR,ST_PRC_ATTR_03_CHAR,ST_PRC_ATTR_04_CHAR,ST_PRC_ATTR_05_CHAR,
             COMMENTS,record_status,create_user_id,create_datetime)
      select 'C'                                            TRAN_TYPE,
             rms7to_date(p.pre_dat_inicio)                  APPROVED_DATE,
             rms7to_date(p.pre_dat_inicio)                  EFFECTIVE_DATE,
             rms7to_date(p.pre_dat_fim)                     DUE_DATE,
             to_char(p.pre_cod_item*10+dac(p.pre_cod_item)) SKU_ID,
             'STORE'                                        LOC_LEVEL,
             to_char( case when trunc(e.filial/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   and trunc(e.filial/10) <> 84
                   and i.dep = 3
                  then (trunc(e.filial/10)+600)*10+dac((trunc(e.filial/10)+600)) 
                    else e.filial end)                      LOC_ID,
             round(p.pre_preco, 4)                          RETAIL_PRICE,
             '01'                                           CURRENCY_ID,
             case when p.pre_cod_oferta > 0 then 
                       to_char(p.pre_cod_oferta)
                  else null end                             OFFER_ID,
             null                                           STORE_REQUEST_ID,
             '01'                                           ORIGIN_ID,
             'RMS'                                          PRICE_SYSTEM_ID,
             case when p.pre_tipo = 'O' then 'P'
                  else 'R' end                              PRICE_TYPE,
             null                                           INSTALLMENTS_NUMBER,
             null                                           INSTALLMENT_PRICE,
             null                                           ST_PRC_ATTR_01_NO,
             null                                           ST_PRC_ATTR_02_NO,
             null                                           ST_PRC_ATTR_03_NO,
             null                                           ST_PRC_ATTR_04_NO,
             null                                           ST_PRC_ATTR_05_NO,
             null                                           ST_PRC_ATTR_01_CHAR,
             null                                           ST_PRC_ATTR_02_CHAR,
             null                                           ST_PRC_ATTR_03_CHAR,
             null                                           ST_PRC_ATTR_04_CHAR,
             null                                           ST_PRC_ATTR_05_CHAR,
             null                                           COMMENTS,
             'A'                                            RECORD_STATUS,
             'Coop'                                         CREATE_USER_ID,
             sysdate                                        CREATE_DATETIME
      from gs_mvw_posestq e      
      inner join gs_mvw_caditens i on i.prod = e.prod
      LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and exp.gsku_filial = trunc(e.filial/10)
      inner join aa2cprec p on p.pre_dat_inicio = v_loop
                           and p.pre_loja = trunc(e.filial/10)
                           and p.pre_cod_item = e.prod
      LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
      where p.pre_tipo in( 'N', 'O')
      and exp.gsku_descricao is null
      and e.filial not between 6000 and 6999    and e.filial not in (5525,5533) --AND temporario, apenas para enviar uma carga de lojas especificas
      and p.pre_preco > 0                                           
      AND i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
      and CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
      AND i.linha not in ('82','94')
      AND (I.SAILIN = 0 -- TODOS EM LINHA
      OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
      OR e.estqqtd >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
      OR trunc(sysdate)-nvl(e.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
      )--OR trunc(sysdate)-rmsto_date(i.ultent) < 365)
      union all
      select 'C'                                            TRAN_TYPE,
             rms7to_date(p.pre_dat_inicio)                  APPROVED_DATE,
             rms7to_date(p.pre_dat_inicio)                  EFFECTIVE_DATE,
             rms7to_date(p.pre_dat_fim)                     DUE_DATE,
             to_char(p.pre_cod_item*10+dac(p.pre_cod_item)) SKU_ID,
             'STORE'                                        LOC_LEVEL,
             to_char( case when trunc(e.filial/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   and trunc(e.filial/10) <> 84
                   and i.dep = 3
                  then (trunc(e.filial/10)+600)*10+dac((trunc(e.filial/10)+600)) 
                    else e.filial end)                      LOC_ID,
             round(p.pre_preco, 4)                          RETAIL_PRICE,
             '01'                                           CURRENCY_ID,
             case when p.pre_cod_oferta > 0 then 
                       to_char(p.pre_cod_oferta)
                  else null end                             OFFER_ID,
             null                                           STORE_REQUEST_ID,
             '01'                                           ORIGIN_ID,
             'RMS'                                          PRICE_SYSTEM_ID,
             case when p.pre_tipo = 'O' then 'P'
                  else 'R' end                              PRICE_TYPE,
             null                                           INSTALLMENTS_NUMBER,
             null                                           INSTALLMENT_PRICE,
             null                                           ST_PRC_ATTR_01_NO,
             null                                           ST_PRC_ATTR_02_NO,
             null                                           ST_PRC_ATTR_03_NO,
             null                                           ST_PRC_ATTR_04_NO,
             null                                           ST_PRC_ATTR_05_NO,
             null                                           ST_PRC_ATTR_01_CHAR,
             null                                           ST_PRC_ATTR_02_CHAR,
             null                                           ST_PRC_ATTR_03_CHAR,
             null                                           ST_PRC_ATTR_04_CHAR,
             null                                           ST_PRC_ATTR_05_CHAR,
             null                                           COMMENTS,
             'A'                                            RECORD_STATUS,
             'Coop'                                         CREATE_USER_ID,
             sysdate                                        CREATE_DATETIME
      from gs_mvw_posestq e      
      inner join gs_mvw_caditens i on i.prod = e.prod
      LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and exp.gsku_filial = trunc(e.filial/10)
      inner join aa3cprec p on p.pre_dat_inicio = v_loop
                           and p.pre_loja = trunc(e.filial/10)
                           and p.pre_cod_item = e.prod
      LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
      where p.pre_tipo in( 'N', 'O')
      and e.filial not between 6000 and 6999
      and exp.gsku_descricao is null
      and p.pre_preco > 0
      AND i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
      AND i.linha not in ('82','94')
      and CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
      AND (I.SAILIN = 0 -- TODOS EM LINHA
      OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
      OR e.estqqtd >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
      OR trunc(sysdate)-nvl(e.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
      );--OR trunc(sysdate)-rmsto_date(i.ultent) < 365);

      commit;     
      v_loop := dateto_rms7(rms7to_date(v_loop) + 1);
      --v_seq := v_seq + 1;
  end loop;
  
  
  
  
  --ESSE WHILE TODO DEVE SER COMENTADO DEPOIS, INCLUIR APENAS PARA ENVIAR UMA CARGA FULL DE PRECOS DE FILIAIS ESPECIFICAS
  /*v_loop := 1200101;
  
  while v_loop <= p_fim 
  loop 
     
      -- INCLUI NA TABELA STAGE
      insert into gs_prf_retailprices (TRAN_TYPE,APPROVED_DATE,EFFECTIVE_DATE,
             DUE_DATE,SKU_ID,LOC_LEVEL,LOC_ID,RETAIL_PRICE,CURRENCY_ID,OFFER_ID,STORE_REQUEST_ID,
             ORIGIN_ID,PRICE_SYSTEM_ID,PRICE_TYPE,INSTALLMENTS_NUMBER,INSTALLMENT_PRICE,
             ST_PRC_ATTR_01_NO,ST_PRC_ATTR_02_NO,ST_PRC_ATTR_03_NO,ST_PRC_ATTR_04_NO,ST_PRC_ATTR_05_NO,
             ST_PRC_ATTR_01_CHAR,ST_PRC_ATTR_02_CHAR,ST_PRC_ATTR_03_CHAR,ST_PRC_ATTR_04_CHAR,ST_PRC_ATTR_05_CHAR,
             COMMENTS,record_status,create_user_id,create_datetime)
      select 'C'                                            TRAN_TYPE,
             rms7to_date(p.pre_dat_inicio)                  APPROVED_DATE,
             rms7to_date(p.pre_dat_inicio)                  EFFECTIVE_DATE,
             rms7to_date(p.pre_dat_fim)                     DUE_DATE,
             to_char(p.pre_cod_item*10+dac(p.pre_cod_item)) SKU_ID,
             'STORE'                                        LOC_LEVEL,
             to_char( case when trunc(e.filial/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   and trunc(e.filial/10) <> 84
                   and i.dep = 3
                  then (trunc(e.filial/10)+600)*10+dac((trunc(e.filial/10)+600)) 
                    else e.filial end)                      LOC_ID,
             round(p.pre_preco, 4)                          RETAIL_PRICE,
             '01'                                           CURRENCY_ID,
             case when p.pre_cod_oferta > 0 then 
                       to_char(p.pre_cod_oferta)
                  else null end                             OFFER_ID,
             null                                           STORE_REQUEST_ID,
             '01'                                           ORIGIN_ID,
             'RMS'                                          PRICE_SYSTEM_ID,
             case when p.pre_tipo = 'O' then 'P'
                  else 'R' end                              PRICE_TYPE,
             null                                           INSTALLMENTS_NUMBER,
             null                                           INSTALLMENT_PRICE,
             null                                           ST_PRC_ATTR_01_NO,
             null                                           ST_PRC_ATTR_02_NO,
             null                                           ST_PRC_ATTR_03_NO,
             null                                           ST_PRC_ATTR_04_NO,
             null                                           ST_PRC_ATTR_05_NO,
             null                                           ST_PRC_ATTR_01_CHAR,
             null                                           ST_PRC_ATTR_02_CHAR,
             null                                           ST_PRC_ATTR_03_CHAR,
             null                                           ST_PRC_ATTR_04_CHAR,
             null                                           ST_PRC_ATTR_05_CHAR,
             null                                           COMMENTS,
             'A'                                            RECORD_STATUS,
             'Coop'                                         CREATE_USER_ID,
             sysdate                                        CREATE_DATETIME
      from gs_mvw_posestq e      
      inner join gs_mvw_caditens i on i.prod = e.prod
      LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and exp.gsku_filial = trunc(e.filial/10)
      inner join aa2cprec p on p.pre_dat_inicio = v_loop
                           and p.pre_loja = trunc(e.filial/10)
                           and p.pre_cod_item = e.prod
      LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
      where p.pre_tipo in( 'N', 'O')      and e.filial in (5525,5533)
      and exp.gsku_descricao is null
      and e.filial not between 6000 and 6999
      and p.pre_preco > 0                                           
      AND i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
      and CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
      AND i.linha not in ('82','94')
      AND (I.SAILIN = 0 -- TODOS EM LINHA
      OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
      OR e.estqqtd >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
      OR trunc(sysdate)-nvl(e.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
      )--OR trunc(sysdate)-rmsto_date(i.ultent) < 365)
      ;

      commit;     
      v_loop := dateto_rms7(rms7to_date(v_loop) + 1);
      --v_seq := v_seq + 1;
  end loop;*/
  
   -- REGISTRA LOG
      MERGE INTO GS_LOG_PROFIMETRICS G
      USING
      (
          SELECT v_loop DIA,
                 v_interface INTERFACE,
                 'RETAIL PRICES' DINTERFACE,
                 dateto_rms7(sysdate) dia_envio,
                 1 qtd_envio,
                 count(*) registros,
                 0 valor
          from gs_prf_retailprices
       ) A
       ON
       (
             G.DIA = A.DIA
         AND G.INTERFACE = A.INTERFACE
       )
       WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1, g.dia_envio = a.dia_envio
       WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                             VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
      COMMIT;
      
      v_extracao  := sysdate;
      
      -- REFRESH DA SEQUENCIA
      --select max(lp.qtd_envio)+1 into v_seq
      --from gs_log_profimetrics lp
      --where lp.interface = v_interface
      --and lp.dia_envio = dateto_rms7(sysdate)
      --and lp.dia = v_loop;
      -- ATIVA API
      v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
      -- ENVIA API
      v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
       (TRAN_TYPE,APPROVED_DATE,EFFECTIVE_DATE,
             DUE_DATE,SKU_ID,LOC_LEVEL,LOC_ID,RETAIL_PRICE,CURRENCY_ID,OFFER_ID,STORE_REQUEST_ID,
             ORIGIN_ID,PRICE_SYSTEM_ID,PRICE_TYPE,INSTALLMENTS_NUMBER,INSTALLMENT_PRICE,
             ST_PRC_ATTR_01_NO,ST_PRC_ATTR_02_NO,ST_PRC_ATTR_03_NO,ST_PRC_ATTR_04_NO,ST_PRC_ATTR_05_NO,
             ST_PRC_ATTR_01_CHAR,ST_PRC_ATTR_02_CHAR,ST_PRC_ATTR_03_CHAR,ST_PRC_ATTR_04_CHAR,ST_PRC_ATTR_05_CHAR,
             COMMENTS,record_status,create_user_id,create_datetime)
       select TRAN_TYPE,APPROVED_DATE,EFFECTIVE_DATE,
             DUE_DATE,SKU_ID,LOC_LEVEL,LOC_ID,RETAIL_PRICE,CURRENCY_ID,OFFER_ID,STORE_REQUEST_ID,
             ORIGIN_ID,PRICE_SYSTEM_ID,PRICE_TYPE,INSTALLMENTS_NUMBER,INSTALLMENT_PRICE,
             ST_PRC_ATTR_01_NO,ST_PRC_ATTR_02_NO,ST_PRC_ATTR_03_NO,ST_PRC_ATTR_04_NO,ST_PRC_ATTR_05_NO,
             ST_PRC_ATTR_01_CHAR,ST_PRC_ATTR_02_CHAR,ST_PRC_ATTR_03_CHAR,ST_PRC_ATTR_04_CHAR,ST_PRC_ATTR_05_CHAR,
             COMMENTS,record_status,create_user_id,create_datetime
       from gs_prf_retailprices';
       
      execute immediate v_query;
       
      -- COMITA API
      --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
      commit;
      
      v_termino := sysdate;
      
      update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
      where lp.interface = v_interface
      and lp.dia = v_loop;
      commit;
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);
end ExportaRetailPrices;

procedure ExportaCompetitorPrices(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 706;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  -- INTERFACE 706
  -- DINTERFACE COMPETITOR PRICES
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_competitorprices';
  execute immediate v_query;
  -- EXCLUI DA TABELA ATUAL
  v_query := 'TRUNCATE TABLE gs_prf_competitorprices_atual';
  execute immediate v_query;
  
  INSERT INTO gs_prf_competitorprices_atual (SHOP_BASKET_ID,SHOP_DATE,SHOPPER_ID,
       TRAN_TYPE,SKU_ID,COMPETITOR_ID,COMP_STORE_ID,CURRENCY_ID,ORIGIN_ID,
       PROMOTIONAL_FLAG,COMPETITOR_PRICE,COMP_RETAIL_TYPE,SHOP_LIST_TYPE_ID,
       SHOPPING_TYPE,COMP_INSTALLMENTS_NUMBER,COMP_INSTALLMENT_PRICE,IMAGE_FILE_LINK)
  select null                                               SHOP_BASKET_ID, -- FOI SOLICITADO PARA ENVIAR NULL
         rms7to_date(dia)                                   SHOP_DATE,
         to_char(lpad(to_number(origem),2,0)) /*'04'*/      SHOPPER_ID, 
         p.tran_type                                        TRAN_TYPE,
         to_char(p.codigo_produto*10+dac(p.codigo_produto)) SKU_ID,
         case 
           when p.codigo_bandeira < 10 then to_char(p.codigo_bandeira,'fm00')
           else to_char(p.codigo_bandeira) 
         end --ANTES TINHA QUE SER CHAR2, MAS JA ESTOUROU A QUANTIDADE, MAS ALGUNS JA ESTAVAM COMO '01' E NAO DA PRA MANDAR '1'
         /*to_char(p.codigo_bandeira,'fm00') ORIGINAL*/                  COMPETITOR_ID,
         to_char(p.codigo_concorrente)                      COMP_STORE_ID,
         '01'                                               CURRENCY_ID,
         '01'                                               ORIGIN_ID,
         case when upper(p.promocao) = 'SIM' then 'Y'
              else 'N' end PROMOTIONAL_FLAG,                            
         round(p.preco_concorrente, 4)                      COMPETITOR_PRICE,
         case when upper(p.promocao) = 'SIM' then 'P'
              else 'R' end  COMP_RETAIL_TYPE,                           --ALTERADO EM 10/05/2019 HENRIQUE 'P' = PROMOCAO 'R' = REGULAR 'C' = MARKDOWN
         null                                               SHOP_LIST_TYPE_ID,
         'REACTIVE'                                         SHOPPING_TYPE,
         null                                               COMP_INSTALLMENTS_NUMBER,
         null                                               COMP_INSTALLMENT_PRICE,
         p.foto                                             AS IMAGE_FILE_LINK --ADICIONADO POR HENRIQUE
  from gs_concorrente_pesquisa p
  inner join gs_mvw_caditens i on i.prod = p.codigo_produto
  left join (select prod,
       sum(e.estqqtd) estq,
       max(e.dt_ult_fat) ultVenda
      from gs_mvw_posestq e
      where e.estqqtd >= 0 
      group by e.prod ) e on e.prod = i.prod  -- VERIFICA ESTOQUE E VENDA
  LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
  where p.tran_type is not null
  and p.preco_concorrente > 0
  and p.dia > 1111111 and p.dia < 1221231
  and i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
  and CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
  AND i.linha not in ('82','94')
  AND (I.SAILIN = 0 -- TODOS EM LINHA
  OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
  OR nvl(e.estq, 0) >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
  OR trunc(sysdate)-nvl(e.ultVenda, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
  );--OR trunc(sysdate)-rmsto_date(i.ultent) < 365); -- SOMENTE SE A ULTIMA COMPRA FOI NO ULTIMO ANO;
  
  -- COMPARA COM A POSICAO ATUAL DO PROFIMETRICS PARA INCLUIR NA 
  -- STAGE OS REGISTROS ADICIONADOS OU MODIFICADOS
  INSERT INTO gs_prf_competitorprices (SHOP_BASKET_ID,SHOP_DATE,SHOPPER_ID,
       TRAN_TYPE,SKU_ID,COMPETITOR_ID,COMP_STORE_ID,CURRENCY_ID,ORIGIN_ID,
       PROMOTIONAL_FLAG,COMPETITOR_PRICE,COMP_RETAIL_TYPE,SHOP_LIST_TYPE_ID,
       SHOPPING_TYPE,COMP_INSTALLMENTS_NUMBER,COMP_INSTALLMENT_PRICE,IMAGE_FILE_LINK)
  select a.SHOP_BASKET_ID,
         a.SHOP_DATE,
         a.SHOPPER_ID,
         a.TRAN_TYPE,
         a.SKU_ID,
         a.COMPETITOR_ID,
         a.COMP_STORE_ID,
         a.CURRENCY_ID,
         a.ORIGIN_ID,
         a.PROMOTIONAL_FLAG,
         a.COMPETITOR_PRICE,
         a.COMP_RETAIL_TYPE,
         a.SHOP_LIST_TYPE_ID,
         a.shopping_type,
         a.comp_installments_number,
         a.comp_installment_price,
         a.image_file_link
  from gs_prf_competitorprices_atual a
  left join gs_prf_competitorprices_pos p on /*p.SHOP_BASKET_ID = a.SHOP_BASKET_ID
                                    and*/ p.SHOP_DATE = a.SHOP_DATE
                                    and p.SHOPPER_ID = a.SHOPPER_ID
                                    and p.TRAN_TYPE = a.TRAN_TYPE
                                    and p.SKU_ID = a.SKU_ID
                                    and p.COMPETITOR_ID = a.COMPETITOR_ID
                                    and p.COMP_STORE_ID = a.COMP_STORE_ID
  where p.competitor_price is null;
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'COMPETITOR PRICES' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_competitorprices
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (SHOP_BASKET_ID,SHOP_DATE,SHOPPER_ID,
       TRAN_TYPE,SKU_ID,COMPETITOR_ID,COMP_STORE_ID,CURRENCY_ID,ORIGIN_ID,
       PROMOTIONAL_FLAG,COMPETITOR_PRICE,COMP_RETAIL_TYPE,SHOP_LIST_TYPE_ID,
       SHOPPING_TYPE,COMP_INSTALLMENTS_NUMBER,COMP_INSTALLMENT_PRICE,IMAGE_FILE_LINK)
   select SHOP_BASKET_ID,SHOP_DATE,SHOPPER_ID,
       TRAN_TYPE,SKU_ID,COMPETITOR_ID,COMP_STORE_ID,CURRENCY_ID,ORIGIN_ID,
       PROMOTIONAL_FLAG,COMPETITOR_PRICE,COMP_RETAIL_TYPE,SHOP_LIST_TYPE_ID,
       SHOPPING_TYPE,COMP_INSTALLMENTS_NUMBER,COMP_INSTALLMENT_PRICE,IMAGE_FILE_LINK
   from gs_prf_competitorprices';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  insert into gs_prf_competitorprices_pos 
         (SHOP_BASKET_ID,SHOP_DATE,SHOPPER_ID,
       TRAN_TYPE,SKU_ID,COMPETITOR_ID,COMP_STORE_ID,CURRENCY_ID,ORIGIN_ID,
       PROMOTIONAL_FLAG,COMPETITOR_PRICE,COMP_RETAIL_TYPE,SHOP_LIST_TYPE_ID,
       SHOPPING_TYPE,COMP_INSTALLMENTS_NUMBER,COMP_INSTALLMENT_PRICE,IMAGE_FILE_LINK)
  select SHOP_BASKET_ID,SHOP_DATE,SHOPPER_ID,
       TRAN_TYPE,SKU_ID,COMPETITOR_ID,COMP_STORE_ID,CURRENCY_ID,ORIGIN_ID,
       PROMOTIONAL_FLAG,COMPETITOR_PRICE,COMP_RETAIL_TYPE,SHOP_LIST_TYPE_ID,
       SHOPPING_TYPE,COMP_INSTALLMENTS_NUMBER,COMP_INSTALLMENT_PRICE,IMAGE_FILE_LINK
  from gs_prf_competitorprices
 where dateto_rms7(shop_date) < dateto_rms7(TRUNC(SYSDATE)-120);
  
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);
end ExportaCompetitorPrices;

procedure ExportaItemPriceRelation(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 1204;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  -- INTERFACE 1204
  -- DINTERFACE ITEM PRICE RELATION
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_itempricerelation';
  execute immediate v_query;
  commit;
  
  -- INCLUI NA TABELA STAGE
  insert into gs_prf_itempricerelation (RELATION_TYPE_ID, PARENT_PRODUCT_ID,CHILD_PRODUCT_ID,
         LOCATION_ID,LOCATION_LEVEL,ORIGIN_ID,PRICE_FACTOR,ADD_FACTOR,MAX_PRICE_FACTOR,USE_PRICE_POINT_SKU,
         CREATE_USER_ID,CREATE_DATETIME,LAST_UPDATE_USER_ID,LAST_UPDATE_DATETIME)
  select case 
            when f.dep = 3 then 'B'
            else  'A'
          end                                 RELATION_TYPE_ID, -- 'A' FAMILIA 'B' CAPACIDADE (ALANA)?? --ADICIONADO HENRIQUE | 13/09/2019 | FAMILIA RMS APENAS PARA O FARMA; SUPER FAMILIA APENAS DA TAB_PRIC_SAZO; N?O TERA CAPACIDADE PARA O SUPER
          to_char(sp.cod_propor)             PARENT_PRODUCT_ID,
          to_char(sp.cod_prod_rms)           CHILD_PRODUCT_ID,
          to_char( case when trunc(e.filial/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   and trunc(e.filial/10) <> 84
                   and f.dep = 3
                  then (trunc(e.filial/10)+600)*10+dac((trunc(e.filial/10)+600)) 
                    else e.filial end)       LOCATION_ID,
          'STORE'                            LOCATION_LEVEL,
          '01'                               ORIGIN_ID,
          sp.perc_propor                     PRICE_FACTOR,
          0                                  ADD_FACTOR,
          0                                  MAX_PRICE_FACTOR,
          CASE 
            WHEN SP.use_price_point_sku IS NULL 
              THEN 'Y'
            ELSE
              SP.use_price_point_sku
          END             USE_PRICE_POINT_SKU, --ADICIONADO HENRIQUE | 13/09/2019 | Y = ARREDONDAR N = N?O ARREDONDAR
          'Coop'                             CREATE_USER_ID,
           sysdate                           CREATE_DATETIME,
           'Coop'                            LAST_UPDATE_USER_ID,
           sysdate                           LAST_UPDATE_DATETIME
  from gs_mvw_posestq e
  inner join gti.tab_pric_prop@lksfcoop sp on sp.cod_prod_rms = e.prod*10+dac(e.prod) 
  inner join gs_mvw_caditens f on f.prod = e.prod
  inner join gs_mvw_posestq ef on ef.filial = e.filial
                              and ef.prod = trunc(sp.cod_propor/10) -- VALIDAR SE O FILHO VAI SER ENVIADO
  inner join gs_mvw_caditens p on p.prod = ef.prod                            
  inner join gs_mvw_filiais fil on fil.codigo = trunc(e.filial/10)
  LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                          and exp.gsku_filial = trunc(e.filial/10)
  LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = f.prod*10+dac(f.prod)                            
  LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sp on sp.cod_prod_rms = p.prod*10+dac(p.prod)
  where exp.gsku_descricao is null
  and e.filial not between 6000 and 6999
    AND f.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
    AND f.linha not in ('82','94')
    AND (f.SAILIN = 0 -- TODOS EM LINHA
    OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
    OR e.estqqtd >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
    OR trunc(sysdate)-nvl(e.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
    )
    and p.tp in (1,3,6)
    AND p.linha not in ('82','94')
    and ( p.sailin = 0
    or ef.estqqtd >= 1
    or nvl(sp.cod_saz, 0) > 0
    or trunc(sysdate)-nvl(ef.dt_ult_fat, trunc(sysdate-400)) < 365
    ) 
  union all -- COMENTADO PARTE DE RELACAO RMS , ESTA FICANDO COM FILHO QUE EH PAI E GERANDO UM AVO QUE NAO PODE NO PRF
  select 'A'                                 RELATION_TYPE_ID, -- 'A' FAMILIA 'B' CAPACIDADE (ALANA)??
          to_char(f.pai)                     PARENT_PRODUCT_ID,
          to_char(f.prod*10+dac(f.prod))     CHILD_PRODUCT_ID,
          to_char( case when trunc(e.filial/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   and trunc(e.filial/10) <> 84
                   and f.dep = 3
                  then (trunc(e.filial/10)+600)*10+dac((trunc(e.filial/10)+600)) 
                    else e.filial end)       LOCATION_ID,
          'STORE'                            LOCATION_LEVEL,
          '01'                               ORIGIN_ID,
          100                                PRICE_FACTOR,
          0                                  ADD_FACTOR,
          0                                  MAX_PRICE_FACTOR,
          'Y'                                USE_PRICE_POINT_SKU,
          'Coop'                             CREATE_USER_ID,
           sysdate                           CREATE_DATETIME,
           'Coop'                            LAST_UPDATE_USER_ID,
           sysdate                           LAST_UPDATE_DATETIME
  from gs_mvw_posestq e
  inner join gs_mvw_filiais fil on fil.codigo = trunc(e.filial/10)
  inner join gs_mvw_caditens f on f.pai > 0
                              and f.prod = e.prod
  LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                          and exp.gsku_filial = trunc(e.filial/10)
  LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = f.prod*10+dac(f.prod)                            
  where f.prod <> trunc(f.pai/10 )
  AND f.dep = 3 --ADICIONADO HENRIQUE | 13/09/2019 | FAMILIA RMS APENAS PARA O FARMA; SUPER FAMILIA APENAS DA TAB_PRIC_SAZO; N?O TERA CAPACIDADE PARA O SUPER
  and  exp.gsku_descricao is null
  and e.filial not between 6000 and 6999
    AND f.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
    AND (f.SAILIN = 0 -- TODOS EM LINHA
    OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
    OR e.estqqtd >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
    OR trunc(sysdate)-nvl(e.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
    );

   commit;
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'ITEM PRICE RELATION' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_itempricerelation
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  -- REFRESH DA SEQUENCIA
  --select lp.qtd_envio into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (RELATION_TYPE_ID, PARENT_PRODUCT_ID,CHILD_PRODUCT_ID,
         LOCATION_ID,LOCATION_LEVEL,ORIGIN_ID,PRICE_FACTOR,ADD_FACTOR,MAX_PRICE_FACTOR,USE_PRICE_POINT_SKU,
         CREATE_USER_ID,CREATE_DATETIME,LAST_UPDATE_USER_ID,LAST_UPDATE_DATETIME)
   select RELATION_TYPE_ID, PARENT_PRODUCT_ID,CHILD_PRODUCT_ID,
         LOCATION_ID,LOCATION_LEVEL,ORIGIN_ID,PRICE_FACTOR,ADD_FACTOR,MAX_PRICE_FACTOR,USE_PRICE_POINT_SKU,
         CREATE_USER_ID,CREATE_DATETIME,LAST_UPDATE_USER_ID,LAST_UPDATE_DATETIME
   from gs_prf_itempricerelation';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);
end ExportaItemPriceRelation;

procedure ExportaStock(p_dia pls_integer := dateto_rms7(sysdate-1), p_databatch date := trunc(sysdate-1)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 1008;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  --v_seq := 1;
  -- INTERFACE 1008
  -- DINTERFACE STOCK LOCATION
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE GS_PRF_STOCKLOCATION';
  execute immediate v_query;
  commit;
  -- INCLUI NA TABELA STAGE
  if (p_dia = dateto_rms7(sysdate-1)) then
    gs_proc_refreshmview('GS_MVW_POSESTQ');
    
    insert into gs_prf_stocklocation (stock_date, sku_id, store_id, origin_id, soh_val, soh_qty,
           create_user_id, create_datetime, last_update_user_id, last_update_datetime)
    select rms7to_date(p_dia)                        STOCK_DATE,
           to_char(p.prod*10+dac(p.prod))            SKU_ID,
           to_char( case when trunc(p.filial/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                     and trunc(p.filial/10) <> 84
                     and i.dep = 3
                    then (trunc(p.filial/10)+600)*10+dac((trunc(p.filial/10)+600)) 
                      else p.filial end)             STORE_ID,
           '01'                                      ORIGIN_ID,
           ROUND(p.estqqtd * p.cm, 4)          SOH_VAL,
           ROUND(p.estqqtd, 4)                      SOH_QTY,
           'Coop'                                    CREATE_USER_ID,
           sysdate                                   CREATE_DATETIME,
           'Coop'                                    LAST_UPDATE_USER_ID,
           sysdate                                   LAST_UPDATE_DATETIME
    from gs_mvw_posestq p
    inner join gs_mvw_caditens i on i.prod = p.prod
    inner join gs_mvw_filiais f on f.codigo = trunc(p.filial/10)
    LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                          and exp.gsku_filial = trunc(p.filial/10)
    LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = p.prod*10+dac(p.prod)
    --left join gti.tab_sensib_pricing@lksfcoop ss on ss.cod_prod_rms = p.prod*10+dac(p.prod)
    --                                            and ss.loja = p.filial
    where exp.gsku_descricao is null
    --AND e.estq_qtd > 0
    and p.filial not between 6000 and 6999
    AND i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
    AND CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
    AND i.linha not in ('82','94')
    AND (I.SAILIN = 0 -- TODOS EM LINHA
    OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
    OR p.estqqtd >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
    OR trunc(sysdate)-nvl(p.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
    );
  else
    insert into gs_prf_stocklocation (stock_date, sku_id, store_id, origin_id, soh_val, soh_qty,
           create_user_id, create_datetime, last_update_user_id, last_update_datetime)
    select rms7to_date(e.dia)                        STOCK_DATE,
           to_char(p.prod*10+dac(p.prod))            SKU_ID,
           to_char( case when e.filial between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                     and e.filial <> 84
                     and i.dep = 3
                    then (e.filial+600)*10+dac((e.filial+600)) 
                      else e.filial*10+dac(e.filial) end)             STORE_ID,
           '01'                                      ORIGIN_ID,
           ROUND(E.ESTQ_QTD * E.ESTQ_CM, 4)          SOH_VAL,
           ROUND(E.Estq_Qtd, 4)                      SOH_QTY,
           'Coop'                                    CREATE_USER_ID,
           sysdate                                   CREATE_DATETIME,
           'Coop'                                    LAST_UPDATE_USER_ID,
           sysdate                                   LAST_UPDATE_DATETIME
    from gs_mvw_posestq p
    inner join gs_mvw_caditens i on i.prod = p.prod
    inner join gs_mvw_filiais f on f.codigo = trunc(p.filial/10)
    inner join gs_agg_estq_prod e on e.dia = p_dia
                         and e.produto = p.prod
                         and e.filial = trunc(p.filial/10)
    LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                          and exp.gsku_filial = trunc(p.filial/10)
    LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = p.prod*10+dac(p.prod)
    --left join gti.tab_sensib_pricing@lksfcoop ss on ss.cod_prod_rms = p.prod*10+dac(p.prod)
    --                                            and ss.loja = p.filial
    where exp.gsku_descricao is null
    --AND e.estq_qtd > 0
    and e.filial not between 600 and 699
    AND i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
    AND CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
    AND i.linha not in ('82','94')
    AND (I.SAILIN = 0 -- TODOS EM LINHA
    OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
    OR p.estqqtd >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
    OR trunc(sysdate)-nvl(p.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
    );
  end if;
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT p_dia DIA,
             v_interface INTERFACE,
             'STOCK LOCATION' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_stocklocation
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1, g.dia_envio = a.dia_envio
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  -- REFRESH DA SEQUENCIA
  --select count(lp.qtd_envio) into v_seq
  --from gs_log_profimetrics lp
  --where lp.interface = v_interface
  --and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (stock_date, sku_id, store_id, origin_id, soh_val, soh_qty,
         create_user_id, create_datetime, last_update_user_id, last_update_datetime)
   select stock_date, sku_id, store_id, origin_id, soh_val, soh_qty,
         create_user_id, create_datetime, last_update_user_id, last_update_datetime
   from gs_prf_stocklocation';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia = p_dia;
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);
end ExportaStock;

procedure ExportaSales(p_ini pls_integer := dateto_rms7(sysdate-1), p_fim pls_integer := dateto_rms7(sysdate-1), p_databatch date := trunc(sysdate-1)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  --v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
  p_dia     pls_integer;
begin
  v_inicio    := sysdate;
  v_interface := 510;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  p_dia := p_ini;
  --v_seq := 1;
  -- INTERFACE 510
  -- DINTERFACE SALES ITEM STORE
  -- EXCLUI DA TABELA STAGE
  while p_dia <= p_fim 
  loop
    v_query := 'TRUNCATE TABLE GS_PRF_SALES';
    execute immediate v_query;
    commit;
    
    if(p_dia <> dateto_rms7(sysdate-1)) then
    -- INCLUI NA TABELA STAGE
      INSERT INTO GS_PRF_SALES
      SELECT rms7to_date(p.dia) SALES_DATE,
             to_char(p.produto*10+dac(p.produto))               SKU_ID,
             to_char( case when trunc(e.filial/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                       and trunc(e.filial/10) <> 84
                       and i.dep = 3
                      then (trunc(e.filial/10)+600)*10+dac((trunc(e.filial/10)+600)) 
                        else e.filial end)        STORE_ID,
             '01'                                 CURRENCY_ID,
             '01'                                 ORIGIN_ID,
             case when io.oferta is not null then 'P' else 'R' end TRAN_TYPE,
             round(nvl(p.vda_vlr,0), 4)                                SLS_VAL,
             round(nvl(p.vda_qtd,0), 4)                                SLS_QTY,
             round(nvl(p.vda_dev_qtd,0), 4)                            RTRN_QTY,
             round(nvl(p.vda_dev_vlr,0), 4)                            RTRN_VAL,
             to_char(sf.cod_saz)                                SLS_ST_ATTR_01_ID, 
             'Coop'                                             CREATE_USER_ID,
             sysdate                                            CREATE_DATETIME,
             'Coop'                                             LAST_UPDATE_USER_ID,
             sysdate                                            LAST_UPDATE_DATETIME,
             to_char(io.oferta)                                 OFFER_ID
      FROM gs_agg_coml_prod p  
      inner join gs_mvw_posestq e on e.prod = p.produto
                               and e.filial = p.filial*10+dac(p.filial)
      inner join gs_mvw_caditens i on i.prod = p.produto
      LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                            and exp.gsku_filial = p.filial
      LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
      --left join gti.tab_sensib_pricing@lksfcoop ss on ss.cod_prod_rms = e.prod*10+dac(e.prod)
      --                                            and ss.loja = e.filial
      left join gs_mvw_itemoferta io on io.dia = p.dia
                                    and io.filial = p.filial
                                    and io.produto = p.produto                                            
      where p.dia = p_dia
      and e.filial not between 6000 and 6999
      and (p.vda_vlr > 0 or p.vda_dev_vlr > 0)
      and exp.gsku_descricao is null
      AND i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
      AND CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
      AND i.linha not in ('82','94')
      AND (I.SAILIN = 0 -- TODOS EM LINHA
      OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
      OR e.estqqtd >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
      OR trunc(sysdate)-nvl(e.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
      );
      
      -- INCLUI VENDA DOS PRODUTOS COM REBAIXA DE PRECO
      INSERT INTO GS_PRF_SALES
      SELECT rms7to_date(p.dia) SALES_DATE,
             to_char(rec.RECE_COMPONENTE)               SKU_ID,
             to_char( case when trunc(e.filial/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                       and trunc(e.filial/10) <> 84
                       and max(i.dep) = 3
                      then (trunc(e.filial/10)+600)*10+dac((trunc(e.filial/10)+600)) 
                        else e.filial end)        STORE_ID,
             '01'                                 CURRENCY_ID,
             '01'                                 ORIGIN_ID,
             'P' TRAN_TYPE,
             round(nvl(sum(p.vda_vlr),0), 4)                                SLS_VAL,
             round(nvl(sum(p.vda_qtd),0), 4)                                SLS_QTY,
             round(nvl(sum(p.vda_dev_qtd),0), 4)                            RTRN_QTY,
             round(nvl(sum(p.vda_dev_vlr),0), 4)                            RTRN_VAL,
             max(to_char(sf.cod_saz))                                SLS_ST_ATTR_01_ID, 
             'Coop'                                             CREATE_USER_ID,
             sysdate                                            CREATE_DATETIME,
             'Coop'                                             LAST_UPDATE_USER_ID,
             sysdate                                            LAST_UPDATE_DATETIME,
             'VENCIMENTO'                                       OFFER_ID
      FROM gs_agg_coml_prod p  
      inner join gs_mvw_posestq e on e.prod = p.produto
                               and e.filial = p.filial*10+dac(p.filial)
      inner join gs_mvw_caditens i on i.prod = p.produto
      inner join gs_agrupreceita rec on rec.RECE_PRODUTO = p.produto*10+dac(p.produto)
      LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                            and exp.gsku_filial = p.filial
      LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
      --left join gti.tab_sensib_pricing@lksfcoop ss on ss.cod_prod_rms = e.prod*10+dac(e.prod)
      --                                            and ss.loja = e.filial
      left join gs_mvw_itemoferta io on io.dia = p.dia
                                    and io.filial = p.filial
                                    and io.produto = p.produto                                            
      where p.dia = p_dia
      and e.filial not between 6000 and 6999
      and (p.vda_vlr > 0 or p.vda_dev_vlr > 0)
      and exp.gsku_descricao is null
      AND i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
      AND CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 0 -- SOMENTE PRODUTOS DE REBAIXA PRECO VENC
      AND i.linha not in ('82','94')
      AND (I.SAILIN = 0 -- TODOS EM LINHA
      OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
      OR e.estqqtd >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
      OR trunc(sysdate)-nvl(e.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
      )
      group by p.dia, e.filial, rec.RECE_COMPONENTE;
    
    else 
        INSERT INTO GS_PRF_SALES   
        select SALES_DATE,
               to_char(SKU_ID)               SKU_ID,
                 to_char( case when trunc(STORE_ID/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                           and trunc(STORE_ID/10) <> 84
                           and i.dep = 3
                          then (trunc(STORE_ID/10)+600)*10+dac((trunc(STORE_ID/10)+600)) 
                            else STORE_ID end)        STORE_ID,
                 '01'                                 CURRENCY_ID,
                 '01'                                 ORIGIN_ID,
                 case when F_CALCSTPR_NRO_OFTA(trunc(sku_id/10),
                                     dateto_rms7(sales_date),
                                     trunc(store_id/10)) > 0 then 'P' else 'R' end                                  TRAN_TYPE,
                 round(SLS_VAL, 4)                    SLS_VAL,
                 round(SLS_QTY, 4)                                SLS_QTY,
                 0                                                   RTRN_QTY,
                 0                                                   RTRN_VAL,
                 to_char(sf.cod_saz)                                 SLS_ST_ATTR_01_ID, 
                 'Coop'                                              CREATE_USER_ID,
                 sysdate                                             CREATE_DATETIME,
                 'Coop'                                              LAST_UPDATE_USER_ID,
                 sysdate                                             LAST_UPDATE_DATETIME,
                 case when F_CALCSTPR_NRO_OFTA(trunc(sku_id/10),
                                     dateto_rms7(sales_date),
                                     trunc(store_id/10)) > 0 then
                                     to_char(F_CALCSTPR_NRO_OFTA(trunc(sku_id/10),
                                     dateto_rms7(sales_date),
                                     trunc(store_id/10))) else null end                 OFFER_ID
        FROM (
            select rms7to_date(c.cap_data) SALES_DATE,
                   d.det_cod_item*10+dac(d.det_cod_item) SKU_ID,
                   c.cap_filial*10+dac(c.cap_filial)     STORE_ID,
                   sum(nvl(d.det_total, 0))                      SLS_VAL,
                   sum(nvl(d.det_qtde, 0))                       SLS_QTY                   
            from CAPCUPOM c
            inner join DETCUPOM d on d.det_filial = c.cap_filial
                                 and d.det_data = c.cap_data
                                 and d.det_nr_pdv = c.cap_nr_pdv
                                 and d.det_nr_cupom = c.cap_nr_cupom
            where c.cap_data = p_dia
            AND   CAP_CANCELADO != 'S'
            AND   CAP_TIPO_TRANSACAO IN ('1','5')     
            group by c.cap_data, c.cap_filial, d.det_cod_item
        )    
        inner join gs_mvw_posestq e on e.prod = trunc(sku_id/10)
                                   and e.filial = store_id
        inner join gs_mvw_caditens i on i.prod = TRUNC(SKU_ID/10)
        LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                              and exp.gsku_filial = TRUNC(STORE_ID/10)
        LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = SKU_ID
        --left join gti.tab_sensib_pricing@lksfcoop ss on ss.cod_prod_rms = SKU_ID
        --                                            and ss.loja = STORE_ID
        WHERE STORE_ID not between 6000 and 6999                                            
        AND exp.gsku_descricao is null
        AND i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
        AND CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
        AND i.linha not in ('82','94')
        AND (I.SAILIN = 0 -- TODOS EM LINHA
        OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
        OR e.estqqtd >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
        OR trunc(sysdate)-nvl(e.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
        );
        
        -- SOMENTE PRODUTOS DE REBAIXA DE PRECO VENCIMENTO
        INSERT INTO GS_PRF_SALES   
        select SALES_DATE,
               to_char(rec.RECE_COMPONENTE)               SKU_ID,
                 to_char( case when trunc(STORE_ID/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                           and trunc(STORE_ID/10) <> 84
                           and max(i.dep) = 3
                          then (trunc(STORE_ID/10)+600)*10+dac((trunc(STORE_ID/10)+600)) 
                            else STORE_ID end)        STORE_ID,
                 '01'                                 CURRENCY_ID,
                 '01'                                 ORIGIN_ID,
                 'P'                                  TRAN_TYPE,
                 round(sum(SLS_VAL), 4)                    SLS_VAL,
                 round(sum(SLS_QTY), 4)                                SLS_QTY,
                 0                                                   RTRN_QTY,
                 0                                                   RTRN_VAL,
                 max(to_char(sf.cod_saz))                                 SLS_ST_ATTR_01_ID, 
                 'Coop'                                              CREATE_USER_ID,
                 sysdate                                             CREATE_DATETIME,
                 'Coop'                                              LAST_UPDATE_USER_ID,
                 sysdate                                             LAST_UPDATE_DATETIME,
                 'VENCIMENTO'                                        OFFER_ID
        FROM (
            select rms7to_date(c.cap_data) SALES_DATE,
                   d.det_cod_item*10+dac(d.det_cod_item) SKU_ID,
                   c.cap_filial*10+dac(c.cap_filial)     STORE_ID,
                   sum(nvl(d.det_total, 0))                      SLS_VAL,
                   sum(nvl(d.det_qtde, 0))                       SLS_QTY                   
            from CAPCUPOM c
            inner join DETCUPOM d on d.det_filial = c.cap_filial
                                 and d.det_data = c.cap_data
                                 and d.det_nr_pdv = c.cap_nr_pdv
                                 and d.det_nr_cupom = c.cap_nr_cupom
            where c.cap_data = p_dia
            AND   CAP_CANCELADO != 'S'
            AND   CAP_TIPO_TRANSACAO IN ('1','5')     
            group by c.cap_data, c.cap_filial, d.det_cod_item
        )        
        inner join gs_mvw_posestq e on e.prod = trunc(sku_id/10)
                                   and e.filial = store_id
        inner join gs_mvw_caditens i on i.prod = TRUNC(SKU_ID/10)
        inner join gs_agrupreceita rec on rec.RECE_PRODUTO = i.prod*10+dac(i.prod)    
        LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                              and exp.gsku_filial = TRUNC(STORE_ID/10)
        LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = SKU_ID
        --left join gti.tab_sensib_pricing@lksfcoop ss on ss.cod_prod_rms = SKU_ID
        --                                            and ss.loja = STORE_ID
        WHERE STORE_ID not between 6000 and 6999                                            
        AND exp.gsku_descricao is null
        AND i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
        AND CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 0 -- SOMENTE PRODUTOS DE REBAIXA PRECO VENC
        AND i.linha not in ('82','94')
        AND (I.SAILIN = 0 -- TODOS EM LINHA
        OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
        OR e.estqqtd >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
        OR trunc(sysdate)-nvl(e.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
        )
        group by SALES_DATE, STORE_ID, rec.RECE_COMPONENTE;
    end if;
    commit;
    -- REGISTRA LOG
    MERGE INTO GS_LOG_PROFIMETRICS G
    USING
    (
        SELECT p_dia DIA,
               v_interface INTERFACE,
               'STORE CURRENT SALES' DINTERFACE,
               dateto_rms7(sysdate) dia_envio,
               1 qtd_envio,
               count(*) registros,
               sum(nvl(sls_val,0)) valor
        from gs_prf_sales
     ) A
     ON
     (
           G.DIA = A.DIA
       AND G.INTERFACE = A.INTERFACE
     )
     WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1, g.valor = a.valor, g.dia_envio = a.dia_envio
     WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                           VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
    COMMIT;
    
    v_extracao  := sysdate;
    
    -- REFRESH DA SEQUENCIA
    --select lp.qtd_envio into v_seq
    --from gs_log_profimetrics lp
    --where lp.interface = v_interface
    --and lp.dia_envio = dateto_rms7(sysdate);
    -- ATIVA API
    v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
    -- ENVIA API
    v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
     (SALES_DATE, SKU_ID, STORE_ID, CURRENCY_ID, ORIGIN_ID, TRAN_TYPE, SLS_VAL,  SLS_QTY,
         RTRN_QTY, RTRN_VAL, SLS_ST_ATTR_01_ID,
         CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME, OFFER_ID)
     select SALES_DATE, SKU_ID, STORE_ID, CURRENCY_ID, ORIGIN_ID, TRAN_TYPE, SLS_VAL,  SLS_QTY,
         RTRN_QTY, RTRN_VAL, SLS_ST_ATTR_01_ID,
         CREATE_USER_ID, CREATE_DATETIME, LAST_UPDATE_USER_ID, LAST_UPDATE_DATETIME , OFFER_ID
     from gs_prf_sales';
     
    execute immediate v_query;
    commit; 
    
    p_dia := dateto_rms7(rms7to_date(p_dia)+1);
    
  end loop;
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia = p_dia;
  commit;
exception when others then
    rollback;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);
end ExportaSales;

procedure ExportaBudget(p_dia pls_integer := dateto_rms7(sysdate), p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 1305;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  -- INTERFACE 1305
  -- DINTERFACE COST PRICE STORE
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE gs_prf_budget';
  execute immediate v_query;
  
  -- INCLUI NA TABELA STAGE
  insert into gs_prf_budget(budget_date, merch_level_id, location_id, location_level,origin_id,
         merch_level,sales_budget, profit_budget,discount_budget,generic_metric_1,
         record_status,create_user_id,create_datetime,last_update_user_id,last_update_datetime)
  with filiais as
  (
      select codigo FROM GS_MVW_FILIAIS F
      LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                            and exp.gsku_filial = f.codigo
                            and exp.gsku_grupo > 0
      LEFT JOIN AA1CREGI R ON R.REG_REGIAO = F.REGIAO
                          AND R.REG_DIVISAO = 0
                          AND R.REG_DISTRITO = 0
                          AND R.REG_REGIAO > 0
      where exp.gsku_descricao is null
      AND f.codigo not between 600 and 699
  ), estrutura as
  (
     select distinct i.sec, i.grp from GS_MVW_CADITENS i
     LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
     left join (select prod,
                     sum(e.estqqtd) estq,
                     max(e.dt_ult_fat) ultVenda
                    from gs_mvw_posestq e
                    where e.estqqtd >= 0
                    group by e.prod ) e on e.prod = i.prod  -- VERIFICA ESTOQUE E VENDA
     WHERE i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
     AND i.linha not in ('82','94')
     AND CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
     AND (I.SAILIN = 0 -- TODOS EM LINHA
     OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
     OR nvl(e.estq, 0) >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
     OR trunc(sysdate)-nvl(e.ultVenda, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
     )
  )
  select trunc(next_day(rms7to_date(p_dia)+1, 2) - 7) BUDGET_DATE,
           '1.'||to_char(max(e.departamento), 'fm000')||'.'||to_char((e.secao), 'fm000')||
             '.'||to_char(e.grupo, 'fm000') MERCH_LEVEL_ID,
           to_char( case when f.codigo between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                     and f.codigo <> 84
                     and max(e.departamento) = 3
                    then (f.codigo+600)*10+dac((f.codigo+600)) 
                      else f.codigo*10+dac(f.codigo) end)  LOCATION_ID,  
           'STORE'                            LOCATION_LEVEL,
           '01'                               ORIGIN_ID,
           '4'                                MERCH_LEVEL,
           sum(nvl(m.mta_vda, 0))             SALES_BUDGET,
           sum(nvl(m.mta_mrg, 0))             PROFIT_BUDGET,
           0                                  DISCOUNT_BUDGET,
           null                               GENERIC_METRIC_1,
           'A'                                RECORD_STATUS,
           'Coop'                             CREATE_USER_ID,
           sysdate                            CREATE_DATETIME,
           'Coop'                             LAST_UPDATE_USER_ID,
           sysdate                            LAST_UPDATE_DATETIME
  from gs_mvw_estr_mercadologica e
  inner join filiais f on 1=1
  left join gs_meta_subgrupo m on m.secao = e.secao
                              and m.grupo = e.grupo
                              and m.filial = f.codigo
                              and m.dia between dateto_rms7(next_day(rms7to_date(p_dia)+1, 2) - 7) and dateto_rms7(next_day(rms7to_date(p_dia)+1, 2) - 1)
  where e.departamento > 0
  and e.subgrupo = 0
  and e.categoria = 0
  and (e.secao, e.grupo) in ( select sec, grp from estrutura )
  group by e.secao, e.grupo, f.codigo;

  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT p_dia DIA,
             v_interface INTERFACE,
             'BUDGET' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             sum(PROFIT_BUDGET) valor
      from gs_prf_budget
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (budget_date, merch_level_id, location_id, location_level,origin_id,
         merch_level,sales_budget, profit_budget,discount_budget,generic_metric_1,
         record_status,create_user_id,create_datetime,last_update_user_id,last_update_datetime)
   select budget_date, merch_level_id, location_id, location_level,origin_id,
         merch_level,sales_budget, profit_budget,discount_budget,generic_metric_1,
         record_status,create_user_id,create_datetime,last_update_user_id,last_update_datetime
   from gs_prf_budget';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);
end ExportaBudget;

procedure ExportaItemSuplierStore(p_databatch date := trunc(sysdate)) is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 9014;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  -- INTERFACE 9014
  -- DINTERFACE ITEMSUPPLIERSTORE
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE GS_PRF_ITEM_SUPPLIER_STORE';
  execute immediate v_query;
  -- FORNECEDORES ALTERNATIVOS
    insert into GS_PRF_ITEM_SUPPLIER_STORE
    select /*+DRIVING_SITE(e)*/
         distinct 
         to_char(e.prod*10+DAC(e.prod)) SKU_ID,
         to_char( case when trunc(e.filial/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(e.filial/10) <> 84
                   and f.natureza != 'LV'
                   and i.dep = 3
                  then (trunc(e.filial/10)+600)*10+dac((trunc(e.filial/10)+600)) 
                    else e.filial end)  STORE_ID,
         TO_CHAR(fp.EMPRPRIADM*10+DAC(fp.EMPRPRIADM)) MAIN_SUPPLIER_ID,
         --TO_CHAR(fp.codigo*10+fp.digito) MAIN_SUPPLIER_ID,
         NVL(TO_CHAR(fa.forite_cod_forn*10+dac(fa.forite_cod_forn)), 
             TO_CHAR(i.forn*10+dac(i.forn))) SUPPLIER_ID,
         case when i.sa = 1 and e.filial IN (3000,9016
         ,9067,9164,9229,9237,9539) then 'D'
              when i.sa = 1 then 'W'
              when i.sa = 10 then 'D'
              when i.sa = 11 then 'L'
              when i.sa = 20 then 'D'            
         else 'D'
         end STOCK_CAT,
         'FORN' MAIN_SUPPLIER_RELATION_TYPE,
         8 WH_LEAD_TIME, -- PRAZO DE ENTREGA DO CD
         CASE WHEN i.sa in (10,20) then 'Y' else 'N' end DSD_FLAG,
         null UNIT_COST,
         NULL ROUND_LVL,
         NULL ROUND_TO_INNER_PCT,
         NULL ROUND_TO_CASE_PCT,
         NULL ROUND_TO_LAYER_PCT,
         NULL ROUND_TO_PALLET_PCT,
         NULL TRUCK_SIZE,
         NULL ROUND_TO_TRUCK_PCT,
         NULL VPN,
         'EMB VENDA'  INNER_NAME,
         'CAIXA' CASE_NAME,
         'CAMADA'   LAYER_NAME,
         'PALETE' PALLET_NAME,
         'CAMINHAO' TRUCK_NAME,
         NULL SUPP_DISCONTINUE_DATE,
         NULL DIRECT_SHIP_FLAG,
         NULL CONCESSION_RATE,
         NULL PRIMARY_CASE_SIZE,
         NULL BUY_CASE_MIN,
         case when nvl(fd.afor_dev, 'S') = 'S' then 'Y' else 'N' end RET_ALLOW_IND,
         NULL RET_MIN_AMT,
         NULL RET_MIN_QTY,
         NULL RET_AUTH_REQ,
         'PROPRIO' RET_COURIER,
         NULL BLOCK_REASON ,
         NULL MIN_PURCHASE_LVL,
         NULL MIN_PURCHASE_QTY,
         NULL MIN_PURCHASE_VAL,
         NULL REVIEW_CYCLE,
         'FREQ=DAILY; INTERVAL='||to_char(i.fv)||';' RECEIVING_CYCLE,
         NULL REPLEN_APPROVAL_IND,
         NULL AUTOMATIC_REPOSITION,
         case when e.bloqueio > 0 then 'Y' else 'N' end BLOCKED_FLAG,
         NULL HANDLING_PCT,
         NULL SUPP_PACK_SIZE,
         case 
           when di.det_garantia_tempo > 0 then di.det_garantia_tempo--ADICIONADO HENRIQUE EM 06/10/2021 --INCLUIR PESO REFERENCIA PARA OS ITENS DA CENTRAL FRIGORIFICA
           when i.sa = 1 and e.filial IN (3000,9016,9067,9164,9229,9237,9539) then i.emb
           when i.deposito > 0 and abast.abt_cod_fil > 0 then 1 
           else i.embtrf 
         end INNER_PACK_SIZE,
         NULL DEFAULT_UOP,
         gt.git_base_pallet TI,
         gt.git_altura_pallet HI,
         NULL COST_UOM,
         --case when i.deposito > 0 then to_char(i.deposito)||to_char(dac(i.deposito)) else null end SOURCE_WH_ID, --ALTERADO EM 16/01/2021 HENRIQUE CD ALTERNATIVO DROGARIAS
         case when e.filial = i.deposito*10+dac(i.deposito) then null when i.deposito > 0 and abast.abt_cod_fil is null then to_char(i.deposito)||to_char(dac(i.deposito)) when i.deposito > 0 and abast.abt_cod_fil > 0 then to_char(abast.abt_cod_ent_abast*10+dac(abast.abt_cod_ent_abast)) else null end SOURCE_WH_ID,
         I.Pe SUPPLIER_LEAD_TIME,
         null WH_PROC_TIME,
         /*case when NVL(TO_CHAR(fa.forite_cod_forn*10+dac(fa.forite_cod_forn)), 
             TO_CHAR(i.forn*10+dac(i.forn))) = TO_CHAR(fp.codigo*10+fp.digito) then 'Y' else 'N' end PRIMMARY_SUPPLIER_FLAG,*/
         'N' PRIMMARY_SUPPLIER_FLAG,
         null PACK_TYPE,
         case 
           when di.det_garantia_tempo > 0 then di.det_garantia_tempo--ADICIONADO HENRIQUE EM 06/10/2021 --INCLUIR PESO REFERENCIA PARA OS ITENS DA CENTRAL FRIGORIFICA
           when i.sa = 1 and e.filial IN (3000,9016,9067,9164,9229,9237,9539) then i.emb
           when i.deposito > 0 and abast.abt_cod_fil > 0 then 1 
           else i.embtrf 
         end PACK_QTY,
         --i.embtrf PACK_QTY,
         null PACKAGE_UOM,
         GT.GIT_REFERENCIA SUPP_SKU_ID,
         NULL DEFAULT_DISCOUNT,
         trunc(nvl(cd.pgt_prz_medio, 30)) PAYMENT_DUE_DAYS,
         NULL REC_SUPP_PRICE,
         NULL ITEM_SUPP_ST_ATTR_01_FLAG,
         null ITEM_SUPP_ST_ATTR_02_FLAG,
         null ITEM_SUPP_ST_ATTR_03_FLAG,
         null ITEM_SUPP_ST_ATTR_04_FLAG,
         null ITEM_SUPP_ST_ATTR_05_FLAG,
         null ITEM_SUPP_ST_ATTR_06_FLAG,
         emm.est_min ITEM_SUPP_ST_ATTR_01_NO, -- ESTOQUE MINIMO
         emm.est_max ITEM_SUPP_ST_ATTR_02_NO, -- ESTOQUE MAXIMO
         E.EP ITEM_SUPP_ST_ATTR_03_NO, -- ESTOQUE PADRAO
         null ITEM_SUPP_ST_ATTR_04_NO,
         null ITEM_SUPP_ST_ATTR_05_NO,
         null ITEM_SUPP_ST_ATTR_06_NO,
         to_char(sm.abs_codsim*10+dac(sm.abs_codsim)) ITEM_SUPP_ST_ATTR_01_CHAR, -- PRODUTO SIMILAR
         to_char(trunc(cf.gsc_valornum)*10+dac(cf.gsc_valornum)) ITEM_SUPP_ST_ATTR_02_CHAR, -- FILIAL ESPELHO
         null ITEM_SUPP_ST_ATTR_03_CHAR,
         null ITEM_SUPP_ST_ATTR_04_CHAR,
         null ITEM_SUPP_ST_ATTR_05_CHAR,
         null ITEM_SUPP_ST_ATTR_06_CHAR,
         null ITEM_SUPP_ST_ATTR_01_DATE,
         null ITEM_SUPP_ST_ATTR_02_DATE,
         null ITEM_SUPP_ST_ATTR_03_DATE,
         null ITEM_SUPP_ST_ATTR_04_DATE,
         null ITEM_SUPP_ST_ATTR_05_DATE,
         null ITEM_SUPP_ST_ATTR_06_DATE,
         'A'       RECORD_STATUS,
         'Coop'     CREATE_USER_ID,
         null CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         null  LAST_UPDATE_DATETIME
  from gs_mvw_posestq e
  inner join gs_mvw_caditens i on i.prod = e.prod
  left join AA3CCPGT cd on cd.pgt_codigo = i.condpgto
  inner join aa3citem gt on gt.git_cod_item = e.prod
  left join AA2CAFOR fd on fd.afor_codigo = i.forn
  inner join gs_mvw_filiais f on f.codigo = trunc(e.filial/10) -- ESSE JOIN REMOVE FILIAIS 401, 403 E 405 QUE EST?O NA POS ESTQ
  LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and exp.gsku_filial = trunc(e.filial/10)
  LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
  /*left join gti.tab_sensib_pricing@lksfcoop sd on sd.cod_prod_rms = e.prod*10+dac(e.prod)
                                              and sd.loja = 999
  left join gti.tab_sensib_pricing@lksfcoop ss on ss.cod_prod_rms = e.prod*10+dac(e.prod)
                                              and ss.loja = e.filial*/
  left join gti.tab_est_min_max@lksfcoop emm on emm.cod_prod_rms = e.prod*10+dac(e.prod)
                                            and emm.loja = e.filial
  left join ( SELECT MAX(PRE_DAT_INICIO) dt_ini, p.pre_loja, p.pre_nivel, p.pre_cod_item, p.pre_tipo
            FROM AA2CPREC p
            WHERE PRE_LOJA      = 1
            AND PRE_NIVEL       = 1
            AND PRE_TIPO        = 'M'
            AND PRE_DAT_INICIO <= dateto_rms7(sysdate) AND (PRE_DAT_FIM = 0 OR PRE_DAT_FIM >= dateto_rms7(sysdate))
            AND PRE_CUSTO       = 0
            group by p.pre_loja, p.pre_nivel, p.pre_cod_item, p.pre_tipo
         ) mp on  mp.pre_cod_item = i.prod         
  left join aa2cprec p on p.pre_loja = mp.pre_loja
                      and p.pre_tipo = mp.pre_tipo
                      and p.pre_cod_item = mp.pre_cod_item
                      and p.pre_dat_inicio = mp.dt_ini
                      and p.pre_nivel = mp.pre_nivel
  left join ag1cdabs sm on sm.abs_tipo = 'S'
                       AND sm.abs_codigo = e.prod
  left join gs_caracfilial cf on cf.gsc_filial = trunc(e.filial/10)
                             and cf.gsc_codigo = 'FILIALESP'
  inner join AA1FORIT fa on fa.forite_cod_item = i.prod
                         and fa.forite_cod_forn != i.forn
  inner join gs_mvw_tipos fo on fo.codigo = i.forn
  inner join gs_mvw_tipos fp on fp.codigo = fo.emprpriadm
  inner join gs_mvw_tipos fta on fta.codigo = fa.forite_cod_forn
  left join ag1abast abast
  on trunc(e.filial/10) = abast.abt_cod_fil
  LEFT JOIN AA1DITEM DI
    ON E.PROD = DI.DET_COD_ITEM --ADICIONADO HENRIQUE EM 06/10/2021 --INCLUIR PESO REFERENCIA PARA OS ITENS DA CENTRAL FRIGORIFICA
  where exp.gsku_descricao is null
  and CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
  and fta.tipofilial not in ('L','D')
  and e.filial not between 6000 and 6999  
  and e.filial not between 4000 and 4999 --Excluir drogarias parceiras  
  and e.filial not in (868,876,884,892,906,914,922)--pick up store perimetral 
  and i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
  AND i.linha not in ('82','94')
  AND ((I.SAILIN = 0 -- TODOS EM LINHA
  OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
  OR nvl(e.estqqtd, 0) >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
  OR trunc(sysdate)-nvl(e.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
  )
  OR i.prod in (/*select distinct sm.abs_codsim from ag1cdabs sm where sm.abs_tipo = 'S'*/
                select distinct sm.abs_codsim
                  from ag1cdabs sm
                  left join aa3citem a
                    on sm.abs_codsim = a.git_cod_item
                 where sm.abs_tipo = 'S'
                   and a.git_linha not in ('82', '94'))) -- PRODUTO SIMILAR SEMPRE ENVIA
  ;--OR trunc(sysdate)-rmsto_date(i.ultent) < 365); -- SOMENTE SE A ULTIMA COMPRA FOI NO ULTIMO ANO;

  -- FORNECEDOR NORMAL
  insert into GS_PRF_ITEM_SUPPLIER_STORE
    select /*+DRIVING_SITE(e)*/
         distinct 
         to_char(e.prod*10+DAC(e.prod)) SKU_ID,
         to_char( case when trunc(e.filial/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(e.filial/10) <> 84
                   and f.natureza != 'LV'
                   and i.dep = 3
                  then (trunc(e.filial/10)+600)*10+dac((trunc(e.filial/10)+600)) 
                    else e.filial end)  STORE_ID,
         TO_CHAR(fp.EMPRPRIADM*10+DAC(fp.EMPRPRIADM)) MAIN_SUPPLIER_ID,
         --TO_CHAR(fp.codigo*10+fp.digito) MAIN_SUPPLIER_ID,
         TO_CHAR(i.forn*10+dac(i.forn)) SUPPLIER_ID,
         case when i.sa = 1 and e.filial IN (3000,9016,9067,9164,9229,9237,9539) then 'D'
              when i.sa = 1 then 'W'
              when i.sa = 10 then 'D'
              when i.sa = 11 then 'L'
              when i.sa = 20 then 'D'            
         else 'D'
         end STOCK_CAT,
         'FORN' MAIN_SUPPLIER_RELATION_TYPE,
         8 WH_LEAD_TIME, -- PRAZO DE ENTREGA DO CD
         CASE WHEN i.sa in (10,20) then 'Y' else 'N' end DSD_FLAG,
         null UNIT_COST,
         NULL ROUND_LVL,
         NULL ROUND_TO_INNER_PCT,
         NULL ROUND_TO_CASE_PCT,
         NULL ROUND_TO_LAYER_PCT,
         NULL ROUND_TO_PALLET_PCT,
         NULL TRUCK_SIZE,
         NULL ROUND_TO_TRUCK_PCT,
         NULL VPN,
         'EMB VENDA'  INNER_NAME,
         'CAIXA' CASE_NAME,
         'CAMADA'   LAYER_NAME,
         'PALETE' PALLET_NAME,
         'CAMINHAO' TRUCK_NAME,
         NULL SUPP_DISCONTINUE_DATE,
         NULL DIRECT_SHIP_FLAG,
         NULL CONCESSION_RATE,
         NULL PRIMARY_CASE_SIZE,
         NULL BUY_CASE_MIN,
         case when nvl(fd.afor_dev, 'S') = 'S' then 'Y' else 'N' end RET_ALLOW_IND,
         NULL RET_MIN_AMT,
         NULL RET_MIN_QTY,
         NULL RET_AUTH_REQ,
         'PROPRIO' RET_COURIER,
         NULL BLOCK_REASON ,
         NULL MIN_PURCHASE_LVL,
         NULL MIN_PURCHASE_QTY,
         NULL MIN_PURCHASE_VAL,
         NULL REVIEW_CYCLE,
         'FREQ=DAILY; INTERVAL='||to_char(i.fv)||';' RECEIVING_CYCLE,
         NULL REPLEN_APPROVAL_IND,
         NULL AUTOMATIC_REPOSITION,
         case when e.bloqueio > 0 then 'Y' else 'N' end BLOCKED_FLAG,
         NULL HANDLING_PCT,
         NULL SUPP_PACK_SIZE,
         case 
           when di.det_garantia_tempo > 0 then di.det_garantia_tempo--ADICIONADO HENRIQUE EM 06/10/2021 --INCLUIR PESO REFERENCIA PARA OS ITENS DA CENTRAL FRIGORIFICA
           when i.sa = 1 and e.filial IN (3000,9016,9067,9164,9229,9237,9539) then i.emb
           when i.deposito > 0 and abast.abt_cod_fil > 0 then 1 
           else i.embtrf 
         end INNER_PACK_SIZE,
         NULL DEFAULT_UOP,
         gt.git_base_pallet TI,
         gt.git_altura_pallet HI,
         NULL COST_UOM,
         --case when i.deposito > 0 then to_char(i.deposito)||to_char(dac(i.deposito)) else null end SOURCE_WH_ID, --ALTERADO 16/01/2021 HENRIQUE CD ALTERNATIVO DROGARIAS
         case when e.filial = i.deposito*10+dac(i.deposito) then null when i.deposito > 0 and abast.abt_cod_fil is null then to_char(i.deposito)||to_char(dac(i.deposito)) when i.deposito > 0 and abast.abt_cod_fil > 0 then to_char(abast.abt_cod_ent_abast*10+dac(abast.abt_cod_ent_abast)) else null end SOURCE_WH_ID,
         I.Pe SUPPLIER_LEAD_TIME,
         null WH_PROC_TIME,
         /*case when TO_CHAR(i.forn*10+dac(i.forn)) = TO_CHAR(fp.codigo*10+fp.digito) then 'Y' else 'N' end PRIMMARY_SUPPLIER_FLAG,*/
         'Y' PRIMARY_SUPPLIER_FLAG,
         null PACK_TYPE,
         case
           when di.det_garantia_tempo > 0 then di.det_garantia_tempo--ADICIONADO HENRIQUE EM 06/10/2021 --INCLUIR PESO REFERENCIA PARA OS ITENS DA CENTRAL FRIGORIFICA 
           when i.sa = 1 and e.filial IN (3000,9016,9067,9164,9229,9237,9539) then i.emb
           when i.deposito > 0 and abast.abt_cod_fil > 0 then 1 
           else i.embtrf 
         end PACK_QTY,
         --i.embtrf PACK_QTY,
         null PACKAGE_UOM,
         GT.GIT_REFERENCIA SUPP_SKU_ID,
         NULL DEFAULT_DISCOUNT,
         trunc(nvl(cd.pgt_prz_medio, 30)) PAYMENT_DUE_DAYS,
         NULL REC_SUPP_PRICE,
         NULL ITEM_SUPP_ST_ATTR_01_FLAG,
         null ITEM_SUPP_ST_ATTR_02_FLAG,
         null ITEM_SUPP_ST_ATTR_03_FLAG,
         null ITEM_SUPP_ST_ATTR_04_FLAG,
         null ITEM_SUPP_ST_ATTR_05_FLAG,
         null ITEM_SUPP_ST_ATTR_06_FLAG,
         emm.est_min ITEM_SUPP_ST_ATTR_01_NO, -- ESTOQUE MINIMO
         emm.est_max ITEM_SUPP_ST_ATTR_02_NO, -- ESTOQUE MAXIMO
         E.EP ITEM_SUPP_ST_ATTR_03_NO, -- ESTOQUE PADRAO
         null ITEM_SUPP_ST_ATTR_04_NO,
         null ITEM_SUPP_ST_ATTR_05_NO,
         null ITEM_SUPP_ST_ATTR_06_NO,
         to_char(sm.abs_codsim*10+dac(sm.abs_codsim)) ITEM_SUPP_ST_ATTR_01_CHAR, -- PRODUTO SIMILAR
         to_char(trunc(cf.gsc_valornum)*10+dac(cf.gsc_valornum)) ITEM_SUPP_ST_ATTR_02_CHAR, -- FILIAL ESPELHO
         null ITEM_SUPP_ST_ATTR_03_CHAR,
         null ITEM_SUPP_ST_ATTR_04_CHAR,
         null ITEM_SUPP_ST_ATTR_05_CHAR,
         null ITEM_SUPP_ST_ATTR_06_CHAR,
         null ITEM_SUPP_ST_ATTR_01_DATE,
         null ITEM_SUPP_ST_ATTR_02_DATE,
         null ITEM_SUPP_ST_ATTR_03_DATE,
         null ITEM_SUPP_ST_ATTR_04_DATE,
         null ITEM_SUPP_ST_ATTR_05_DATE,
         null ITEM_SUPP_ST_ATTR_06_DATE,
         'A'       RECORD_STATUS,
         'Coop'     CREATE_USER_ID,
         null CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         null  LAST_UPDATE_DATETIME
  from gs_mvw_posestq e
  inner join gs_mvw_caditens i on i.prod = e.prod
  left join AA3CCPGT cd on cd.pgt_codigo = i.condpgto
  inner join aa3citem gt on gt.git_cod_item = e.prod
  left join AA2CAFOR fd on fd.afor_codigo = i.forn
  inner join gs_mvw_filiais f on f.codigo = trunc(e.filial/10) -- ESSE JOIN REMOVE FILIAIS 401, 403 E 405 QUE EST?O NA POS ESTQ
  LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and exp.gsku_filial = trunc(e.filial/10)
  LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
  /*left join gti.tab_sensib_pricing@lksfcoop sd on sd.cod_prod_rms = e.prod*10+dac(e.prod)
                                              and sd.loja = 999
  left join gti.tab_sensib_pricing@lksfcoop ss on ss.cod_prod_rms = e.prod*10+dac(e.prod)
                                              and ss.loja = e.filial*/
  left join gti.tab_est_min_max@lksfcoop emm on emm.cod_prod_rms = e.prod*10+dac(e.prod)
                                            and emm.loja = e.filial
  left join ( SELECT MAX(PRE_DAT_INICIO) dt_ini, p.pre_loja, p.pre_nivel, p.pre_cod_item, p.pre_tipo
            FROM AA2CPREC p
            WHERE PRE_LOJA      = 1
            AND PRE_NIVEL       = 1
            AND PRE_TIPO        = 'M'
            AND PRE_DAT_INICIO <= dateto_rms7(sysdate) AND (PRE_DAT_FIM = 0 OR PRE_DAT_FIM >= dateto_rms7(sysdate))
            AND PRE_CUSTO       = 0
            group by p.pre_loja, p.pre_nivel, p.pre_cod_item, p.pre_tipo
         ) mp on  mp.pre_cod_item = i.prod         
  left join aa2cprec p on p.pre_loja = mp.pre_loja
                      and p.pre_tipo = mp.pre_tipo
                      and p.pre_cod_item = mp.pre_cod_item
                      and p.pre_dat_inicio = mp.dt_ini
                      and p.pre_nivel = mp.pre_nivel
  left join ag1cdabs sm on sm.abs_tipo = 'S'
                       AND sm.abs_codigo = e.prod
  left join gs_caracfilial cf on cf.gsc_filial = trunc(e.filial/10)
                             and cf.gsc_codigo = 'FILIALESP'
  inner join gs_mvw_tipos fo on fo.codigo = i.forn
  inner join gs_mvw_tipos fp on fp.codigo = fo.emprpriadm
  left join ag1abast abast
  on trunc(e.filial/10) = abast.abt_cod_fil
  LEFT JOIN AA1DITEM DI
    ON E.PROD = DI.DET_COD_ITEM --ADICIONADO HENRIQUE EM 06/10/2021 --INCLUIR PESO REFERENCIA PARA OS ITENS DA CENTRAL FRIGORIFICA
  where exp.gsku_descricao is null
  and CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
  and e.filial not between 6000 and 6999                                  --and e.filial = 78 and i.prod = 6850 --QUANDO CORRIGIRMOS, TIRAR ESSAS DUAS CONDICOES (FILIAL E PRODUTO)
  and e.filial not between 4000 and 4999 --Excluir drogarias parceiras  
  and e.filial not in (868)--pick up store perimetral 
  AND i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
  AND i.linha not in ('82','94')
  AND ((I.SAILIN = 0 -- TODOS EM LINHA
  OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
  OR nvl(e.estqqtd, 0) >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
  OR trunc(sysdate)-nvl(e.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
  )
  OR i.prod in (/*select distinct sm.abs_codsim from ag1cdabs sm where sm.abs_tipo = 'S'*/
  select distinct sm.abs_codsim
                  from ag1cdabs sm
                  left join aa3citem a
                    on sm.abs_codsim = a.git_cod_item
                 where sm.abs_tipo = 'S'
                   and a.git_linha not in ('82', '94')
  )) -- PRODUTO SIMILAR SEMPRE ENVIA
  ;
  
/*  insert into GS_PRF_ITEM_SUPPLIER_STORE
  SELECT SKU_ID	,
         STORE_ID	,
         MAIN_SUPPLIER_ID	,
         SUPPLIER_ID	,
         STOCK_CAT	,
         MAIN_SUPPLIER_RELATION_TYPE	,
         WH_LEAD_TIME	,
         DSD_FLAG	,
         UNIT_COST	,
         ROUND_LVL	,
         ROUND_TO_INNER_PCT	,
         ROUND_TO_CASE_PCT	,
         ROUND_TO_LAYER_PCT	,
         ROUND_TO_PALLET_PCT	,
         TRUCK_SIZE	,
         ROUND_TO_TRUCK_PCT	,
         VPN	,
         INNER_NAME	,
         CASE_NAME	,
         LAYER_NAME	,
         PALLET_NAME	,
         TRUCK_NAME	,
         SUPP_DISCONTINUE_DATE	,
         DIRECT_SHIP_FLAG	,
         CONCESSION_RATE	,
         PRIMARY_CASE_SIZE	,
         BUY_CASE_MIN	,
         RET_ALLOW_IND	,
         RET_MIN_AMT	,
         RET_MIN_QTY	,
         RET_AUTH_REQ	,
         RET_COURIER	,
         BLOCK_REASON	,
         MIN_PURCHASE_LVL	,
         MIN_PURCHASE_QTY	,
         MIN_PURCHASE_VAL	,
         REVIEW_CYCLE	,
         RECEIVING_CYCLE	,
         REPLEN_APPROVAL_IND	,
         AUTOMATIC_REPOSITION	,
         BLOCKED_FLAG	,
         HANDLING_PCT	,
         SUPP_PACK_SIZE	,
         INNER_PACK_SIZE	,
         DEFAULT_UOP	,
         TI	,
         HI	,
         COST_UOM	,
         SOURCE_WH_ID	,
         SUPPLIER_LEAD_TIME	,
         WH_PROC_TIME	,
         PRIMMARY_SUPPLIER_FLAG	,
         PACK_TYPE	,
         PACK_QTY	,
         PACKAGE_UOM	,
         SUPP_SKU_ID	,
         DEFAULT_DISCOUNT	,
         PAYMENT_DUE_DAYS	,
         REC_SUPP_PRICE	,
         ITEM_SUPP_ST_ATTR_01_FLAG	,
         ITEM_SUPP_ST_ATTR_02_FLAG	,
         ITEM_SUPP_ST_ATTR_03_FLAG	,
         ITEM_SUPP_ST_ATTR_04_FLAG	,
         ITEM_SUPP_ST_ATTR_05_FLAG	,
         ITEM_SUPP_ST_ATTR_06_FLAG	,
         ITEM_SUPP_ST_ATTR_01_NO	,
         ITEM_SUPP_ST_ATTR_02_NO	,
         ITEM_SUPP_ST_ATTR_03_NO	,
         ITEM_SUPP_ST_ATTR_04_NO	,
         ITEM_SUPP_ST_ATTR_05_NO	,
         ITEM_SUPP_ST_ATTR_06_NO	,
         ITEM_SUPP_ST_ATTR_01_CHAR	,
         ITEM_SUPP_ST_ATTR_02_CHAR	,
         ITEM_SUPP_ST_ATTR_03_CHAR	,
         ITEM_SUPP_ST_ATTR_04_CHAR	,
         ITEM_SUPP_ST_ATTR_05_CHAR	,
         ITEM_SUPP_ST_ATTR_06_CHAR	,
         ITEM_SUPP_ST_ATTR_01_DATE	,
         ITEM_SUPP_ST_ATTR_02_DATE	,
         ITEM_SUPP_ST_ATTR_03_DATE	,
         ITEM_SUPP_ST_ATTR_04_DATE	,
         ITEM_SUPP_ST_ATTR_05_DATE	,
         ITEM_SUPP_ST_ATTR_06_DATE	,
         RECORD_STATUS	,
         CREATE_USER_ID	,
         CREATE_DATETIME	,
         LAST_UPDATE_USER_ID	,
         LAST_UPDATE_DATETIME
    FROM STO_9014_2021062301@LK_PROFIMETRICS;*/
  

  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'ITEMSUPPLIERSTORE' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from GS_PRF_ITEM_SUPPLIER_STORE
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- pck_interface_api_hml.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS
   (SKU_ID,STORE_ID,MAIN_SUPPLIER_ID,SUPPLIER_ID,STOCK_CAT,MAIN_SUPPLIER_RELATION_TYPE,
   WH_LEAD_TIME,DSD_FLAG,UNIT_COST,ROUND_LVL,ROUND_TO_INNER_PCT,ROUND_TO_CASE_PCT,
   ROUND_TO_LAYER_PCT,ROUND_TO_PALLET_PCT,TRUCK_SIZE,ROUND_TO_TRUCK_PCT,VPN,
   INNER_NAME,CASE_NAME,LAYER_NAME,PALLET_NAME,TRUCK_NAME,SUPP_DISCONTINUE_DATE,
   DIRECT_SHIP_FLAG,CONCESSION_RATE,PRIMARY_CASE_SIZE,BUY_CASE_MIN,RET_ALLOW_IND,
   RET_MIN_AMT,RET_MIN_QTY,RET_AUTH_REQ,RET_COURIER,BLOCK_REASON,MIN_PURCHASE_LVL,
   MIN_PURCHASE_QTY,MIN_PURCHASE_VAL,REVIEW_CYCLE,RECEIVING_CYCLE,REPLEN_APPROVAL_IND,
   AUTOMATIC_REPOSITION,BLOCKED_FLAG,HANDLING_PCT,SUPP_PACK_SIZE,INNER_PACK_SIZE,
   DEFAULT_UOP,TI,HI,COST_UOM,SOURCE_WH_ID,SUPPLIER_LEAD_TIME,WH_PROC_TIME,PRIMMARY_SUPPLIER_FLAG,
   PACK_TYPE,PACK_QTY,PACKAGE_UOM,SUPP_SKU_ID,DEFAULT_DISCOUNT,PAYMENT_DUE_DAYS,REC_SUPP_PRICE,
   ITEM_SUPP_ST_ATTR_01_FLAG,ITEM_SUPP_ST_ATTR_02_FLAG,ITEM_SUPP_ST_ATTR_03_FLAG,ITEM_SUPP_ST_ATTR_04_FLAG,
   ITEM_SUPP_ST_ATTR_05_FLAG,ITEM_SUPP_ST_ATTR_06_FLAG,ITEM_SUPP_ST_ATTR_01_NO,ITEM_SUPP_ST_ATTR_02_NO,
   ITEM_SUPP_ST_ATTR_03_NO,ITEM_SUPP_ST_ATTR_04_NO,ITEM_SUPP_ST_ATTR_05_NO,ITEM_SUPP_ST_ATTR_06_NO,
   ITEM_SUPP_ST_ATTR_01_CHAR,ITEM_SUPP_ST_ATTR_02_CHAR,ITEM_SUPP_ST_ATTR_03_CHAR,ITEM_SUPP_ST_ATTR_04_CHAR,
   ITEM_SUPP_ST_ATTR_05_CHAR,ITEM_SUPP_ST_ATTR_06_CHAR,ITEM_SUPP_ST_ATTR_01_DATE,ITEM_SUPP_ST_ATTR_02_DATE,
   ITEM_SUPP_ST_ATTR_03_DATE,ITEM_SUPP_ST_ATTR_04_DATE,ITEM_SUPP_ST_ATTR_05_DATE,ITEM_SUPP_ST_ATTR_06_DATE,
   RECORD_STATUS,CREATE_USER_ID,CREATE_DATETIME,LAST_UPDATE_USER_ID,LAST_UPDATE_DATETIME)
   select
   SKU_ID,STORE_ID,MAIN_SUPPLIER_ID,SUPPLIER_ID,STOCK_CAT,MAIN_SUPPLIER_RELATION_TYPE,
   WH_LEAD_TIME,DSD_FLAG,UNIT_COST,ROUND_LVL,ROUND_TO_INNER_PCT,ROUND_TO_CASE_PCT,
   ROUND_TO_LAYER_PCT,ROUND_TO_PALLET_PCT,TRUCK_SIZE,ROUND_TO_TRUCK_PCT,VPN,
   INNER_NAME,CASE_NAME,LAYER_NAME,PALLET_NAME,TRUCK_NAME,SUPP_DISCONTINUE_DATE,
   DIRECT_SHIP_FLAG,CONCESSION_RATE,PRIMARY_CASE_SIZE,BUY_CASE_MIN,RET_ALLOW_IND,
   RET_MIN_AMT,RET_MIN_QTY,RET_AUTH_REQ,RET_COURIER,BLOCK_REASON,MIN_PURCHASE_LVL,
   MIN_PURCHASE_QTY,MIN_PURCHASE_VAL,REVIEW_CYCLE,RECEIVING_CYCLE,REPLEN_APPROVAL_IND,
   AUTOMATIC_REPOSITION,BLOCKED_FLAG,HANDLING_PCT,SUPP_PACK_SIZE,INNER_PACK_SIZE,
   DEFAULT_UOP,TI,HI,COST_UOM,SOURCE_WH_ID,SUPPLIER_LEAD_TIME,WH_PROC_TIME,PRIMMARY_SUPPLIER_FLAG,
   PACK_TYPE,PACK_QTY,PACKAGE_UOM,SUPP_SKU_ID,DEFAULT_DISCOUNT,PAYMENT_DUE_DAYS,REC_SUPP_PRICE,
   ITEM_SUPP_ST_ATTR_01_FLAG,ITEM_SUPP_ST_ATTR_02_FLAG,ITEM_SUPP_ST_ATTR_03_FLAG,ITEM_SUPP_ST_ATTR_04_FLAG,
   ITEM_SUPP_ST_ATTR_05_FLAG,ITEM_SUPP_ST_ATTR_06_FLAG,ITEM_SUPP_ST_ATTR_01_NO,ITEM_SUPP_ST_ATTR_02_NO,
   ITEM_SUPP_ST_ATTR_03_NO,ITEM_SUPP_ST_ATTR_04_NO,ITEM_SUPP_ST_ATTR_05_NO,ITEM_SUPP_ST_ATTR_06_NO,
   ITEM_SUPP_ST_ATTR_01_CHAR,ITEM_SUPP_ST_ATTR_02_CHAR,ITEM_SUPP_ST_ATTR_03_CHAR,ITEM_SUPP_ST_ATTR_04_CHAR,
   ITEM_SUPP_ST_ATTR_05_CHAR,ITEM_SUPP_ST_ATTR_06_CHAR,ITEM_SUPP_ST_ATTR_01_DATE,ITEM_SUPP_ST_ATTR_02_DATE,
   ITEM_SUPP_ST_ATTR_03_DATE,ITEM_SUPP_ST_ATTR_04_DATE,ITEM_SUPP_ST_ATTR_05_DATE,ITEM_SUPP_ST_ATTR_06_DATE,
   RECORD_STATUS,CREATE_USER_ID,CREATE_DATETIME,LAST_UPDATE_USER_ID,LAST_UPDATE_DATETIME
   from GS_PRF_ITEM_SUPPLIER_STORE';--VW_GS_PRF_ITEM_SUPPLIER_STORE 

  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --pck_interface_api_hml.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update GS_LOG_PROFIMETRICS lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
end ExportaItemSuplierStore;

procedure ExportaPurchaseOrder(p_databatch date := trunc(sysdate)) is
  v_destino varchar2(500);
  v_query varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino   date;
begin
  v_inicio    := sysdate;
  v_interface := 9016;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  
  -- INTERFACE 9016
  -- DINTERFACE PURCHASE ORDER
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE GS_PRF_PURCHASE_ORDER';
  execute immediate v_query;
  
  insert into GS_PRF_PURCHASE_ORDER
  select distinct
         to_char(p.pedido)||'_'||to_char( case when trunc(p.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(p.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(p.destino/10)+600)*10+dac((trunc(p.destino/10)+600)) 
                    else p.destino end)||'_'||to_char(p.origem) PURCHASE_ORDER_ID,
         to_char(p.pedido)||'_'||to_char( case when trunc(p.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(p.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(p.destino/10)+600)*10+dac((trunc(p.destino/10)+600)) 
                    else p.destino end)||'_'||to_char(p.origem) PURCHASE_ORDER_DESC,
         to_char(p.pedido)||'_'||to_char( case when trunc(p.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(p.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(p.destino/10)+600)*10+dac((trunc(p.destino/10)+600)) 
                    else p.destino end)||'_'||to_char(p.origem) EXT_PURCHASE_ORDER_ID,
         to_char( case when trunc(p.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(p.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(p.destino/10)+600)*10+dac((trunc(p.destino/10)+600)) 
                    else p.destino end)  STORE_ID,
         --to_char(p.destino) STORE_ID,
         rms7to_date(p.Dia_Ini)-rms7to_date(p.dtaemi_car) SUPP_LEAD_TIME,
         'TED' PAYMENT_TYPE,
         RMS7TO_DATE(p.dia_ini) SCHEDULED_DEL_DATE,
         trunc(c.pgt_prz_medio) PAYMENT_DUE_DAYS,
         '0' PAYMENT_EXCHANGE_RATE,
         to_char(p.origem) supplier_id,
         null ORDER_ATTR_02_NO,
         null ORDER_ATTR_08_NO,
         null ORDER_ATTR_09_NO,
         null ORDER_ATTR_02_FLAG,
         null ORDER_ATTR_04_CHAR,
         null ORDER_ATTR_05_CHAR,
         null ORDER_ATTR_06_CHAR,
         'RMS' APPROVE_USER_ID,
         rms7to_date(p.dtaemi_car) APPROVE_DATE,
         'A' AS ORDER_STATUS
  from pedidos_abertos_carteira p
  inner join gs_mvw_caditens i on i.prod = trunc(p.cod_prod/10)
  inner join GS_PRF_ITEM pi on pi.sku_id = to_char(p.cod_prod)
  inner join gs_mvw_tipos f on f.codigo = trunc(p.origem/10)
  inner join AA3CCPGT c on c.pgt_codigo = p.cond_pagto
  inner join gs_mvw_filiais fl on fl.codigo = trunc(p.destino/10)
  LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expd.gsku_filial = trunc(p.destino/10)
  where foto = dateto_rms7(/*sysdate*/p_databatch)
  and f.tipofilial = 'F'
  AND expd.gsku_descricao is null
  and p.origem not in (
    37923,
    37958,
    37966,
    506958,
    37931,
    518018,
    601942,
    630306,
    672980
  )
  and p.dtaemi_car >= dateto_rms7(p_databatch-30) --1210605 
  group by p.pedido, p.destino, p.dia_ini, p.dtaemi_car, c.pgt_prz_medio, p.origem, case when i.dep = 3 then 1 else 0 end;

  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'PURCHASEORDER' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from GS_PRF_PURCHASE_ORDER
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- pck_interface_api_hml.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS
   (PURCHASE_ORDER_ID,  PURCHASE_ORDER_DESC,  EXT_PURCHASE_ORDER_ID,  STORE_ID,
   SUPP_LEAD_TIME,  PAYMENT_TYPE,  SCHEDULED_DEL_DATE,  PAYMENT_DUE_DAYS,  PAYMENT_EXCHANGE_RATE,
   SUPPLIER_ID, ORDER_ATTR_02_NO,  ORDER_ATTR_08_NO,  ORDER_ATTR_09_NO,  ORDER_ATTR_02_FLAG,
   ORDER_ATTR_04_CHAR,  ORDER_ATTR_05_CHAR,  ORDER_ATTR_06_CHAR,   APPROVE_USER_ID, APPROVE_DATETIME,ORDER_STATUS)
   select PURCHASE_ORDER_ID,  PURCHASE_ORDER_DESC,  EXT_PURCHASE_ORDER_ID,  STORE_ID,
   SUPP_LEAD_TIME,  PAYMENT_TYPE,  SCHEDULED_DEL_DATE,  PAYMENT_DUE_DAYS,  PAYMENT_EXCHANGE_RATE,
   SUPPLIER_ID, ORDER_ATTR_02_NO,  ORDER_ATTR_08_NO,  ORDER_ATTR_09_NO,  ORDER_ATTR_02_FLAG,
   ORDER_ATTR_04_CHAR,  ORDER_ATTR_05_CHAR,  ORDER_ATTR_06_CHAR,  APPROVE_USER_ID, APPROVE_DATETIME,ORDER_STATUS
   from GS_PRF_PURCHASE_ORDER';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --pck_interface_api_hml.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update GS_LOG_PROFIMETRICS lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface));   
end ExportaPurchaseOrder;

procedure ExportaPurchaseOrderFechada(p_databatch date := trunc(sysdate)) is
  v_destino varchar2(500);
  v_query varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino   date;
begin
  v_inicio    := sysdate;
  v_interface := 9016;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  
  -- INTERFACE 9016
  -- DINTERFACE PURCHASE ORDER
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE GS_PRF_PURCHASE_ORDER';
  execute immediate v_query;
  
  --Cria a base das capas disponiveis no momento --Henrique
  v_query := 'TRUNCATE TABLE GS_PRF_PURCHASE_ORDER_CAPA'; 
  execute immediate v_query;
  
  insert into GS_PRF_PURCHASE_ORDER_CAPA  
  select distinct
         to_char(c.nroped_carf * 10 + c.digped_carf) AS PEDIDO,
         to_char(c.cloj_carf   * 10 + c.dloj_carf  ) AS DESTINO,
         to_char(c.codfor_carf * 10 + dac(c.codfor_carf)) AS ORIGEM         
        from ag1flped C
  inner join ag1fdped I ON i.codloj_detf = c.cloj_carf
                       and i.nroped_detf = c.nroped_carf
                       and i.digped_detf = c.digped_carf
                       and i.for_detf = c.codfor_carf
  inner join gs_mvw_tipos dst on dst.codigo = c.cloj_carf
  inner join gs_mvw_tipos ori on ori.codigo = c.codfor_carf
  inner join gs_mvw_caditens it on it.prod = i.itm_detf
  inner join GS_PRF_ITEM pi on pi.sku_id = to_char(i.itm_detf*10+i.dig_detf)
  inner join AA3CCPGT c on c.pgt_codigo = c.cond_pag_carf
  LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                      and expd.gsku_filial = c.cloj_carf
  where dst.tipofilial in ('L', 'D')
  and ori.tipofilial not in ('L', 'D')
  and expd.gsku_descricao is null
  and rmsto_date(c.dtaemi_carf) >= rms7to_date(1201001)
  and rmsto_date(c.dtaemi_carf) <= rms7to_date(1201108)
  and i.qtdped_detf > 0
  and c.codfor_carf not in (
    3792,
    3795,
    3796,
    50695,
    3793,
    51801,
    60194,
    63030,
    67298
  )
  group by c.nroped_carf, c.digped_carf, c.cloj_carf, c.dloj_carf, c.codfor_carf;
  ---------------------------------------------------------
  
  insert into GS_PRF_PURCHASE_ORDER  
  select distinct
         to_char(c.nroped_carf*10+max(c.digped_carf))||'_'||to_char( case when c.cloj_carf between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(p.destino/10) <> 84
                   and max(dst.natureza) != 'LV'
                   and max(it.dep) = 3
                  then ((c.cloj_carf+600)*10+dac(c.cloj_carf+600) )
                    else c.cloj_carf*10+max(c.dloj_carf) end)||'_'||to_char(c.codfor_carf*10+dac(c.codfor_carf)) PURCHASE_ORDER_ID,
         to_char(c.nroped_carf*10+max(c.digped_carf))||'_'||to_char( case when c.cloj_carf between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(p.destino/10) <> 84
                   and max(dst.natureza) != 'LV'
                   and max(it.dep) = 3
                  then ((c.cloj_carf+600)*10+dac(c.cloj_carf+600)) 
                    else c.cloj_carf*10+max(c.dloj_carf) end)||'_'||to_char(c.codfor_carf*10+dac(c.codfor_carf)) PURCHASE_ORDER_DESC,
         to_char(c.nroped_carf*10+max(c.digped_carf))||'_'||to_char( case when c.cloj_carf between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(p.destino/10) <> 84
                   and max(dst.natureza) != 'LV'
                   and max(it.dep) = 3
                  then ((c.cloj_carf+600)*10+dac(c.cloj_carf+600)) 
                    else c.cloj_carf*10+max(c.dloj_carf) end)||'_'||to_char(c.codfor_carf*10+dac(c.codfor_carf)) EXT_PURCHASE_ORDER_ID,
         to_char( case when c.cloj_carf between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(p.destino/10) <> 84
                   and max(dst.natureza) != 'LV'
                   and max(it.dep) = 3
                  then ((c.cloj_carf+600)*10+dac(c.cloj_carf+600)) 
                    else c.cloj_carf*10+max(c.dloj_carf) end)  STORE_ID,
         --to_char(p.destino) STORE_ID,
         --rmsto_date(c.dtaini_carf)-rmsto_date(c.dtaemi_carf) SUPP_LEAD_TIME,
         CASE
           WHEN rmsto_date(c.dtaini_carf)-rmsto_date(c.dtaemi_carf) < 0 THEN 0
             ELSE rmsto_date(c.dtaini_carf)-rmsto_date(c.dtaemi_carf)
         END SUPP_LEAD_TIME,
         'TED' PAYMENT_TYPE,
         --rmsto_date(c.dtaini_carf) SCHEDULED_DEL_DATE,
         CASE
           WHEN rmsto_date(c.dtaini_carf) < rmsto_date(c.dtaemi_carf) THEN rmsto_date(c.dtaemi_carf)
             ELSE rmsto_date(c.dtaemi_carf)
         END SCHEDULED_DEL_DATE,
         trunc(c.pgt_prz_medio) PAYMENT_DUE_DAYS,
         '0' PAYMENT_EXCHANGE_RATE,
         to_char(c.codfor_carf*10+dac(c.codfor_carf)) supplier_id,
         null ORDER_ATTR_02_NO,
         null ORDER_ATTR_08_NO,
         null ORDER_ATTR_09_NO,
         null ORDER_ATTR_02_FLAG,
         null ORDER_ATTR_04_CHAR,
         null ORDER_ATTR_05_CHAR,
         null ORDER_ATTR_06_CHAR,
         'RMS' APPROVE_USER_ID,
         rmsto_date(c.dtaemi_carf) APPROVE_DATE,
         'C' AS ORDER_STATUS
  from ag1flped C
  inner join ag1fdped I ON i.codloj_detf = c.cloj_carf
                       and i.nroped_detf = c.nroped_carf
                       and i.digped_detf = c.digped_carf
                       and i.for_detf = c.codfor_carf
  inner join gs_mvw_tipos dst on dst.codigo = c.cloj_carf
  inner join gs_mvw_tipos ori on ori.codigo = c.codfor_carf
  inner join gs_mvw_caditens it on it.prod = i.itm_detf
  inner join GS_PRF_ITEM pi on pi.sku_id = to_char(i.itm_detf*10+i.dig_detf)
  inner join AA3CCPGT c on c.pgt_codigo = c.cond_pag_carf
  LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                      and expd.gsku_filial = c.cloj_carf
  where dst.tipofilial in ('L', 'D')
  and ori.tipofilial not in ('L', 'D')
  and expd.gsku_descricao is null
  and rmsto_date(c.dtaemi_carf) >= rms7to_date(1201001)
  and rmsto_date(c.dtaemi_carf) <= rms7to_date(1201108)
  and i.qtdped_detf > 0
  and c.codfor_carf not in (
    3792,
    3795,
    3796,
    50695,
    3793,
    51801,
    60194,
    63030,
    67298
  )
  group by c.codfor_carf, c.nroped_carf, c.cloj_carf, c.dtaini_carf, c.dtaemi_carf, c.pgt_prz_medio, c.codfor_carf, case when it.dep = 3 then 1 else 0 end;
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'PURCHASEORDER' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from GS_PRF_PURCHASE_ORDER
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- pck_interface_api_hml.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS
   (PURCHASE_ORDER_ID,  PURCHASE_ORDER_DESC,  EXT_PURCHASE_ORDER_ID,  STORE_ID,
   SUPP_LEAD_TIME,  PAYMENT_TYPE,  SCHEDULED_DEL_DATE,  PAYMENT_DUE_DAYS,  PAYMENT_EXCHANGE_RATE,
   SUPPLIER_ID, ORDER_ATTR_02_NO,  ORDER_ATTR_08_NO,  ORDER_ATTR_09_NO,  ORDER_ATTR_02_FLAG,
   ORDER_ATTR_04_CHAR,  ORDER_ATTR_05_CHAR,  ORDER_ATTR_06_CHAR,   APPROVE_USER_ID, APPROVE_DATETIME,ORDER_STATUS)
   select PURCHASE_ORDER_ID,  PURCHASE_ORDER_DESC,  EXT_PURCHASE_ORDER_ID,  STORE_ID,
   SUPP_LEAD_TIME,  PAYMENT_TYPE,  SCHEDULED_DEL_DATE,  PAYMENT_DUE_DAYS,  PAYMENT_EXCHANGE_RATE,
   SUPPLIER_ID, ORDER_ATTR_02_NO,  ORDER_ATTR_08_NO,  ORDER_ATTR_09_NO,  ORDER_ATTR_02_FLAG,
   ORDER_ATTR_04_CHAR,  ORDER_ATTR_05_CHAR,  ORDER_ATTR_06_CHAR,  APPROVE_USER_ID, APPROVE_DATETIME,ORDER_STATUS
   from GS_PRF_PURCHASE_ORDER';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --pck_interface_api_hml.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update GS_LOG_PROFIMETRICS lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface));   
end ExportaPurchaseOrderFechada;

procedure ExportaPurchaseDetail(p_databatch date := trunc(sysdate)) is
  v_destino varchar2(500);
  v_query varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino   date;
begin
  v_inicio    := sysdate;
  v_interface := 9032;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  
  -- INTERFACE 9032
  -- DINTERFACE PURCHASE DETAIL
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE GS_PRF_PURCHASE_DETAIL';
  execute immediate v_query;
  
  insert into GS_PRF_PURCHASE_DETAIL
  select to_char(p.pedido)||'_'||to_char( case when trunc(p.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(p.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(p.destino/10)+600)*10+dac((trunc(p.destino/10)+600)) 
                    else p.destino end)||'_'||to_char(p.origem) PURCHASE_ORDER_ID,
         'SKU'/*to_char(i.tp)*/ PROD_LEVEL,
         to_char(p.cod_prod) PROD_ID,
         SUM(((p.qtd_ped - p.qtd_ent))*p.emb)/*sum(p.qtd_ped*p.emb)*/ ORDERED_QTY,
         SUM(p.qtd_ped*p.prc_unit) ORDERED_VALUE, 
         'A'       RECORD_STATUS,
         'Coop'     CREATE_USER_ID,
         sysdate CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
          sysdate  LAST_UPDATE_DATETIME,
          avg(p.prc_unit)/avg(p.emb) AS UNIT_COST
  from pedidos_abertos_carteira p
  inner join gs_mvw_tipos f on f.codigo = trunc(p.origem/10)
  inner join AA3CCPGT c on c.pgt_codigo = p.cond_pagto
  INNER JOIN GS_MVW_CADITENS i on i.prod = trunc(p.cod_prod/10)
  inner join GS_PRF_ITEM pi on pi.sku_id = to_char( p.cod_prod ) -- SOMENTE OS PRODUTOS QUE FORAM EXPORTADOS
  inner join gs_mvw_filiais fl on fl.codigo = trunc(p.destino/10)
  LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expd.gsku_filial = trunc(p.destino/10)
  where foto = dateto_rms7(/*sysdate*/p_databatch)
  and f.tipofilial = 'F'
  AND expd.gsku_descricao is null
  and p.origem not in (
    37923,
    37958,
    37966,
    506958,
    37931,
    518018,
    601942,
    630306,
    672980
  )
  and p.dtaemi_car >= dateto_rms7(p_databatch-30)
  --and (p.qtd_ped - p.qtd_ent) > 0
  group by p.pedido,i.tp, p.cod_prod, p.destino, p.origem;

  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'PURCHASEDETAIL' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from GS_PRF_PURCHASE_DETAIL
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- pck_interface_api_hml.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS
   (PURCHASE_ORDER_ID, PROD_LEVEL, PROD_ID,ORDERED_QTY,ORDERED_VALUE,
   RECORD_STATUS,CREATE_USER_ID,CREATE_DATETIME,LAST_UPDATE_USER_ID,LAST_UPDATE_DATETIME,UNIT_COST)
   select PURCHASE_ORDER_ID, PROD_LEVEL, PROD_ID,ORDERED_QTY,ORDERED_VALUE,
   RECORD_STATUS,CREATE_USER_ID,CREATE_DATETIME,LAST_UPDATE_USER_ID,LAST_UPDATE_DATETIME,UNIT_COST
   from GS_PRF_PURCHASE_DETAIL';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --pck_interface_api_hml.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update GS_LOG_PROFIMETRICS lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface));   
end ExportaPurchaseDetail;

procedure ExportaPurchaseDetailFechada(p_databatch date := trunc(sysdate)) is
  v_destino varchar2(500);
  v_query varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino   date;
begin
  v_inicio    := sysdate;
  v_interface := 9032;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  
  -- INTERFACE 9032
  -- DINTERFACE PURCHASE DETAIL
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE GS_PRF_PURCHASE_DETAIL';
  execute immediate v_query;
  
  insert into GS_PRF_PURCHASE_DETAIL
  select distinct
         to_char(c.nroped_carf*10+max(c.digped_carf))||'_'||to_char( case when c.cloj_carf between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(p.destino/10) <> 84
                   and max(dst.natureza) != 'LV'
                   and max(it.dep) = 3
                  then ((c.cloj_carf+600)*10+dac(c.cloj_carf+600) )
                    else c.cloj_carf*10+max(c.dloj_carf) end)||'_'||to_char(c.codfor_carf*10+dac(c.codfor_carf)) PURCHASE_ORDER_ID,
         to_char(it.tp) PROD_LEVEL,
         to_char(it.prod*10+dac(it.prod)) PROD_ID,
         sum(i.emb_detf*i.qtdped_detf) ORDERED_QTY,
         SUM(i.qtdped_detf* case when i.for_cst_detf = 0 then it.emb * ite.git_cus_med else i.for_cst_detf end) ORDERED_VALUE, 
         'A'       RECORD_STATUS,
         'Coop'     CREATE_USER_ID,
         sysdate CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
          sysdate  LAST_UPDATE_DATETIME,
          AVG(for_cst_detf +ipi_valor_detf) AS UNIT_COST
  from ag1flped C
  inner join ag1fdped I ON i.codloj_detf = c.cloj_carf
                       and i.nroped_detf = c.nroped_carf
                       and i.digped_detf = c.digped_carf
                       and i.for_detf = c.codfor_carf
  inner join gs_mvw_tipos dst on dst.codigo = c.cloj_carf
  inner join gs_mvw_tipos ori on ori.codigo = c.codfor_carf
  inner join gs_mvw_caditens it on it.prod = i.itm_detf
  inner join GS_PRF_ITEM pi on pi.sku_id = to_char(i.itm_detf*10+i.dig_detf)
  inner join AA3CCPGT c on c.pgt_codigo = c.cond_pag_carf
  inner join aa3citem ite on ite.git_cod_item = i.itm_detf
  LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                      and expd.gsku_filial = c.cloj_carf
 INNER JOIN GS_PRF_PURCHASE_ORDER_CAPA CAPA ON to_char(c.nroped_carf * 10 + c.digped_carf) = CAPA.PEDIDO --HENRIQUE, SO CARREGA PEDIDOS INFORMADOS NA 9025
                                         AND to_char(c.cloj_carf   * 10 + c.dloj_carf  ) = CAPA.DESTINO
                                         AND to_char(c.codfor_carf * 10 + dac(c.codfor_carf)) = CAPA.ORIGEM                                                          
  where dst.tipofilial in ('L', 'D')
  and ori.tipofilial not in ('L', 'D')
  and i.qtdped_detf > 0
  and expd.gsku_descricao is null
  and rmsto_date(c.dtaemi_carf) >= rms7to_date(1201001)
  and rmsto_date(c.dtaemi_carf) <= rms7to_date(1201108)
  and c.codfor_carf not in (
    3792,
    3795,
    3796,
    50695,
    3793,
    51801,
    60194,
    63030,
    67298
  )

  group by c.codfor_carf, c.nroped_carf, c.cloj_carf, it.prod, it.tp;

  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'PURCHASEDETAIL' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from GS_PRF_PURCHASE_DETAIL
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- pck_interface_api_hml.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS
   (PURCHASE_ORDER_ID, PROD_LEVEL, PROD_ID,ORDERED_QTY,ORDERED_VALUE,
   RECORD_STATUS,CREATE_USER_ID,CREATE_DATETIME,LAST_UPDATE_USER_ID,LAST_UPDATE_DATETIME,UNIT_COST)
   select PURCHASE_ORDER_ID, PROD_LEVEL, PROD_ID,ORDERED_QTY,ORDERED_VALUE,
   RECORD_STATUS,CREATE_USER_ID,CREATE_DATETIME,LAST_UPDATE_USER_ID,LAST_UPDATE_DATETIME,UNIT_COST
   from GS_PRF_PURCHASE_DETAIL';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --pck_interface_api_hml.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update GS_LOG_PROFIMETRICS lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface));   
end ExportaPurchaseDetailFechada;

procedure ExportaPurchaseTransact(p_databatch date := trunc(sysdate)) is
  v_destino varchar2(500);
  v_query varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino   date;
begin
  v_inicio    := sysdate;
  v_interface := 9024;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  
  -- INTERFACE 9024
  -- DINTERFACE PURCHASE TRANSACT
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE GS_PRF_ORDER_TRANSACT';
  
  execute immediate v_query;
  
  -- INSERE TODOS OS PEDIDOS ABERTOS COM O TRAN_TYPE DE SHIP_QTY
  insert into GS_PRF_ORDER_TRANSACT
  select to_char(p.pedido)||'_'||to_char( case when trunc(p.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(p.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(p.destino/10)+600)*10+dac((trunc(p.destino/10)+600)) 
                    else p.destino end)||'_'||to_char(p.origem) PURCHASE_ORDER_ID,
         to_char( case when trunc(p.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(p.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(p.destino/10)+600)*10+dac((trunc(p.destino/10)+600)) 
                    else p.destino end)                         STORE_ID,
         '-1'/*null*/                                       GRN_ID, -- OQUE E ISSO ???
         to_char(p.cod_prod)                        ITEM_ID,
         'SKU'                                      ITEM_TYPE,
         to_char(p.origem)                          SUPPLIER_ID,
         'SHIP_QTY'                                 TRAN_TYPE,
         trunc(rms7to_date(MIN(p.dtaemi_car)))                         tran_date, 
         SUM(P.QTD_PED*P.EMB)                       TRAN_QTY,
         SUM(P.QTD_PED*P.PRC_UNIT)                  TRAN_VAL,
         ROUND(SUM(P.QTD_PED*P.PRC_UNIT)/SUM(P.QTD_PED*P.EMB), 2) UNIT_COST,
         NULL TRAN_ATTR_02_NO                                 
  from pedidos_abertos_carteira p
  left join pedidos_logistica pl on pl.destino = p.destino
                                and pl.pedido = p.pedido
                                and pl.origem = p.origem
                                and pl.cod_prod = p.cod_prod
                                and pl.foto = p.foto
  inner join gs_mvw_tipos f on f.codigo = trunc(p.origem/10)
  inner join AA3CCPGT c on c.pgt_codigo = p.cond_pagto
  INNER JOIN GS_MVW_CADITENS i on i.prod = trunc(p.cod_prod/10)
  INNER JOIN GS_PRF_ITEM PI ON PI.SKU_ID = TO_CHAR(P.COD_PROD)
  inner join gs_mvw_filiais fl on fl.codigo = trunc(p.destino/10)
  LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expd.gsku_filial = trunc(p.destino/10)
  where p.foto = dateto_rms7(/*sysdate*/p_databatch)
  and p.foto = dateto_rms7(/*sysdate*/p_databatch)
  and f.tipofilial NOT in ('L', 'D')
  and p.dtaemi_car >= dateto_rms7(/*sysdate*/p_databatch-10)
  and pl.qtd_ped is null
  and p.qtd_ped > 0
  and P.EMB > 0
  AND EXPD.GSKU_DESCRICAO IS NULL
  and p.origem not in (
    37923,
    37958,
    37966,
    506958,
    37931,
    518018,
    601942,
    630306,
    672980
  )
  and p.dtaemi_car = dateto_rms7(p_databatch) --ENVIA APENAS OS SHIP NOVOS
  group by p.pedido,i.tp, p.cod_prod, p.destino, p.origem;
  
  insert into GS_PRF_ORDER_TRANSACT
  select to_char(pl.pedido)||'_'||to_char( case when trunc(pl.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(pl.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(pl.destino/10)+600)*10+dac((trunc(pl.destino/10)+600)) 
                    else pl.destino end)||'_'||to_char(pl.origem) PURCHASE_ORDER_ID,
         to_char( case when trunc(pl.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(pl.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(pl.destino/10)+600)*10+dac((trunc(pl.destino/10)+600)) 
                    else pl.destino end)                         STORE_ID,
         '-1'/*null*/                                         GRN_ID,
         to_char(pl.cod_prod)                        ITEM_ID,
         'SKU'                                      ITEM_TYPE,
         TO_CHAR(pl.origem)                         SUPPLIER_ID,
         'SHIP_QTY'                                 TRAN_TYPE,         
         trunc(rms7to_date(MIN(p.dtaemi_car)))                         tran_date, 
         SUM(Pl.QTD_PED*Pl.EMB)                       TRAN_QTY,
         SUM(Pl.QTD_PED*Pl.PRC_UNIT)                  TRAN_VAL,
         ROUND(SUM(Pl.QTD_PED*Pl.PRC_UNIT)/SUM(Pl.QTD_PED*Pl.EMB), 2) UNIT_COST,
         NULL TRAN_ATTR_02_NO
  from pedidos_logistica pl
  inner join pedidos_abertos_carteira p on pl.destino = p.destino
                                and pl.pedido = p.pedido
                                and pl.origem = p.origem
                                and pl.cod_prod = p.cod_prod
                                and pl.foto = p.foto
  inner join gs_mvw_tipos f on f.codigo = trunc(pl.origem/10)
  inner join AA3CCPGT c on c.pgt_codigo = pl.cond_pagto
  INNER JOIN GS_MVW_CADITENS i on i.prod = trunc(pl.cod_prod/10)
  INNER JOIN GS_PRF_ITEM PI ON PI.SKU_ID = TO_CHAR(P.COD_PROD)
  inner join gs_mvw_filiais fl on fl.codigo = trunc(pl.destino/10)
  LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expd.gsku_filial = trunc(pl.destino/10)
  where pl.foto = dateto_rms7(/*sysdate*/p_databatch)
  and f.tipofilial not in ('L', 'D')
  and p.dtaemi_car >= dateto_rms7(/*sysdate*/p_databatch-10)
  and p.qtd_ped is null
  and pl.qtd_ped > 0
  and Pl.EMB > 0
  AND expd.gsku_descricao is null
  and pl.dtaemi_ped = dateto_rms7(p_databatch) --ENVIA APENAS OS SHIP NOVOS
  group by pl.pedido,i.tp, pl.cod_prod, pl.destino, pl.origem;
  
  -- INSERE TODOS OS PEDIDOS RECEBIDOS NA DATA DO BACTH
  insert into GS_PRF_ORDER_TRANSACT
  select to_char(ie.entsaic_nro_pedido)||'_'||to_char( case when f.fis_loj_dst between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and f.fis_loj_dst <> 84
                   and fil.natureza != 'LV'
                   and (i.dep) = 3
                  then (f.fis_loj_dst+600)*10+dac(f.fis_loj_dst+600) 
                    else f.fis_loj_dst*10+f.fis_dig_dst end)||'_'||
                      /*to_char(f.fis_loj_org*10+f.fis_dig_org)*/ 
                 (CASE
                    WHEN (SELECT PAC.ORIGEM FROM PEDIDOS_ABERTOS_CARTEIRA PAC
                           WHERE PAC.DESTINO = (f.fis_loj_dst * 10 + f.fis_dig_dst)
                             AND PAC.PEDIDO = to_number(ie.entsaic_nro_pedido)
                             AND ROWNUM < 2) IS NULL
                      THEN (f.fis_loj_org * 10 + f.fis_dig_org)
                    ELSE
                         (SELECT PAC.ORIGEM FROM PEDIDOS_ABERTOS_CARTEIRA PAC
                           WHERE PAC.DESTINO = (f.fis_loj_dst * 10 + f.fis_dig_dst)
                             AND PAC.PEDIDO = to_number(ie.entsaic_nro_pedido)
                             AND ROWNUM < 2)
                  END)     
                      PURCHASE_ORDER_ID,
         to_char( case when f.fis_loj_dst between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and f.fis_loj_dst <> 84
                   and fil.natureza != 'LV'
                   and (i.dep) = 3
                  then (f.fis_loj_dst+600)*10+dac(f.fis_loj_dst+600) 
                    else f.fis_loj_dst*10+f.fis_dig_dst end)                        STORE_ID,
         to_char(f.fis_nro_nota)                                                    GRN_ID,
         to_char(ie.esitc_codigo*10+ie.esitc_digito)                                ITEM_ID,
         'SKU'                                                                      ITEM_TYPE,
         to_char(f.fis_loj_org*10+f.fis_dig_org)                                    SUPPLIER_ID,
         'RECEIVED_QTY'                                                             TRAN_TYPE,         
         rms7to_date(F.FIS_DTA_AGENDA)                                              tran_date, 
         (ie.entsaic_quanti_un)                                                  TRAN_QTY,
         (ie.entsaic_prc_emb)*(ie.entsaic_quanti_un/ie.entsaic_base_emb)         TRAN_VAL,
         ROUND((ie.entsaic_prc_un), 2)                                           UNIT_COST,
         NULL                                                                       TRAN_ATTR_02_NO
  from AA1CFISC f
  INNER JOIN AG1IENSA ie on ie.eschc_agenda = f.fis_oper
                        and ie.eschc_data = f.fis_dta_agenda
                        and ie.eschc_nro_nota = f.fis_nro_nota
                        and ie.eschc_ser_nota = f.fis_serie
                        and ie.ESCHLJC_CODIGO  = f.FIS_LOJ_ORG
                        AND IE.ESCHLJC_DIGITO  = f.FIS_DIG_ORG
  INNER JOIN GS_MVW_TIPOS FL ON FL.CODIGO = F.FIS_LOJ_ORG    
  INNER JOIN GS_MVW_CADITENS I ON I.PROD = ie.esitc_codigo  
  INNER JOIN GS_PRF_ITEM PI ON PI.SKU_ID = TO_CHAR(ie.esitc_codigo*10+DAC(ie.esitc_codigo))
  inner join gs_mvw_filiais fil on fil.codigo = f.fis_loj_dst
  LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expd.gsku_filial = trunc(f.fis_loj_dst)                 
  WHERE F.FIS_DTA_AGENDA = dateto_rms7(p_databatch)
  AND F.FIS_OPER IN (SELECT DISTINCT T.TBC_AGENDA FROM AA1CTCON T WHERE T.TBC_INTG_3 = 'E' AND T.TBC_INTG_9 = 'S' and t.tbc_agenda not in (192,193))
  AND (F.FIS_PEDIDO_1 > 0 OR
      F.FIS_PEDIDO_2 > 0 OR
      F.FIS_PEDIDO_3 > 0 OR
      F.FIS_PEDIDO_4 > 0 OR
      F.FIS_PEDIDO_5 > 0)
  AND FL.TIPOFILIAL NOT IN ('L','D')
  AND F.FIS_SITUACAO NOT IN ('9','8','E')
  and expd.gsku_descricao is null
  and f.fis_loj_org <> 20000 --EXCLUIR DEVOLUCAO DE COOPERADO
  and ie.entsaic_nro_pedido > 0;
  
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'ORDERTRANSACT' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from GS_PRF_ORDER_TRANSACT
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- pck_interface_api_hml.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS
   (PURCHASE_ORDER_ID,STORE_ID,GRN_ID,ITEM_ID,ITEM_TYPE,SUPPLIER_ID,
   TRAN_TYPE,TRAN_DATE,TRAN_QTY,TRAN_VAL,UNIT_COST,TRAN_ATTR_02_NO)
   select PURCHASE_ORDER_ID,STORE_ID,GRN_ID,ITEM_ID,ITEM_TYPE,SUPPLIER_ID,
   TRAN_TYPE,TRAN_DATE,TRAN_QTY,TRAN_VAL,UNIT_COST,TRAN_ATTR_02_NO
   from GS_PRF_ORDER_TRANSACT';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --pck_interface_api_hml.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update GS_LOG_PROFIMETRICS lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
  
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface));   
    
end ExportaPurchaseTransact;

procedure ExportaPurchaseTransactFechada(p_databatch date := trunc(sysdate)) is
  v_destino varchar2(500);
  v_query varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino   date;
begin
  v_inicio    := sysdate;
  v_interface := 9024;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  
  -- INTERFACE 9024
  -- DINTERFACE PURCHASE TRANSACT
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE GS_PRF_ORDER_TRANSACT';
  
  execute immediate v_query;
  
  insert into GS_PRF_ORDER_TRANSACT
  select to_char(ie.entsaic_nro_pedido)||'_'||to_char( case when f.fis_loj_dst between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and f.fis_loj_dst <> 84
                   and fil.natureza != 'LV'
                   and (i.dep) = 3
                  then (f.fis_loj_dst+600)*10+dac(f.fis_loj_dst+600) 
                    else f.fis_loj_dst*10+f.fis_dig_dst end)||'_'||
                      --to_char(f.fis_loj_org*10+f.fis_dig_org) 
                      (CASE
                         WHEN (SELECT PAC.ORIGEM FROM PEDIDOS_ABERTOS_CARTEIRA PAC
                                WHERE PAC.DESTINO = (f.fis_loj_dst * 10 + f.fis_dig_dst)
                                  AND PAC.PEDIDO = to_number(ie.entsaic_nro_pedido)
                                  AND ROWNUM < 2) IS NULL
                           THEN (f.fis_loj_org * 10 + f.fis_dig_org)
                         ELSE
                              (SELECT PAC.ORIGEM FROM PEDIDOS_ABERTOS_CARTEIRA PAC
                                WHERE PAC.DESTINO = (f.fis_loj_dst * 10 + f.fis_dig_dst)
                                  AND PAC.PEDIDO = to_number(ie.entsaic_nro_pedido)
                                  AND ROWNUM < 2)
                       END) PURCHASE_ORDER_ID,
         to_char( case when f.fis_loj_dst between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and f.fis_loj_dst <> 84
                   and fil.natureza != 'LV'
                   and (i.dep) = 3
                  then (f.fis_loj_dst+600)*10+dac(f.fis_loj_dst+600) 
                    else f.fis_loj_dst*10+f.fis_dig_dst end)                        STORE_ID,
         to_char(f.fis_nro_nota)                                                    GRN_ID,
         to_char(ie.esitc_codigo*10+ie.esitc_digito)                                ITEM_ID,
         'SKU'                                                                      ITEM_TYPE,
         to_char(f.fis_loj_org*10+f.fis_dig_org)                                    SUPPLIER_ID,
         'RECEIVED_QTY'                                                             TRAN_TYPE,         
         rms7to_date(F.FIS_DTA_AGENDA)                                              tran_date, 
         (ie.entsaic_quanti_un)                                                  TRAN_QTY,
         (ie.entsaic_prc_emb)*(ie.entsaic_quanti_un/ie.entsaic_base_emb)         TRAN_VAL,
         ROUND((ie.entsaic_prc_un), 2)                                           UNIT_COST,
         NULL                                                                       TRAN_ATTR_02_NO
  from AA1CFISC f
  INNER JOIN AG1IENSA ie on ie.eschc_agenda = f.fis_oper
                        and ie.eschc_data = f.fis_dta_agenda
                        and ie.eschc_nro_nota = f.fis_nro_nota
                        and ie.eschc_ser_nota = f.fis_serie
                        and ie.ESCHLJC_CODIGO  = f.FIS_LOJ_ORG
                        AND IE.ESCHLJC_DIGITO  = f.FIS_DIG_ORG
  INNER JOIN GS_MVW_TIPOS FL ON FL.CODIGO = F.FIS_LOJ_ORG    
  INNER JOIN GS_MVW_CADITENS I ON I.PROD = ie.esitc_codigo  
  INNER JOIN GS_PRF_ITEM PI ON PI.SKU_ID = TO_CHAR(ie.esitc_codigo*10+DAC(ie.esitc_codigo))
  inner join gs_mvw_filiais fil on fil.codigo = f.fis_loj_dst
  LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expd.gsku_filial = trunc(f.fis_loj_dst) 
 INNER JOIN GS_PRF_PURCHASE_ORDER_CAPA CAPA ON to_char(ie.entsaic_nro_pedido) = CAPA.PEDIDO --HENRIQUE, SO CARREGA PEDIDOS INFORMADOS NA 9025
                                         AND to_char(f.fis_loj_dst   * 10 + dac(f.fis_loj_dst)) = CAPA.DESTINO
                                         AND to_char(f.fis_loj_org*10+f.fis_dig_org) = CAPA.ORIGEM                                        
  WHERE F.FIS_DTA_AGENDA >= 1201001
  AND F.FIS_DTA_AGENDA <=   1201108
  AND F.FIS_OPER IN (SELECT DISTINCT T.TBC_AGENDA FROM AA1CTCON T WHERE T.TBC_INTG_3 = 'E' AND T.TBC_INTG_9 = 'S' and t.tbc_agenda not in (192,193))
  AND (F.FIS_PEDIDO_1 > 0 OR
      F.FIS_PEDIDO_2 > 0 OR
      F.FIS_PEDIDO_3 > 0 OR
      F.FIS_PEDIDO_4 > 0 OR
      F.FIS_PEDIDO_5 > 0)
  AND FL.TIPOFILIAL NOT IN ('L','D')
  AND F.FIS_SITUACAO NOT IN ('9','8','E')
  and expd.gsku_descricao is null
  and ie.entsaic_nro_pedido > 0
  and ie.entsaic_quanti_un > 0
  and f.fis_loj_org <> 20000 --EXCLUIR DEVOLUCAO DE COOPERADO
  
  ;

  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'ORDERTRANSACT' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from GS_PRF_ORDER_TRANSACT
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- pck_interface_api_hml.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS
   (PURCHASE_ORDER_ID,STORE_ID,GRN_ID,ITEM_ID,ITEM_TYPE,SUPPLIER_ID,
   TRAN_TYPE,TRAN_DATE,TRAN_QTY,TRAN_VAL,UNIT_COST,TRAN_ATTR_02_NO)
   select PURCHASE_ORDER_ID,STORE_ID,GRN_ID,ITEM_ID,ITEM_TYPE,SUPPLIER_ID,
   TRAN_TYPE,TRAN_DATE,TRAN_QTY,TRAN_VAL,UNIT_COST,TRAN_ATTR_02_NO
   from GS_PRF_ORDER_TRANSACT';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --pck_interface_api_hml.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update GS_LOG_PROFIMETRICS lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
  
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface));   
    
end ExportaPurchaseTransactFechada;

procedure ExportaTransfer(p_databatch date := trunc(sysdate)) is
  v_destino varchar2(500);
  v_query varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino   date;
begin
  v_inicio    := sysdate;
  v_interface := 9018;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  
  -- INTERFACE 9018
  -- DINTERFACE TRANSFER
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE GS_PRF_TRANSFER';
  execute immediate v_query;
  
  insert into GS_PRF_TRANSFER
  select distinct to_char(p.pedido)||'_'||to_char( case when trunc(p.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(p.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(p.destino/10)+600)*10+dac((trunc(p.destino/10)+600)) 
                    else p.destino end)||'_'||to_char(p.origem) TRANSFER_ID,
         'IC'                                       TRANSFER_TYPE,
         to_char(p.origem) FROM_STORE_ID,
         to_char( case when trunc(p.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(p.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(p.destino/10)+600)*10+dac((trunc(p.destino/10)+600)) 
                    else p.destino end) TO_STORE_ID,
         rms7to_date(max(p.dtaemi_car)) from_avail_date ,
         rms7to_date(max(p.Dia_Ini)) delivery_date, 
         'A' transfer_status ,
         'Coop' create_user_id,
         SYSDATE create_datetime,
         'RMS' APPROVE_USER_ID,
         rms7to_date(max(p.dtaemi_car)) APPROVE_DATETIME  
  from pedidos_abertos_carteira p
  left join pedidos_logistica pl on pl.destino = p.destino
                                and pl.origem = p.origem
                                and pl.pedido = p.pedido
                                and pl.cod_prod = p.cod_prod
                                and pl.foto = p.foto
  inner join gs_mvw_tipos f on f.codigo = trunc(p.origem/10)
  inner join gs_mvw_caditens i on i.prod = trunc(p.cod_prod/10)
  inner join GS_PRF_ITEM pi on pi.sku_id = to_char(p.cod_prod)
  inner join gs_mvw_filiais fl on fl.codigo = trunc(p.destino/10)
   LEFT JOIN AG1GRSKU expO on expo.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expo.gsku_filial = trunc(p.origem/10) 
   LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expd.gsku_filial = trunc(p.destino/10)
  where p.foto = dateto_rms7(/*sysdate*/p_databatch)
  and f.tipofilial in ('L','D')
  --and pl.qtd_ped is null--NAO RETORNA O QUE EXISTE NA pedidos_logistica
  and expo.gsku_descricao is null
  and expd.gsku_descricao is null
  and p.dtaemi_car >= dateto_rms7(p_databatch-30)
  group by p.pedido, p.destino, p.origem, p.cod_prod;
  
  insert into GS_PRF_TRANSFER 
  select distinct to_char(pl.pedido)||'_'||to_char( case when trunc(pl.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(pl.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(pl.destino/10)+600)*10+dac((trunc(pl.destino/10)+600)) 
                    else pl.destino end)||'_'||to_char(pl.origem) TRANSFER_ID,
         'IC'                                         TRANSFER_TYPE,
         to_char(pl.origem)                           FROM_STORE_ID,
         to_char( case when trunc(pl.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(pl.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(pl.destino/10)+600)*10+dac((trunc(pl.destino/10)+600)) 
                    else pl.destino end)                          TO_STORE_ID,
         rms7to_date(max(pl.dtaemi_ped))                 from_avail_date ,
         rms7to_date(max(pl.Dia_Ini))                  delivery_date, 
         'A'                                          transfer_status ,
         'Coop'                                       create_user_id,
         SYSDATE                                      create_datetime,
         'RMS' APPROVE_USER_ID,
         rms7to_date(max(pl.dtaemi_ped)) APPROVE_DATETIME  
  from pedidos_logistica pl
  left join pedidos_abertos_carteira p on pl.destino = p.destino
                                and pl.pedido = p.pedido
                                and pl.origem = p.origem
                                and pl.cod_prod = p.cod_prod
                                and pl.foto = p.foto
  inner join gs_mvw_tipos f on f.codigo = trunc(pl.origem/10)
  inner join gs_mvw_caditens i on i.prod = trunc(pl.cod_prod/10)
  inner join GS_PRF_ITEM pi on pi.sku_id = to_char(pl.cod_prod)
  inner join gs_mvw_filiais fl on fl.codigo = trunc(pl.destino/10)
  LEFT JOIN AG1GRSKU expO on expo.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expo.gsku_filial = trunc(pl.origem/10) 
  LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expd.gsku_filial = trunc(pl.destino/10)
  where pl.foto = dateto_rms7(/*sysdate*/p_databatch)
  and f.tipofilial in ('L','D')
  and expo.gsku_descricao is null
  and expd.gsku_descricao is null
  and p.qtd_ent is null--NAO RETORNA O QUE EXISTE NA pedidos_abertos_carteira
  and pl.dtaemi_ped >= dateto_rms7(p_databatch-30)
  group by pl.pedido, pl.destino, pl.origem, pl.cod_prod;

  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'TRANSFER' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from GS_PRF_TRANSFER
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- pck_interface_api_hml.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS
   (TRANSFER_ID, TRANSFER_TYPE,FROM_STORE_ID,TO_STORE_ID,
   FROM_AVAIL_DATE,DELIVERY_DATE,TRANSFER_STATUS,CREATE_USER_ID,CREATE_DATETIME, APPROVE_USER_ID, APPROVE_DATETIME)
   select TRANSFER_ID, TRANSFER_TYPE,FROM_STORE_ID,TO_STORE_ID,
   FROM_AVAIL_DATE,DELIVERY_DATE,TRANSFER_STATUS,CREATE_USER_ID,CREATE_DATETIME, APPROVE_USER_ID, APPROVE_DATETIME
   from GS_PRF_TRANSFER';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --pck_interface_api_hml.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update GS_LOG_PROFIMETRICS lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface));   
end ExportaTransfer;

procedure ExportaTransferFechada(p_databatch date := trunc(sysdate)) is
  v_destino varchar2(500);
  v_query varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino   date;
begin
  v_inicio    := sysdate;
  v_interface := 9018;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  
  -- INTERFACE 9018
  -- DINTERFACE TRANSFER
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE GS_PRF_TRANSFER';
  execute immediate v_query;
  
  --Cria a base das capas disponiveis no momento --Henrique
  v_query := 'TRUNCATE TABLE GS_PRF_TRANSFER_CAPA'; 
  execute immediate v_query;
  
  insert into GS_PRF_TRANSFER_CAPA
  select DISTINCT to_char(c.nroped_carf * 10 + c.digped_carf) AS PEDIDO,
                to_char(c.cloj_carf   * 10 + c.dloj_carf  ) AS DESTINO,
                to_char(c.codfor_carf * 10 + dac(c.codfor_carf)) AS ORIGEM
    from ag1flped C
  inner join ag1fdped I ON i.codloj_detf = c.cloj_carf
                       and i.nroped_detf = c.nroped_carf
                       and i.digped_detf = c.digped_carf
                       and i.for_detf = c.codfor_carf
  inner join gs_mvw_tipos dst on dst.codigo = c.cloj_carf
  inner join gs_mvw_tipos ori on ori.codigo = c.codfor_carf
  inner join gs_mvw_caditens it on it.prod = i.itm_detf
  inner join GS_PRF_ITEM pi on pi.sku_id = to_char(i.itm_detf*10+i.dig_detf)
  LEFT JOIN AG1GRSKU expO on expo.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                      and expo.gsku_filial = c.cloj_carf
  LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                      and expd.gsku_filial = c.codfor_carf
  where dst.tipofilial in ('L', 'D')
  and ori.tipofilial in ('L', 'D')
  and expo.gsku_descricao is null
  and expd.gsku_descricao is null
  and rmsto_date(c.dtaemi_carf) >= rms7to_date(1201001)
  and rmsto_date(c.dtaemi_carf) <= rms7to_date(1201108)
  and i.qtdped_detf > 0
  and c.nroped_carf not in (214384) -- fiz isso pq o item 2000458 acusa recebimento na 9025, mas nao existe nos fechados
  group by c.nroped_carf, c.digped_carf, c.cloj_carf, c.dloj_carf, c.codfor_carf;
  ----------------------------------------------
  
  -- ag1fdped d, ag1flped l
  insert into GS_PRF_TRANSFER
  select DISTINCT to_char(c.nroped_carf*10+max(c.digped_carf))||'_'||to_char( case when c.cloj_carf between 1 and 100 
                                             and max(dst.natureza) != 'LV'
                                             and max(it.dep) = 3
                                             then (c.cloj_carf+600)*10+dac(c.cloj_carf+600) 
                      else c.cloj_carf*10+max(c.dloj_carf) end)||'_'||to_char(c.codfor_carf*10+dac(c.codfor_carf)) TRANSFER_ID,
         'IC'                                       TRANSFER_TYPE,
         to_char(c.cloj_carf*10+max(c.dloj_carf)) FROM_STORE_ID,
         to_char( case when c.cloj_carf between 1 and 100 
                                             and max(dst.natureza) != 'LV'
                                             and max(it.dep) = 3
                                             then (c.cloj_carf+600)*10+dac(c.cloj_carf+600) 
                      else c.cloj_carf*10+max(c.dloj_carf) end) TO_STORE_ID,
         rmsto_date(max(c.dtaemi_carf)) from_avail_date ,
         --rmsto_date(max(c.dtaini_carf)) delivery_date, 
         CASE
           WHEN rmsto_date(max(c.dtaini_carf)) < rmsto_date(max(c.dtaemi_carf)) THEN rmsto_date(max(c.dtaemi_carf))
             ELSE rmsto_date(max(c.dtaini_carf))
         END delivery_date,
         'A' transfer_status ,
         'Coop' create_user_id,
         SYSDATE create_datetime,
         'RMS' APPROVE_USER_ID,
         rmsto_date(max(c.dtaemi_carf)) APPROVE_DATETIME
  from ag1flped C
  inner join ag1fdped I ON i.codloj_detf = c.cloj_carf
                       and i.nroped_detf = c.nroped_carf
                       and i.digped_detf = c.digped_carf
                       and i.for_detf = c.codfor_carf
  inner join gs_mvw_tipos dst on dst.codigo = c.cloj_carf
  inner join gs_mvw_tipos ori on ori.codigo = c.codfor_carf
  inner join gs_mvw_caditens it on it.prod = i.itm_detf
  inner join GS_PRF_ITEM pi on pi.sku_id = to_char(i.itm_detf*10+i.dig_detf)
  LEFT JOIN AG1GRSKU expO on expo.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                      and expo.gsku_filial = c.cloj_carf
  LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                      and expd.gsku_filial = c.codfor_carf
  where dst.tipofilial in ('L', 'D')
  and ori.tipofilial in ('L', 'D')
  and expo.gsku_descricao is null
  and expd.gsku_descricao is null
  and rmsto_date(c.dtaemi_carf) >= rms7to_date(1201001)
  and rmsto_date(c.dtaemi_carf) <= rms7to_date(1201108)
  and i.qtdped_detf > 0
  and c.nroped_carf not in (214384) -- fiz isso pq o item 2000458 acusa recebimento na 9025, mas nao existe nos fechados  
  group by c.nroped_carf, c.cloj_carf, c.codfor_carf, I.ITM_DETF; 

  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'TRANSFER' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from GS_PRF_TRANSFER
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- pck_interface_api_hml.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS
   (TRANSFER_ID, TRANSFER_TYPE,FROM_STORE_ID,TO_STORE_ID,
   FROM_AVAIL_DATE,DELIVERY_DATE,TRANSFER_STATUS,CREATE_USER_ID,CREATE_DATETIME, APPROVE_USER_ID, APPROVE_DATETIME)
   select TRANSFER_ID, TRANSFER_TYPE,FROM_STORE_ID,TO_STORE_ID,
   FROM_AVAIL_DATE,DELIVERY_DATE,TRANSFER_STATUS,CREATE_USER_ID,CREATE_DATETIME, APPROVE_USER_ID, APPROVE_DATETIME
   from GS_PRF_TRANSFER';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --pck_interface_api_hml.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update GS_LOG_PROFIMETRICS lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface));   
end ExportaTransferFechada;

procedure ExportaTransferDetail(p_databatch date := trunc(sysdate)) is
  v_destino varchar2(500);
  v_query varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino   date;
begin
  v_inicio    := sysdate;
  v_interface := 9019;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  
  -- INTERFACE 9019
  -- DINTERFACE TRANSFER DETAIL
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE GS_PRF_TRANSFER_DETAIL';
  execute immediate v_query;
  
  insert into GS_PRF_TRANSFER_DETAIL
  select to_char(p.pedido)||'_'||to_char( case when trunc(p.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(p.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(p.destino/10)+600)*10+dac((trunc(p.destino/10)+600)) 
                    else p.destino end)||'_'||to_char(p.origem) TRANSFER_ID,
         to_char(p.cod_prod) ITEM_ID,
         'SKU' ITEM_TYPE,
         SUM(((p.qtd_ped - p.qtd_ent))*p.emb) TRANSFER_QTY, 
         i.linha       LINE_ID,
         '1'     STYLE_ID,
         avg(p.prc_unit)/avg(p.emb) transfer_unit_cost
  from pedidos_abertos_carteira p
  left join pedidos_logistica pl on pl.destino = p.destino
                                and pl.pedido = p.pedido
                                and pl.origem = p.origem
                                and pl.cod_prod = p.cod_prod
                                and pl.foto = p.foto
  inner join gs_mvw_tipos f on f.codigo = trunc(p.origem/10)
  inner join AA3CCPGT c on c.pgt_codigo = p.cond_pagto
  INNER JOIN GS_MVW_CADITENS i on i.prod = trunc(p.cod_prod/10)
  inner join GS_PRF_ITEM prfi on prfi.sku_id = to_char(p.cod_prod) -- SOMENTE PRODUTOS EXPORTADOS ANTERIORMENTE
  inner join gs_mvw_filiais fl on fl.codigo = trunc(p.destino/10)
  LEFT JOIN AG1GRSKU expO on expo.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expo.gsku_filial = trunc(p.origem/10) 
  LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expd.gsku_filial = trunc(p.destino/10)
  where p.foto = dateto_rms7(/*sysdate*/p_databatch)
  and f.tipofilial in ('L', 'D')
  --and pl.qtd_ped is null--NAO RETORNA O QUE EXISTE NA pedidos_logistica
  and expo.gsku_descricao is null
  and expd.gsku_descricao is null
  and p.dtaemi_car >= dateto_rms7(p_databatch-30)
  --and (p.qtd_ped - p.qtd_ent) > 0
  group by p.pedido,i.tp, p.cod_prod, p.destino, i.linha, p.origem;
  
  insert into GS_PRF_TRANSFER_DETAIL
  select to_char(pl.pedido)||'_'||to_char( case when trunc(pl.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(pl.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(pl.destino/10)+600)*10+dac((trunc(pl.destino/10)+600)) 
                    else pl.destino end)||'_'||to_char(pl.origem) TRANSFER_ID,
         to_char(pl.cod_prod) ITEM_ID,
         'SKU' ITEM_TYPE,
         SUM(pl.qtd_ped*pl.emb) TRANSFER_QTY, 
         i.linha       LINE_ID,
         '1'     STYLE_ID,
         avg(pl.prc_unit)/avg(pl.emb) transfer_unit_cost
  from pedidos_logistica pl
  left join  pedidos_abertos_carteira p on pl.destino = p.destino
                                and pl.pedido = p.pedido
                                and pl.origem = p.origem
                                and pl.cod_prod = p.cod_prod
                                and pl.foto = p.foto
  inner join gs_mvw_tipos f on f.codigo = trunc(pl.origem/10)
  inner join AA3CCPGT c on c.pgt_codigo = pl.cond_pagto
  INNER JOIN GS_MVW_CADITENS i on i.prod = trunc(pl.cod_prod/10)
  inner join GS_PRF_ITEM prfi on prfi.sku_id = to_char(pl.cod_prod) -- SOMENTE PRODUTOS EXPORTADOS ANTERIORMENTE
  inner join gs_mvw_filiais fl on fl.codigo = trunc(pl.destino/10)
  LEFT JOIN AG1GRSKU expO on expo.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expo.gsku_filial = trunc(pl.origem/10) 
   LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expd.gsku_filial = trunc(pl.destino/10)
  where pl.foto = dateto_rms7(/*sysdate*/p_databatch)
  and f.tipofilial in ('L', 'D')
  and p.qtd_ped is null--NAO RETORNA O QUE EXISTE NA pedidos_abertos_carteira
  and expo.gsku_descricao is null
  and expd.gsku_descricao is null
  and pl.dtaemi_ped >= dateto_rms7(p_databatch-30)
  group by pl.pedido,i.tp, pl.cod_prod, pl.destino, i.linha, pl.origem;

  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'TRANSFERDETAIL' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from GS_PRF_TRANSFER_DETAIL
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- pck_interface_api_hml.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS
   (TRANSFER_ID,ITEM_ID,ITEM_TYPE,TRANSFER_QTY,LINE_ID,STYLE_ID,TRANSFER_UNIT_COST)
   select TRANSFER_ID,ITEM_ID,ITEM_TYPE,TRANSFER_QTY,LINE_ID,STYLE_ID,TRANSFER_UNIT_COST
   from GS_PRF_TRANSFER_DETAIL';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --pck_interface_api_hml.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update GS_LOG_PROFIMETRICS lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface));   
end ExportaTransferDetail;

procedure ExportaTransferDetailFechada(p_databatch date := trunc(sysdate)) is
  v_destino varchar2(500);
  v_query varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino   date;
begin
  v_inicio    := sysdate;
  v_interface := 9019;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  
  -- INTERFACE 9019
  -- DINTERFACE TRANSFER DETAIL
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE GS_PRF_TRANSFER_DETAIL';
  execute immediate v_query;
  
  insert into GS_PRF_TRANSFER_DETAIL
  select to_char(c.nroped_carf*10+max(c.digped_carf))||'_'||to_char( case when c.cloj_carf between 1 and 100 
                                             and max(dst.natureza) != 'LV'
                                             and max(it.dep) = 3
                                             then (c.cloj_carf+600)*10+dac(c.cloj_carf+600) 
                      else c.cloj_carf*10+max(c.dloj_carf) end)||'_'||to_char(c.codfor_carf*10+dac(c.codfor_carf)) TRANSFER_ID,
           to_char(I.ITM_DETF*10+I.DIG_DETF) ITEM_ID,
           'SKU' ITEM_TYPE,
           SUM(I.EMB_DETF*I.QTDPED_DETF) TRANSFER_QTY, 
           it.linha       LINE_ID,
           '1'     STYLE_ID,
           AVG(for_cst_detf +ipi_valor_detf) TRANSFER_UNIT_COST
  from ag1flped C
  inner join ag1fdped I ON i.codloj_detf = c.cloj_carf
                       and i.nroped_detf = c.nroped_carf
                       and i.digped_detf = c.digped_carf
                       and i.for_detf = c.codfor_carf
  inner join gs_mvw_tipos dst on dst.codigo = c.cloj_carf
  inner join gs_mvw_tipos ori on ori.codigo = c.codfor_carf
  inner join gs_mvw_caditens it on it.prod = i.itm_detf
  inner join GS_PRF_ITEM pi on pi.sku_id = to_char(i.itm_detf*10+i.dig_detf)
  LEFT JOIN AG1GRSKU expO on expo.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                      and expo.gsku_filial = c.cloj_carf
  LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                      and expd.gsku_filial = c.cloj_carf
 INNER JOIN GS_PRF_TRANSFER_CAPA CAPA ON to_char(c.nroped_carf * 10 + c.digped_carf) = CAPA.PEDIDO --HENRIQUE, SO CARREGA PEDIDOS INFORMADOS NA 9025
                                         AND to_char(c.cloj_carf   * 10 + c.dloj_carf  ) = CAPA.DESTINO
                                         AND to_char(c.codfor_carf * 10 + dac(c.codfor_carf)) = CAPA.ORIGEM
  where dst.tipofilial in ('L', 'D')
  and ori.tipofilial in ('L', 'D')
  and expo.gsku_descricao is null
  and expd.gsku_descricao is null
  and rmsto_date(c.dtaemi_carf) >= rms7to_date(1201001)
  and rmsto_date(c.dtaemi_carf) <= rms7to_date(1201108)
  and i.qtdped_detf > 0
  group by c.nroped_carf, c.cloj_carf, c.codfor_carf, i.itm_detf, i.dig_detf, it.linha;

  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'TRANSFERDETAIL' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from GS_PRF_TRANSFER_DETAIL
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- pck_interface_api_hml.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS
   (TRANSFER_ID,ITEM_ID,ITEM_TYPE,TRANSFER_QTY,LINE_ID,STYLE_ID,TRANSFER_UNIT_COST)
   select TRANSFER_ID,ITEM_ID,ITEM_TYPE,TRANSFER_QTY,LINE_ID,STYLE_ID,TRANSFER_UNIT_COST
   from GS_PRF_TRANSFER_DETAIL';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --pck_interface_api_hml.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update GS_LOG_PROFIMETRICS lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface));   
end ExportaTransferDetailFechada;

procedure ExportaTransferTransct(p_databatch date := trunc(sysdate)) is
  v_destino varchar2(500);
  v_query varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino   date;
begin
  v_inicio    := sysdate;
  v_interface := 9025;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  
  v_query := 'TRUNCATE TABLE GS_PRF_TRANSFER_TRANSACT';
  
  execute immediate v_query;
  
  -- INSERE TODOS OS PEDIDOS ABERTOS COM O TRAN_TYPE DE SHIP_QTY
  insert into GS_PRF_TRANSFER_TRANSACT
  select to_char(p.pedido)||'_'||to_char( case when trunc(p.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(p.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(p.destino/10)+600)*10+dac((trunc(p.destino/10)+600)) 
                    else p.destino end)||'_'||to_char(p.origem) TRANSFER_ID,
         to_char( case when trunc(p.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(p.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(p.destino/10)+600)*10+dac((trunc(p.destino/10)+600)) 
                    else p.destino end)                         STORE_ID,
         to_char(p.cod_prod)                        ITEM_ID,
         'SKU'                                      ITEM_TYPE,
         'SHIP_QTY'                                 TRAN_TYPE,
         trunc(rms7to_date(MIN(p.dtaemi_car)))                         tran_date, 
         SUM(P.QTD_PED*P.EMB)                       TRAN_QTY,
         SUM(P.QTD_PED*P.PRC_UNIT)                  TRAN_VAL,
         ROUND(SUM(P.QTD_PED*P.PRC_UNIT)/SUM(P.QTD_PED*P.EMB), 2) UNIT_COST,
         NULL TRAN_ATTR_02_NO ,
         -1 GRN_ID                               
  from pedidos_abertos_carteira p
  left join pedidos_logistica pl on pl.destino = p.destino
                                and pl.pedido = p.pedido
                                and pl.origem = p.origem
                                and pl.cod_prod = p.cod_prod
                                and pl.foto = p.foto
  inner join gs_mvw_tipos f on f.codigo = trunc(p.origem/10)
  inner join AA3CCPGT c on c.pgt_codigo = p.cond_pagto
  INNER JOIN GS_MVW_CADITENS i on i.prod = trunc(p.cod_prod/10)
  inner join GS_PRF_ITEM pi on pi.sku_id = to_char(p.cod_prod) 
  inner join gs_mvw_filiais fl on fl.codigo = trunc(p.destino/10)
  LEFT JOIN AG1GRSKU expO on expo.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expo.gsku_filial = trunc(p.origem/10) 
   LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expd.gsku_filial = trunc(p.destino/10)
  where p.foto = dateto_rms7(/*sysdate*/p_databatch)
  and f.tipofilial in ('L', 'D')
  and p.dtaemi_car >= dateto_rms7(/*sysdate*/p_databatch-10)
  and pl.qtd_ped is null
  and P.EMB > 0
  and P.QTD_PED > 0
  and expo.gsku_descricao is null
  and expd.gsku_descricao is null
  and p.dtaemi_car = dateto_rms7(p_databatch) --ENVIA APENAS OS SHIP NOVOS
  group by p.pedido,i.tp, p.cod_prod, p.destino, p.origem;
  
  insert into GS_PRF_TRANSFER_TRANSACT
  select to_char(pl.pedido)||'_'||to_char( case when trunc(pl.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(pl.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(pl.destino/10)+600)*10+dac((trunc(pl.destino/10)+600)) 
                    else pl.destino end)||'_'||to_char(pl.origem) TRANSFER_ID,
         to_char( case when trunc(pl.destino/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and trunc(pl.destino/10) <> 84
                   and max(fl.natureza) != 'LV'
                   and max(i.dep) = 3
                  then (trunc(pl.destino/10)+600)*10+dac((trunc(pl.destino/10)+600)) 
                    else pl.destino end)                         STORE_ID,
         to_char(pl.cod_prod)                        ITEM_ID,
         'SKU'                                      ITEM_TYPE,
         'SHIP_QTY'                                 TRAN_TYPE,
         trunc(rms7to_date(MIN(pl.dtaemi_ped)))                         tran_date, 
         SUM(Pl.QTD_PED*Pl.EMB)                       TRAN_QTY,
         SUM(Pl.QTD_PED*Pl.PRC_UNIT)                  TRAN_VAL,
         ROUND(SUM(Pl.QTD_PED*Pl.PRC_UNIT)/SUM(Pl.QTD_PED*Pl.EMB), 2) UNIT_COST,
         NULL TRAN_ATTR_02_NO,
         -1 GRN_ID
  from pedidos_logistica pl
  LEFT join pedidos_abertos_carteira p on pl.destino = p.destino
                                and pl.pedido = p.pedido
                                and pl.origem = p.origem
                                and pl.cod_prod = p.cod_prod
                                and pl.foto = p.foto
  inner join gs_mvw_tipos f on f.codigo = trunc(pl.origem/10)
  inner join AA3CCPGT c on c.pgt_codigo = pl.cond_pagto
  INNER JOIN GS_MVW_CADITENS i on i.prod = trunc(pl.cod_prod/10)
  inner join GS_PRF_ITEM pi on pi.sku_id = to_char(pl.cod_prod)
  inner join gs_mvw_filiais fl on fl.codigo = trunc(pl.destino/10)
  LEFT JOIN AG1GRSKU expO on expo.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expo.gsku_filial = trunc(pl.origem/10) 
   LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expd.gsku_filial = trunc(pl.destino/10)
  inner join GS_PRF_ITEM pi on pi.sku_id = to_char(pl.cod_prod)
  where pl.foto = dateto_rms7(/*sysdate*/p_databatch)
  and f.tipofilial in ('L', 'D')
  and pl.dtaemi_ped >= dateto_rms7(/*sysdate*/p_databatch-10)
  --and p.qtd_ped is null
  and Pl.EMB > 0
  and Pl.QTD_PED > 0
  and expo.gsku_descricao is null
  and expd.gsku_descricao is null
  and pl.dtaemi_ped = dateto_rms7(p_databatch) --ENVIA APENAS OS SHIP NOVOS
  group by pl.pedido,i.tp, pl.cod_prod, pl.destino, pl.origem;
  
  -- INSERE TODOS OS PEDIDOS RECEBIDOS NA DATA DO BACTH
  insert into GS_PRF_TRANSFER_TRANSACT
  select to_char(ie.entsaic_nro_pedido)||'_'||to_char( case when f.fis_loj_dst between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and f.fis_loj_dst <> 84
                   and fil.natureza != 'LV'
                   and (i.dep) = 3
                  then (f.fis_loj_dst+600)*10+dac((f.fis_loj_dst+600)) 
                    else f.fis_loj_dst*10+f.fis_dig_dst end)||'_'||to_char(f.fis_loj_org*10+f.fis_dig_org) TRANSFER_ID,
         to_char( case when f.fis_loj_dst between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and f.fis_loj_dst <> 84
                   and fil.natureza != 'LV'
                   and (i.dep) = 3
                  then (f.fis_loj_dst+600)*10+dac((f.fis_loj_dst+600)) 
                    else f.fis_loj_dst*10+f.fis_dig_dst end)                        STORE_ID,
         to_char(ie.esitc_codigo*10+ie.esitc_digito)                                ITEM_ID,
         'SKU'                                                                      ITEM_TYPE,
         'RECEIVED_QTY'                                                             TRAN_TYPE,
         rms7to_date(F.FIS_DTA_AGENDA)                                              tran_date, 
         (ie.entsaic_quanti_un)                                                  TRAN_QTY,
         (ie.entsaic_prc_emb)*(ie.entsaic_quanti_un/ie.entsaic_base_emb)         TRAN_VAL,
         ROUND((ie.entsaic_prc_un), 2)                                           UNIT_COST,
         NULL                                                                       TRAN_ATTR_02_NO,
         f.fis_nro_nota GRN_ID
  from AA1CFISC f
  INNER JOIN AG1IENSA ie on ie.eschc_agenda = f.fis_oper
                        and ie.eschc_data = f.fis_dta_agenda
                        and ie.eschc_nro_nota = f.fis_nro_nota
                        and ie.eschc_ser_nota = f.fis_serie
                        and ie.ESCHLJC_CODIGO  = f.FIS_LOJ_ORG
                        AND IE.ESCHLJC_DIGITO  = f.FIS_DIG_ORG
  INNER JOIN GS_MVW_FILIAIS FL ON FL.CODIGO = F.FIS_LOJ_ORG  
  inner join gs_mvw_filiais fil on fil.codigo = f.fis_loj_dst
  INNER JOIN GS_MVW_CADITENS I ON I.PROD = IE.ESITC_CODIGO      
  inner join GS_PRF_ITEM pi on pi.sku_id = to_char(ie.esitc_codigo*10+ie.esitc_digito) 
  LEFT JOIN AG1GRSKU expO on expo.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expo.gsku_filial = trunc(f.fis_loj_org) 
   LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expd.gsku_filial = trunc(f.fis_loj_dst)              
  WHERE F.FIS_DTA_AGENDA = dateto_rms7(p_databatch)
  AND F.FIS_OPER IN (SELECT DISTINCT T.TBC_AGENDA FROM AA1CTCON T WHERE T.TBC_INTG_3 = 'E' AND T.TBC_INTG_9 = 'S' and t.tbc_agenda not in (192,193,141,573,574,521))
  AND (F.FIS_PEDIDO_1 > 0 OR
      F.FIS_PEDIDO_2 > 0 OR
      F.FIS_PEDIDO_3 > 0 OR
      F.FIS_PEDIDO_4 > 0 OR
      F.FIS_PEDIDO_5 > 0)
  AND FL.TIPOFILIAL IN ('L','D')
  and expo.gsku_descricao is null
  and expd.gsku_descricao is null
  AND F.FIS_SITUACAO NOT IN ('9','8','E')
  and ie.entsaic_nro_pedido > 0;

  -- TODO: CAPTURA TODOS OS PEDIDOS QUE FORAM CANCELADOS ONTEM
 
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'TRANSFTRANSACT' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from GS_PRF_TRANSFER_TRANSACT
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- pck_interface_api_hml.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS
   (TRANSFER_ID,STORE_ID,ITEM_ID,ITEM_TYPE,TRAN_TYPE,TRAN_DATE,TRAN_QTY,
   TRAN_VAL,UNIT_COST,TRAN_ATTR_02_NO, GRN_ID)
   select TRANSFER_ID,STORE_ID,ITEM_ID,ITEM_TYPE,TRAN_TYPE,TRAN_DATE,TRAN_QTY,
   TRAN_VAL,UNIT_COST,TRAN_ATTR_02_NO, GRN_ID
   from GS_PRF_TRANSFER_TRANSACT';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --pck_interface_api_hml.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update GS_LOG_PROFIMETRICS lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface));     
end ExportaTransferTransct;

procedure ExportaTransferTransctFechada(p_databatch date := trunc(sysdate)) is
  v_destino varchar2(500);
  v_query varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino   date;
begin
  v_inicio    := sysdate;
  v_interface := 9025;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  
  v_query := 'TRUNCATE TABLE GS_PRF_TRANSFER_TRANSACT';
  
  execute immediate v_query;
  
  -- INSERE TODOS OS PEDIDOS ABERTOS COM O TRAN_TYPE DE SHIP_QTY
  insert into GS_PRF_TRANSFER_TRANSACT
  select to_char(ie.entsaic_nro_pedido)||'_'||to_char( case when f.fis_loj_dst between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and f.fis_loj_dst <> 84
                   and fil.natureza != 'LV'
                   and (i.dep) = 3
                  then (f.fis_loj_dst+600)*10+dac((f.fis_loj_dst+600)) 
                    else f.fis_loj_dst*10+f.fis_dig_dst end)||'_'||to_char(f.fis_loj_org*10+f.fis_dig_org) TRANSFER_ID,
         to_char( case when f.fis_loj_dst between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and f.fis_loj_dst <> 84
                   and fil.natureza != 'LV'
                   and (i.dep) = 3
                  then (f.fis_loj_dst+600)*10+dac((f.fis_loj_dst+600)) 
                    else f.fis_loj_dst*10+f.fis_dig_dst end)                        STORE_ID,
         to_char(ie.esitc_codigo*10+ie.esitc_digito)                                ITEM_ID,
         'SKU'                                                                      ITEM_TYPE,
         'RECEIVED_QTY'                                                             TRAN_TYPE,
         rms7to_date(F.FIS_DTA_AGENDA)                                              tran_date, 
         (ie.entsaic_quanti_un)                                                  TRAN_QTY,
         (ie.entsaic_prc_emb)*(ie.entsaic_quanti_un/ie.entsaic_base_emb)         TRAN_VAL,
         ROUND((ie.entsaic_prc_un), 2)                                           UNIT_COST,
         NULL                                                                       TRAN_ATTR_02_NO,
         f.fis_nro_nota GRN_ID
  from AA1CFISC f
  INNER JOIN AG1IENSA ie on ie.eschc_agenda = f.fis_oper
                        and ie.eschc_data = f.fis_dta_agenda
                        and ie.eschc_nro_nota = f.fis_nro_nota
                        and ie.eschc_ser_nota = f.fis_serie
                        and ie.ESCHLJC_CODIGO  = f.FIS_LOJ_ORG
                        AND IE.ESCHLJC_DIGITO  = f.FIS_DIG_ORG
  INNER JOIN GS_MVW_FILIAIS FL ON FL.CODIGO = F.FIS_LOJ_ORG  
  inner join gs_mvw_filiais fil on fil.codigo = f.fis_loj_dst
  INNER JOIN GS_MVW_CADITENS I ON I.PROD = IE.ESITC_CODIGO      
  inner join GS_PRF_ITEM pi on pi.sku_id = to_char(ie.esitc_codigo*10+ie.esitc_digito) 
  LEFT JOIN AG1GRSKU expO on expo.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expo.gsku_filial = trunc(f.fis_loj_org) 
   LEFT JOIN AG1GRSKU expD on expd.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and expd.gsku_filial = trunc(f.fis_loj_dst) 
 INNER JOIN GS_PRF_TRANSFER_CAPA CAPA ON to_char(ie.entsaic_nro_pedido) = CAPA.PEDIDO --HENRIQUE, SO CARREGA PEDIDOS INFORMADOS NA 9025
                                         AND to_char(f.fis_loj_dst   * 10 + dac(f.fis_loj_dst)) = CAPA.DESTINO
                                         AND to_char(f.fis_loj_org*10+f.fis_dig_org) = CAPA.ORIGEM                                     
  WHERE F.FIS_DTA_AGENDA >= 1201001
  AND F.FIS_DTA_AGENDA <= 1201108
  AND F.FIS_OPER IN (SELECT DISTINCT T.TBC_AGENDA FROM AA1CTCON T WHERE T.TBC_INTG_3 = 'E' AND T.TBC_INTG_9 = 'S' and t.tbc_agenda not in (192,193,141,573,574,521))
  AND (F.FIS_PEDIDO_1 > 0 OR
      F.FIS_PEDIDO_2 > 0 OR
      F.FIS_PEDIDO_3 > 0 OR
      F.FIS_PEDIDO_4 > 0 OR
      F.FIS_PEDIDO_5 > 0)
  AND FL.TIPOFILIAL IN ('L','D')
  and expo.gsku_descricao is null
  and expd.gsku_descricao is null
  AND F.FIS_SITUACAO NOT IN ('9','8','E')
  and ie.entsaic_nro_pedido > 0
  and ie.entsaic_quanti_un > 0
 ;
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'TRANSFTRANSACT' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from GS_PRF_TRANSFER_TRANSACT
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- pck_interface_api_hml.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS
   (TRANSFER_ID,STORE_ID,ITEM_ID,ITEM_TYPE,TRAN_TYPE,TRAN_DATE,TRAN_QTY,
   TRAN_VAL,UNIT_COST,TRAN_ATTR_02_NO, GRN_ID)
   select TRANSFER_ID,STORE_ID,ITEM_ID,ITEM_TYPE,TRAN_TYPE,TRAN_DATE,TRAN_QTY,
   TRAN_VAL,UNIT_COST,TRAN_ATTR_02_NO, GRN_ID
   from GS_PRF_TRANSFER_TRANSACT';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --pck_interface_api_hml.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update GS_LOG_PROFIMETRICS lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface));     
end ExportaTransferTransctFechada;

procedure ExportaItemReview(p_databatch date := trunc(sysdate)) is
  v_destino varchar2(500);
  v_query varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino   date;
begin
  -- INTERFACE RE ATIVADA
  --raise_application_error(-20010,'INTERFACE DESATIVADA');
  v_inicio    := sysdate;
  v_interface := 9031;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  
  v_query := 'TRUNCATE TABLE gs_prf_item_review';
  
  execute immediate v_query;

  insert into gs_prf_item_review  --INSERE CROSS --HENRIQUE 03/11/2020 --PARA VOLTAR AO ORIGINAL "and i.sa in (1,11)"
  select distinct to_char(e.prod * 10 + DAC(e.prod)) SKU_ID,
                to_char(case
                          when trunc(e.filial / 10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                              --and trunc(e.filial/10) <> 84
                               and f.natureza != 'LV' and i.dep = 3 then
                           (trunc(e.filial / 10) + 600) * 10 + dac((trunc(e.filial / 10) + 600))
                          else
                           e.filial
                        end) STORE_ID,
                dc.data_compra as day_date,
                'A' RECORD_STATUS,
                'Coop' CREATE_USER_ID,
                sysdate  CREATE_DATETIME,
                'Coop' LAST_UPDATE_USER_ID,
                sysdate  LAST_UPDATE_DATETIME
                --i.fv freqVisita,
  from gs_mvw_posestq e
 inner join gs_mvw_caditens i
    on i.prod = e.prod
 inner join DIA_DE_COMPRA_TESTE dc
    on i.dv = dc.dia_pedido
   and i.fv = dc.freq_pedidos
 INNER JOIN GS_PRF_ITEM_HML PI
    ON PI.SKU_ID = to_char(e.prod * 10 + DAC(e.prod)) -- SOMENTO OS PRODUTOS
 inner join gs_mvw_filiais f
    on f.codigo = trunc(e.filial / 10)
  LEFT JOIN AG1GRSKU exp
    on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
   and exp.gsku_filial = trunc(e.filial / 10)
  LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf
    on sf.cod_prod_rms = i.prod * 10 + dac(i.prod)
 where exp.gsku_descricao is null
   and e.filial not between 6000 and 6999
   and e.filial not between 4000 and 4999 --Excluir drogarias parceiras
   AND i.tp in (1, 3, 6) -- SOMENTE PRODUTOS DE VENDA
   and i.sa in ( /*1,*/ 11, 10)
   AND i.linha not in ('82', '94')
   --and i.prod = 4096705
   AND DC.DATA_COMPRA > TRUNC(SYSDATE)
   AND (I.SAILIN = 0 -- TODOS EM LINHA
       OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
       OR nvl(e.estqqtd, 0) >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
       OR trunc(sysdate) - nvl(e.dt_ult_fat, trunc(sysdate - 400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
       );
  /*select sku_id, 
         store_id,
         case when b.id = 1 then priDate
              when b.id = 2 then segDate
              when b.id = 3 then terDate end   day_date,
         'A' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         sysdate  CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         sysdate  LAST_UPDATE_DATETIME
  from (              
  select SKU_ID, STORE_ID,
         trunc(sysdate)+freqVisita priDate,
         trunc(sysdate)+(freqVisita*2) segDate,
         trunc(sysdate)+(freqVisita*3) terDate
  from (
  select distinct 
           to_char(e.prod*10+DAC(e.prod)) SKU_ID,
           to_char( case when trunc(e.filial/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                     --and trunc(e.filial/10) <> 84
                     and f.natureza != 'LV'
                     and i.dep = 3
                    then (trunc(e.filial/10)+600)*10+dac((trunc(e.filial/10)+600)) 
                      else e.filial end)  STORE_ID,
           i.fv freqVisita         
    from gs_mvw_posestq e
    inner join gs_mvw_caditens i on i.prod = e.prod
    INNER JOIN GS_PRF_ITEM PI ON PI.SKU_ID = to_char(e.prod*10+DAC(e.prod)) -- SOMENTO OS PRODUTOS
    inner join gs_mvw_filiais f on f.codigo = trunc(e.filial/10)
    LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                          and exp.gsku_filial = trunc(e.filial/10)
    LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
    where exp.gsku_descricao is null
    and e.filial not between 6000 and 6999
    and e.filial not between 4000 and 4999 --Excluir drogarias parceiras
    AND i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
    and i.sa in (\*1,*\11)
    AND i.linha not in ('82','94')
    AND (I.SAILIN = 0 -- TODOS EM LINHA
    OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
    OR nvl(e.estqqtd, 0) >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
    OR trunc(sysdate)-nvl(e.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
    )
  )
  ) a
  inner join (select rownum id from user_tables where rownum < 3) b on 1 = 1;*/--OR trunc(sysdate)-rmsto_date(i.ultent) < 365); -- SOMENTE SE A ULTIMA COMPRA FOI NO ULTIMO ANO;

  insert into gs_prf_item_review  --INSERE SISTEMATICA 1, MAS N?O ENVIA REGISTROS LOJAS
                                  --STOCK_CAT DA 9014 'W' DE LOJA, N?O PODE IR NA 9031 --ESSA DEFINICAO SERA FEITA DIRETO NA FERRAMENTA
  select distinct to_char(e.prod * 10 + DAC(e.prod)) SKU_ID,
                to_char(case
                          when trunc(e.filial / 10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                              --and trunc(e.filial/10) <> 84
                               and f.natureza != 'LV' and i.dep = 3 then
                           (trunc(e.filial / 10) + 600) * 10 + dac((trunc(e.filial / 10) + 600))
                          else
                           e.filial
                        end) STORE_ID,
                dc.data_compra as day_date,
                'A' RECORD_STATUS,
                'Coop' CREATE_USER_ID,
                sysdate  CREATE_DATETIME,
                'Coop' LAST_UPDATE_USER_ID,
                sysdate  LAST_UPDATE_DATETIME
                --i.fv freqVisita,
  from gs_mvw_posestq e
 inner join gs_mvw_caditens i
    on i.prod = e.prod
 inner join DIA_DE_COMPRA_TESTE dc
    on i.dv = dc.dia_pedido
   and i.fv = dc.freq_pedidos
 INNER JOIN GS_PRF_ITEM_HML PI
    ON PI.SKU_ID = to_char(e.prod * 10 + DAC(e.prod)) -- SOMENTO OS PRODUTOS
 inner join gs_mvw_filiais f
    on f.codigo = trunc(e.filial / 10)
  LEFT JOIN AG1GRSKU exp
    on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
   and exp.gsku_filial = trunc(e.filial / 10)
  LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf
    on sf.cod_prod_rms = i.prod * 10 + dac(i.prod)
 where exp.gsku_descricao is null
   and e.filial between 9000 and 9999
   and e.filial not between 6000 and 6999
   and e.filial not between 4000 and 4999 --Excluir drogarias parceiras
   AND i.tp in (1, 3, 6) -- SOMENTE PRODUTOS DE VENDA
   and i.sa in ( 1/*, 11, 10*/)
   AND i.linha not in ('82', '94')
   --and i.prod = 6850
   AND DC.DATA_COMPRA > TRUNC(SYSDATE)
   AND (I.SAILIN = 0 -- TODOS EM LINHA
       OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
       OR nvl(e.estqqtd, 0) >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
       OR trunc(sysdate) - nvl(e.dt_ult_fat, trunc(sysdate - 400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
       );
  /*select sku_id, 
         store_id,
         case when b.id = 1 then priDate
              when b.id = 2 then segDate
              when b.id = 3 then terDate end   day_date,
         'A' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         sysdate  CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         sysdate  LAST_UPDATE_DATETIME
  from (              
  select SKU_ID, STORE_ID,
         trunc(sysdate)+freqVisita priDate,
         trunc(sysdate)+(freqVisita*2) segDate,
         trunc(sysdate)+(freqVisita*3) terDate
  from (
  select distinct 
           to_char(e.prod*10+DAC(e.prod)) SKU_ID,
           to_char( case when trunc(e.filial/10) between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                     --and trunc(e.filial/10) <> 84
                     and f.natureza != 'LV'
                     and i.dep = 3
                    then (trunc(e.filial/10)+600)*10+dac((trunc(e.filial/10)+600)) 
                      else e.filial end)  STORE_ID,
           i.fv freqVisita         
    from gs_mvw_posestq e
    inner join gs_mvw_caditens i on i.prod = e.prod
    INNER JOIN GS_PRF_ITEM PI ON PI.SKU_ID = to_char(e.prod*10+DAC(e.prod)) -- SOMENTO OS PRODUTOS
    inner join gs_mvw_filiais f on f.codigo = trunc(e.filial/10)
    LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                          and exp.gsku_filial = trunc(e.filial/10)
    LEFT JOIN gti.TAB_PRIC_SAZO@lksfcoop sf on sf.cod_prod_rms = i.prod*10+dac(i.prod)
    where exp.gsku_descricao is null
    and e.filial  between 9000 and 9999
    and e.filial not between 6000 and 6999
    and e.filial not between 4000 and 4999 --Excluir drogarias parceiras
    AND i.tp in (1,3,6) -- SOMENTE PRODUTOS DE VENDA
    and i.sa in (1\*,11*\)
    AND i.linha not in ('82','94')
    AND (I.SAILIN = 0 -- TODOS EM LINHA
    OR nvl(sf.cod_saz, 0) > 0 -- SE E SAZONAL
    OR nvl(e.estqqtd, 0) >= 1 -- SOMENTE PRODUTOS QUE TEM MAIS DE 01 UNIDADE NO ESTOQUE, TEM RESTO DE ESTOQUE 0.145 POR EX
    OR trunc(sysdate)-nvl(e.dt_ult_fat, trunc(sysdate-400)) < 365 -- SOMENTE SE A ULTIMA VENDA FOI NO ULTIMO ANO
    )
  )
  ) a
  inner join (select rownum id from user_tables where rownum < 3) b on 1 = 1;*/--OR trunc(sysdate)-rmsto_date(i.ultent) < 365); -- SOMENTE SE A ULTIMA COMPRA FOI NO ULTIMO ANO;






  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'ITEMREVIEW' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_item_review
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- pck_interface_api_hml.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS
   (SKU_ID,STORE_ID,DAY_DATE,RECORD_STATUS,CREATE_USER_ID,CREATE_DATETIME,LAST_UPDATE_USER_ID,LAST_UPDATE_DATETIME)
   select SKU_ID,STORE_ID,DAY_DATE,RECORD_STATUS,CREATE_USER_ID,CREATE_DATETIME,LAST_UPDATE_USER_ID,LAST_UPDATE_DATETIME
   from gs_prf_item_review';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --pck_interface_api_hml.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update GS_LOG_PROFIMETRICS lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit; 

exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface));     

end ExportaItemReview;

procedure ExportaOfertaRms(p_databatch date := trunc(sysdate)) is
  v_destino varchar2(500);
  v_query varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino   date;
begin
  v_inicio    := sysdate;
  v_interface := 1783;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  
  -- INTERFACE 1783
  -- DINTERFACE OFERTA RMS
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE GS_PRF_OFERTA_RMS';
  execute immediate v_query;

  INSERT INTO GS_PRF_OFERTA_RMS
  SELECT distinct
         o.ofta_cod_oferta OFFER_ID,
         o.ofta_tipo       OFFER_TYPE_ID,
         o.ofta_descricao  OFFER_DESC,
         null              OFFER_COMMENTS,
         case when dateto_rms7(sysdate) between o.ofta_ini_vig and o.ofta_fim_vig and o.ofta_liberada = 'S' then 5 -- EM ANDAMENTO
              --when dateto_rms7(sysdate) > o.ofta_fim_vig and o.ofta_liberada = 'S' then 8 -- FINALIZADA
              --when dateto_rms7(sysdate) > o.ofta_fim_vig and o.ofta_liberada != 'S' then 4 -- REJEITADA
              else 3 end OFFER_STATUS, -- APROVADA
         rms7to_date(O.OFTA_INI_VIG) OFFER_START_DATE,
         rms7to_date(o.ofta_fim_vig) OFFER_END_DATE,
         'U' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         SYSDATE CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         SYSDATE LAST_UPDATE_DATETIME
  FROM AA1COFTA O
  INNER JOIN AA1PROFT OI on oi.pof_cod_oferta = o.ofta_cod_oferta                      
  INNER JOIN GS_MVW_CADITENS I ON I.PROD = OI.POF_COD_ITEM
  where o.ofta_ini_vig >= dateto_rms7(sysdate-31)
  AND CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
  and oi.pof_cod_item in (select trunc(to_number(i.sku_id)/10) from GS_PRF_ITEM i)
  and o.ofta_tipo != '05'
  and o.ofta_liberada = 'S'
  --and o.ofta_fim_vig <= dateto_rms7(sysdate)
  and o.ofta_fim_vig >= o.ofta_ini_vig;
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'OFERTARMS' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from GS_PRF_OFERTA_RMS
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- pck_interface_api_hml.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS
   (OFFER_ID, OFFER_TYPE_ID, OFFER_DESC, OFFER_COMMENTS, OFFER_STATUS, OFFER_START_DATE,
   OFFER_END_DATE,RECORD_STATUS,CREATE_USER_ID,CREATE_DATETIME,LAST_UPDATE_USER_ID,LAST_UPDATE_DATETIME)
   select OFFER_ID, OFFER_TYPE_ID, OFFER_DESC, OFFER_COMMENTS, OFFER_STATUS, OFFER_START_DATE,
   OFFER_END_DATE,RECORD_STATUS,CREATE_USER_ID,CREATE_DATETIME,LAST_UPDATE_USER_ID,LAST_UPDATE_DATETIME
   from GS_PRF_OFERTA_RMS';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --pck_interface_api_hml.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update GS_LOG_PROFIMETRICS lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface));   
end ExportaOfertaRms;

procedure ExportaItemOfertaRms(p_databatch date := trunc(sysdate)) is
  v_destino varchar2(500);
  v_query varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino   date;
begin
  v_inicio    := sysdate;
  v_interface := 1784;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  
  -- INTERFACE 1784
  -- DINTERFACE ITEMOFERTARMS
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE GS_PRF_ITEM_OFERTA_RMS';
  execute immediate v_query;

  INSERT INTO GS_PRF_ITEM_OFERTA_RMS
  SELECT distinct
         o.ofta_cod_oferta OFFER_ID,
         oi.pof_cod_item*10+dac(oi.pof_cod_item)       PROD_ID,
         to_char( case when oi.pof_loja between 1 and 100 -- REGRA DAS FILIAIS REAIS, REALOCAR OS PRODUTOS DE DROGARIA PARA AS FILIAIS VIRTUAIS
                   --and oi.pof_loja not in (84, 86)
                   and f.natureza != 'LV'
                   and i.dep = 3
                  then (oi.pof_loja+600)*10+dac((oi.pof_loja+600)) 
                    else oi.pof_loja*10+dac(oi.pof_loja) end )STORE_ID,
         'SKU' PROD_LEVEL,
         oi.pof_preco_ofta VALUE,
         'U' RECORD_STATUS,
         'Coop' CREATE_USER_ID,
         SYSDATE CREATE_DATETIME,
         'Coop' LAST_UPDATE_USER_ID,
         SYSDATE LAST_UPDATE_DATETIME
  FROM AA1COFTA O
  INNER JOIN AA1PROFT OI on oi.pof_cod_oferta = o.ofta_cod_oferta   
  INNER JOIN GS_MVW_CADITENS I ON I.PROD = OI.POF_COD_ITEM  
  INNER JOIN GS_MVW_FILIAIS F ON F.CODIGO = oi.pof_loja
  LEFT JOIN AG1GRSKU exp on exp.gsku_grupo = 900 -- REGRA PARA EXPURGAR FILIAIS DO PROFIMETRICS
                        and exp.gsku_filial = oi.pof_loja             
  where o.ofta_ini_vig >= dateto_rms7(sysdate-31)
  AND CASE WHEN i.tp = 3 and i.marcaprop = '5' then 0 else 1 end = 1 -- REMOVE PRODUTOS DE REBAIXA PRECO VENC
  and oi.pof_cod_item in (select trunc(to_number(i.sku_id)/10) from GS_PRF_ITEM i)
  and o.ofta_tipo != '05'
  and o.ofta_liberada = 'S'
  --and o.ofta_fim_vig <= dateto_rms7(sysdate)
  and oi.pof_preco_ofta > 0
  and o.ofta_fim_vig >= o.ofta_ini_vig
  AND exp.gsku_descricao is null;
  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'ITEMOFERTARMS' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from GS_PRF_ITEM_OFERTA_RMS
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- pck_interface_api_hml.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS
   (OFFER_ID,PROD_ID,STORE_ID,PROD_LEVEL,VALUE,RECORD_STATUS,CREATE_USER_ID,CREATE_DATETIME,LAST_UPDATE_USER_ID,LAST_UPDATE_DATETIME)
   select OFFER_ID,PROD_ID,STORE_ID,PROD_LEVEL,VALUE,RECORD_STATUS,CREATE_USER_ID,CREATE_DATETIME,LAST_UPDATE_USER_ID,LAST_UPDATE_DATETIME
   from GS_PRF_ITEM_OFERTA_RMS';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --pck_interface_api_hml.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update GS_LOG_PROFIMETRICS lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;

exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface));   
end ExportaItemOfertaRms;

procedure ExportaItemRelation(p_databatch date := trunc(sysdate)) is
  v_destino varchar2(500);
  v_query varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino   date;
begin
  v_inicio    := sysdate;
  v_interface := 326;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  
  -- INTERFACE 326
  -- DINTERFACE ITEMRELATION
  -- EXCLUI DA TABELA STAGE
  v_query := 'TRUNCATE TABLE GS_PRF_ITEM_RELATION';
  execute immediate v_query;
  
  insert into GS_PRF_ITEM_RELATION
  select pi.sku_id,
       pc.sku_id COMPONENT_SKU_ID,
       round(R.RECE_QUANTIDADE, 6) RATIO,
       null COMP_ATTR_01_DATE,
       null COMP_ATTR_01_CHAR,
       null COMP_ATTR_01_NO,
       null COMP_ATTR_01_FLAG,
       null COMP_ATTR_02_DATE,
       null COMP_ATTR_02_CHAR,
       null COMP_ATTR_02_NO,
       null COMP_ATTR_02_FLAG,
       null COMP_ATTR_03_DATE,
       null COMP_ATTR_03_CHAR,
       null COMP_ATTR_03_NO,
       null COMP_ATTR_03_FLAG,
       null COMP_ATTR_04_DATE,
       null COMP_ATTR_04_CHAR,
       null COMP_ATTR_04_NO,
       null COMP_ATTR_04_FLAG,
       null COMP_ATTR_05_DATE,
       null COMP_ATTR_05_CHAR,
       null COMP_ATTR_05_NO,
       null COMP_ATTR_05_FLAG,
       null COMP_ATTR_06_DATE,
       null COMP_ATTR_06_CHAR,
       null COMP_ATTR_06_NO,
       null COMP_ATTR_06_FLAG,
       'A' RECORD_STATUS,
       'Coop' CREATE_USER_ID ,
       sysdate CREATE_DATETIME,
       'Coop' LAST_UPDATE_USER_ID,
       sysdate LAST_UPDATE_DATETIME
  from aa1crece r
  inner join GS_PRF_ITEM pi on pi.sku_id = to_char(r.rece_produto)
  inner join GS_PRF_ITEM pc on pc.sku_id = to_char(r.rece_componente);

  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'ITEMRELATION' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from GS_PRF_ITEM_RELATION
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- pck_interface_api_hml.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS
   (SKU_ID,COMPONENT_SKU_ID,RATIO,COMP_ATTR_01_DATE,COMP_ATTR_01_CHAR,COMP_ATTR_01_NO,
   COMP_ATTR_01_FLAG,COMP_ATTR_02_DATE,COMP_ATTR_02_CHAR,COMP_ATTR_02_NO,COMP_ATTR_02_FLAG,
   COMP_ATTR_03_DATE,COMP_ATTR_03_CHAR,COMP_ATTR_03_NO,COMP_ATTR_03_FLAG,COMP_ATTR_04_DATE,
   COMP_ATTR_04_CHAR,COMP_ATTR_04_NO,COMP_ATTR_04_FLAG,COMP_ATTR_05_DATE,COMP_ATTR_05_CHAR,
   COMP_ATTR_05_NO,COMP_ATTR_05_FLAG,COMP_ATTR_06_DATE,COMP_ATTR_06_CHAR,COMP_ATTR_06_NO,
   COMP_ATTR_06_FLAG,RECORD_STATUS,CREATE_USER_ID,CREATE_DATETIME,LAST_UPDATE_USER_ID,LAST_UPDATE_DATETIME)
   select SKU_ID,COMPONENT_SKU_ID,RATIO,COMP_ATTR_01_DATE,COMP_ATTR_01_CHAR,COMP_ATTR_01_NO,
   COMP_ATTR_01_FLAG,COMP_ATTR_02_DATE,COMP_ATTR_02_CHAR,COMP_ATTR_02_NO,COMP_ATTR_02_FLAG,
   COMP_ATTR_03_DATE,COMP_ATTR_03_CHAR,COMP_ATTR_03_NO,COMP_ATTR_03_FLAG,COMP_ATTR_04_DATE,
   COMP_ATTR_04_CHAR,COMP_ATTR_04_NO,COMP_ATTR_04_FLAG,COMP_ATTR_05_DATE,COMP_ATTR_05_CHAR,
   COMP_ATTR_05_NO,COMP_ATTR_05_FLAG,COMP_ATTR_06_DATE,COMP_ATTR_06_CHAR,COMP_ATTR_06_NO,
   COMP_ATTR_06_FLAG,RECORD_STATUS,CREATE_USER_ID,CREATE_DATETIME,LAST_UPDATE_USER_ID,LAST_UPDATE_DATETIME
   from GS_PRF_ITEM_RELATION';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --pck_interface_api_hml.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update GS_LOG_PROFIMETRICS lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface));   
end ExportaItemRelation;       


procedure ImportaApprovedPrices(p_databatch date := trunc(sysdate)) is
  v_origem  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
  v_sucesso pls_integer;
begin
  v_inicio    := sysdate;
  v_interface := 1701;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  v_seq := 1;
  
   -- INTERFACE 1701
   -- DINTERFACE COST PRICE STORE
   -- EXCLUI DA TABELA STAGE
   --v_query := 'TRUNCATE TABLE gs_prf_approvedprice';
   --execute immediate v_query;
   commit;
  
  while true    
  loop
       v_sucesso := 0;
                     
       v_origem := '';
       v_origem := f_get_table(v_interface, v_ano, v_mes, v_dia, v_seq);
       
       if (v_origem is null) then
          v_seq := v_seq + 1;
          if (v_seq > 99) then
             exit;
          end if;
          continue;
       end if;
       
       f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'W');
       
       begin
           /* COPIA DA PROFMETRICS PARA GSRETAIL */
           v_query := 'INSERT INTO gs_prf_approvedprice 
                       SELECT product_id,loc_level,loc_id,approved_price,approved_date,
                       effective_date,due_date,offer_id,store_request_id,
                       price_type,effective_price_flag,approved_inst_number,approved_inst_price,
                       prc_attr_01_no,prc_attr_02_no,prc_attr_03_no,prc_attr_04_no,prc_attr_05_no,
                       prc_attr_06_no,prc_attr_07_no,prc_attr_08_no,prc_attr_09_no,
                       prc_attr_01_char,prc_attr_02_char,prc_attr_03_char,
                       prc_attr_04_char,prc_attr_05_char,prc_attr_06_char,
                       prc_attr_01_flag,prc_attr_02_flag,prc_attr_03_flag,
                       prc_attr_05_flag,prc_attr_04_flag,prc_attr_06_flag,
                       create_user_id, RMS7TO_DATE(' || DATETO_RMS7(p_databatch) || ') FROM '|| v_origem ||'@LK_PROFIMETRICS';
           
           execute immediate v_query;
           commit;
          
           v_sucesso := 1;
           commit;
       exception when others then
           rollback;
           registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Origem: ' || v_origem || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
           v_sucesso := 0;           
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'E');
           raise;
       end;
       
       if (v_sucesso = 1) then
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'A');
       end if;
       v_seq := v_seq + 1;
       if (v_seq > 99) then
          exit;
       end if;
  end loop; 
  commit;
  
  AtualizaPrecoRegularRms(p_databatch);
  
  /* INICIO DAS OFERTAS */
  ImportaOffer(p_databatch);
  ImportaAdMode(p_databatch);
  ImportaEvent(p_databatch);
  ImportaSubEvent(p_databatch);
  ImportaOfferStore(p_databatch);
  ImportaOfferPayExc(p_databatch);
  ImportaOfferFidExc(p_databatch);
  ImportaOfferAdMode(p_databatch);
  ImportaThreshold(p_databatch);
  ImportaThresholdTier(p_databatch);
  ImportaOfferAppLevel(p_databatch);
  ImportaOfferProduct(p_databatch);
  AtualizaOfertaRms(p_databatch);
exception when others then  
  ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Origem: ' || v_origem || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
    --
end ImportaApprovedPrices;

procedure ImportaOffer(p_databatch date := trunc(sysdate)) is
  v_origem  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
  v_sucesso pls_integer;
begin
  v_inicio    := sysdate;
  v_interface := 1703;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  v_seq := 1;
  
   -- INTERFACE 1703
   -- DINTERFACE EVENT
   -- EXCLUI DA TABELA STAGE
   v_query := 'TRUNCATE TABLE gs_prf_offer';
   
   execute immediate v_query;
   commit;
   
   while true    
  loop
       v_sucesso := 0;
       
       v_origem := '';
       v_origem := f_get_table(v_interface, v_ano, v_mes, v_dia, v_seq);
       
       if (v_origem is null) then
          v_seq := v_seq + 1;
          if (v_seq > 99) then
             exit;
          end if;
          continue;
       end if;
       
       f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'W');
       
       begin
           /* COPIA DA PROFMETRICS PARA GSRETAIL */
           v_query := 'INSERT INTO gs_prf_offer_tmp
                       SELECT OFFER_ID,
                              EVENT_ID,
                              SUB_EVENT_ID,
                              ACTIVITY_ID,
                              ORIGIN_ID,
                              OFFER_TYPE_PARENT_ID,
                              OFFER_TYPE_ID,
                              OFFER_VAL,
                              BASE_PRICE_TYPE,
                              THRESHOLD_ID,
                              OFFER_DESC,
                              EVENT_DESC,
                              SUB_EVENT_DESC,
                              ACTIVITY_DESC,
                              OFFER_COMMENTS,
                              OFFER_STATUS,
                              OFFER_START_DATE,
                              OFFER_END_DATE,
                              GET_VAL,
                              GET_VAL_TYPE,
                              GET_TYPE,
                              GET_QTY,
                              GET_PROD_LEVEL,
                              GET_PROD_GROUP_CONDITION,
                              BUY_PROD_LEVEL,
                              BUY_VAL,
                              BUY_TYPE,
                              BUY_QTY,
                              EVENT_TYPE,
                              PROMO_MOTIVE,
                              RECORD_STATUS,
                              CREATE_USER_ID,
                              RMS7TO_DATE(' || DATETO_RMS7(p_databatch) || '),
                              TRUNC(OFFER_ATTR_02_DATE) AS OFFER_ATTR_02_DATE,
                              TRUNC(OFFER_ATTR_01_DATE) AS OFFER_ATTR_01_DATE
                       FROM '|| v_origem ||'@LK_PROFIMETRICS';
           
           execute immediate v_query;
           
           delete from gs_prf_offer where offer_id in (select offer_id from gs_prf_offer_tmp);
           insert into gs_prf_offer
           select * from gs_prf_offer_tmp;
           
           commit;
          
           v_sucesso := 1;
           commit;
       exception when others then
           rollback;
           v_sucesso := 0;           
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'E');
           raise;
       end;
       
       BEGIN
         v_query := 'MERGE INTO OFERTAS_PRF_OFFER_CAPA G
                     USING (SELECT PRO.OFFER_ID,
                                   PRO.EVENT_ID,
                                   PRO.SUB_EVENT_ID,
                                   PRO.ACTIVITY_ID,
                                   PRO.ORIGIN_ID,
                                   PRO.OFFER_TYPE_PARENT_ID,
                                   PRO.OFFER_TYPE_ID,
                                   PRO.OFFER_VAL,
                                   PRO.BASE_PRICE_TYPE,
                                   PRO.THRESHOLD_ID,
                                   PRO.OFFER_DESC,
                                   PRO.EVENT_DESC,
                                   PRO.SUB_EVENT_DESC,
                                   PRO.ACTIVITY_DESC,
                                   PRO.OFFER_COMMENTS,
                                   PRO.OFFER_STATUS,
                                   PRO.OFFER_START_DATE,
                                   PRO.OFFER_END_DATE,
                                   PRO.GET_VAL,
                                   PRO.GET_VAL_TYPE,
                                   PRO.GET_TYPE,
                                   PRO.GET_QTY,
                                   PRO.GET_PROD_LEVEL,
                                   PRO.GET_PROD_GROUP_CONDITION,
                                   PRO.BUY_PROD_LEVEL,
                                   PRO.BUY_VAL,
                                   PRO.BUY_TYPE,
                                   PRO.BUY_QTY,
                                   PRO.EVENT_TYPE,
                                   PRO.PROMO_MOTIVE,
                                   PRO.RECORD_STATUS,
                                   PRO.CREATE_USER_ID,
                                   RMS7TO_DATE(' || DATETO_RMS7(p_databatch) || '),
                                   TRUNC(PRO.OFFER_ATTR_02_DATE) AS OFFER_ATTR_02_DATE,
                                   TRUNC(PRO.OFFER_ATTR_01_DATE) AS OFFER_ATTR_01_DATE,
                                   PRO.OFFER_ID||PRO.EVENT_ID||PRO.SUB_EVENT_ID||PRO.ACTIVITY_ID AS CHV
                              FROM '|| v_origem ||'@LK_PROFIMETRICS PRO) A
                                ON (G.CHV = A.CHV)
                              WHEN MATCHED THEN
                            UPDATE
                               SET G.OFFER_ID                 = A.OFFER_ID,
                                   G.EVENT_ID                 = A.EVENT_ID,
                                   G.SUB_EVENT_ID             = A.SUB_EVENT_ID,
                                   G.ACTIVITY_ID              = A.ACTIVITY_ID,
                                   G.ORIGIN_ID                = A.ORIGIN_ID,
                                   G.OFFER_TYPE_ID            = A.OFFER_TYPE_ID
                              WHEN NOT MATCHED THEN
                            INSERT
                                   (G.OFFER_ID, G.EVENT_ID, G.SUB_EVENT_ID, G.ACTIVITY_ID, G.ORIGIN_ID, G.OFFER_TYPE_PARENT_ID, G.OFFER_TYPE_ID,
                                    G.OFFER_VAL, G.BASE_PRICE_TYPE, G.THRESHOLD_ID, G.OFFER_DESC, G.EVENT_DESC, G.SUB_EVENT_DESC, G.ACTIVITY_DESC,
                                    G.OFFER_COMMENTS, G.OFFER_STATUS, G.OFFER_START_DATE, G.OFFER_END_DATE, G.GET_VAL, G.GET_VAL_TYPE, G.GET_TYPE,
                                    G.GET_QTY, G.GET_PROD_LEVEL, G.GET_PROD_GROUP_CONDITION, G.BUY_PROD_LEVEL, G.BUY_VAL, G.BUY_TYPE, G.BUY_QTY,
                                    G.EVENT_TYPE, G.PROMO_MOTIVE, G.RECORD_STATUS, G.CREATE_USER_ID, G.CREATE_DATETIME, G.OFFER_ATTR_02_DATE,
                                    G.OFFER_ATTR_01_DATE, G.CHV)
                             VALUES
                                  (A.OFFER_ID, A.EVENT_ID, A.SUB_EVENT_ID, A.ACTIVITY_ID, A.ORIGIN_ID, A.OFFER_TYPE_PARENT_ID, A.OFFER_TYPE_ID, A.OFFER_VAL, A.BASE_PRICE_TYPE, 
								   A.THRESHOLD_ID, A.OFFER_DESC, A.EVENT_DESC, A.SUB_EVENT_DESC, A.ACTIVITY_DESC, A.OFFER_COMMENTS, A.OFFER_STATUS, A.OFFER_START_DATE, A.OFFER_END_DATE,
                                   A.GET_VAL, A.GET_VAL_TYPE, A.GET_TYPE, A.GET_QTY, A.GET_PROD_LEVEL, A.GET_PROD_GROUP_CONDITION, A.BUY_PROD_LEVEL, A.BUY_VAL, A.BUY_TYPE, A.BUY_QTY,
                                   A.EVENT_TYPE, A.PROMO_MOTIVE, A.RECORD_STATUS, A.CREATE_USER_ID, RMS7TO_DATE(' || DATETO_RMS7(p_databatch) || '), TRUNC(A.OFFER_ATTR_02_DATE),
                                   TRUNC(A.OFFER_ATTR_01_DATE), A.OFFER_ID||A.EVENT_ID||A.SUB_EVENT_ID||A.ACTIVITY_ID)';
               
         execute immediate v_query;
         commit;
         
       
       end;
       
       if (v_sucesso = 1) then
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'A');
       end if;
       v_seq := v_seq + 1;
       if (v_seq > 99) then
          exit;
       end if;
  end loop; 
  commit;
exception when others then  
  ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Origem: ' || v_origem || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 

end ImportaOffer;

procedure ImportaEvent(p_databatch date := trunc(sysdate)) is
  v_origem  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
  v_sucesso pls_integer;
begin
  v_inicio    := sysdate;
  v_interface := 1504;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  v_seq := 1;
  
   -- INTERFACE 1504
   -- DINTERFACE EVENT
   -- EXCLUI DA TABELA STAGE
   v_query := 'TRUNCATE TABLE gs_prf_event';
   execute immediate v_query;
   commit;
   
   while true    
  loop
       v_sucesso := 0;
       
       v_origem := '';
       v_origem := f_get_table(v_interface, v_ano, v_mes, v_dia, v_seq);
       
       if (v_origem is null) then
          v_seq := v_seq + 1;
          if (v_seq > 99) then
             exit;
          end if;
          continue;
       end if;
       
       f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'W');
       
       begin
           /* COPIA DA PROFMETRICS PARA GSRETAIL */
           v_query := 'INSERT INTO gs_prf_event
                       SELECT EVENT_ID,
                              ORIGIN_ID,
                              LINKED_EVENT_ID,
                              EVENT_DESC,
                              EVENT_TYPE,
                              EVENT_START_DATE,
                              EVENT_END_DATE,
                              RECORD_STATUS,
                              CREATE_USER_ID,
                              CREATE_DATETIME,
                              LAST_UPDATE_USER_ID,
                              LAST_UPDATE_DATETIME
                       FROM '|| v_origem ||'@LK_PROFIMETRICS';
           
           execute immediate v_query;
           commit;
          
           v_sucesso := 1;
           commit;
       exception when others then
           rollback;
           v_sucesso := 0;           
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'E');
           raise;
       end;
       
       if (v_sucesso = 1) then
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'A');
       end if;
       v_seq := v_seq + 1;
       if (v_seq > 99) then
          exit;
       end if;
  end loop; 
  commit;
exception when others then  
  ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Origem: ' || v_origem || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 

end ImportaEvent;

procedure ImportaSubEvent(p_databatch date := trunc(sysdate)) is
  v_origem  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
  v_sucesso pls_integer;
begin
  v_inicio    := sysdate;
  v_interface := 1505;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  v_seq := 1;
  
   -- INTERFACE 1504
   -- DINTERFACE SUBEVENT
   -- EXCLUI DA TABELA STAGE
   v_query := 'TRUNCATE TABLE gs_prf_subevent';
   execute immediate v_query;
   commit;
   
   while true    
  loop
       v_sucesso := 0;
       
       v_origem := '';
       v_origem := f_get_table(v_interface, v_ano, v_mes, v_dia, v_seq);
       
       if (v_origem is null) then
          v_seq := v_seq + 1;
          if (v_seq > 99) then
             exit;
          end if;
          continue;
       end if;
       
       f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'W');
       
       begin
           /* COPIA DA PROFMETRICS PARA GSRETAIL */
           v_query := 'INSERT INTO gs_prf_subevent
                       SELECT SUB_EVENT_ID,
                              ORIGIN_ID,
                              SUB_EVENT_DESC,
                              SUB_EVENT_START_DATE,
                              SUB_EVENT_END_DATE,
                              RECORD_STATUS,
                              CREATE_USER_ID,
                              CREATE_DATETIME,
                              LAST_UPDATE_USER_ID,
                              LAST_UPDATE_DATETIME
                       FROM '|| v_origem ||'@LK_PROFIMETRICS';
           
           execute immediate v_query;
           commit;
          
           v_sucesso := 1;
           commit;
       exception when others then
           rollback;
           v_sucesso := 0;           
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'E');
           raise;
       end;
       
       if (v_sucesso = 1) then
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'A');
       end if;
       v_seq := v_seq + 1;
       if (v_seq > 99) then
          exit;
       end if;
  end loop; 
  commit;
exception when others then  
  ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Origem: ' || v_origem || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 

end ImportaSubEvent;

procedure ImportaOfferStore(p_databatch date := trunc(sysdate)) is
  v_origem  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
  v_sucesso pls_integer;
begin
  v_inicio    := sysdate;
  v_interface := 1704;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  v_seq := 1;
  
   -- INTERFACE 1704
   -- DINTERFACE OFFER STORE
   -- EXCLUI DA TABELA STAGE
   v_query := 'TRUNCATE TABLE gs_prf_offerstore';
   execute immediate v_query;
   commit;
   
   while true    
  loop
       v_sucesso := 0;
       
       v_origem := '';
       v_origem := f_get_table(v_interface, v_ano, v_mes, v_dia, v_seq);
       
       if (v_origem is null) then
          v_seq := v_seq + 1;
          if (v_seq > 99) then
             exit;
          end if;
          continue;
       end if;
       
       f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'W');
       
       begin
           /* COPIA DA PROFMETRICS PARA GSRETAIL */
           v_query := 'INSERT INTO gs_prf_offerstore
                       SELECT OFFER_ID,
                              STORE_ID,
                              PZ_GROUP_ID,
                              RECORD_STATUS,
                              CREATE_USER_ID,
                              CREATE_DATETIME,
                              LAST_UPDATE_USER_ID,
                              LAST_UPDATE_DATETIME
                       FROM '|| v_origem ||'@LK_PROFIMETRICS';
           
           execute immediate v_query;
           commit;
          
           v_sucesso := 1;
           commit;
       exception when others then
           rollback;
           v_sucesso := 0;           
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'E');
           raise;
       end;
       
       BEGIN
         v_query := 'MERGE INTO OFERTAS_PRF_LOJAS G
                     USING (SELECT PRO.OFFER_ID,
                                   PRO.STORE_ID,
                                   PRO.PZ_GROUP_ID,
                                   PRO.RECORD_STATUS,
                                   PRO.CREATE_USER_ID,
                                   PRO.CREATE_DATETIME,
                                   PRO.LAST_UPDATE_USER_ID,
                                   PRO.LAST_UPDATE_DATETIME,
                                   PRO.OFFER_ID||LPAD(PRO.STORE_ID,4,0) AS CHV
                              FROM '|| v_origem ||'@LK_PROFIMETRICS PRO) A
                                ON (G.CHV = A.CHV)
                              WHEN MATCHED THEN
                            UPDATE
                               SET G.OFFER_ID    = A.OFFER_ID,
                                   G.STORE_ID    = A.STORE_ID,
                                   G.PZ_GROUP_ID = A.PZ_GROUP_ID
                              WHEN NOT MATCHED THEN
                            INSERT
                                   (G.OFFER_ID, G.STORE_ID, G.PZ_GROUP_ID, G.RECORD_STATUS, G.CREATE_USER_ID, 
                                    G.CREATE_DATETIME, G.LAST_UPDATE_USER_ID, G.LAST_UPDATE_DATETIME, G.CHV)
                             VALUES
                                  (A.OFFER_ID, A.STORE_ID, A.PZ_GROUP_ID, A.RECORD_STATUS, A.CREATE_USER_ID, 
                                    A.CREATE_DATETIME, A.LAST_UPDATE_USER_ID, A.LAST_UPDATE_DATETIME, A.CHV)';
               
         execute immediate v_query;
         commit;
         
       
       end;
       
       if (v_sucesso = 1) then
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'A');
       end if;
       v_seq := v_seq + 1;
       if (v_seq > 99) then
          exit;
       end if;
  end loop; 
  commit;
exception when others then  
  ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Origem: ' || v_origem || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 

end ImportaOfferStore;

procedure ImportaOfferPayExc(p_databatch date := trunc(sysdate)) is
  v_origem  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
  v_sucesso pls_integer;
begin
  v_inicio    := sysdate;
  v_interface := 1705;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  v_seq := 1;
  
   -- INTERFACE 1705
   -- DINTERFACE OFFER PAYMENT EXCEPTION
   -- EXCLUI DA TABELA STAGE
   v_query := 'TRUNCATE TABLE gs_prf_offerpayexc';
   execute immediate v_query;
   commit;
   
   while true    
  loop
       v_sucesso := 0;
       
       v_origem := '';
       v_origem := f_get_table(v_interface, v_ano, v_mes, v_dia, v_seq);
       
       if (v_origem is null) then
          v_seq := v_seq + 1;
          if (v_seq > 99) then
             exit;
          end if;
          continue;
       end if;
       
       f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'W');
       
       begin
           /* COPIA DA PROFMETRICS PARA GSRETAIL */
           v_query := 'INSERT INTO gs_prf_offerpayexc
                       SELECT OFFER_ID,
                              PAYMENT_TYPE,
                              RECORD_STATUS,
                              CREATE_USER_ID,
                              CREATE_DATETIME,
                              LAST_UPDATE_USER_ID,
                              LAST_UPDATE_DATETIME
                       FROM '|| v_origem ||'@LK_PROFIMETRICS';
           
           execute immediate v_query;
           commit;
          
           v_sucesso := 1;
           commit;
       exception when others then
           rollback;
           v_sucesso := 0;           
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'E');
           raise;
       end;
       
       if (v_sucesso = 1) then
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'A');
       end if;
       v_seq := v_seq + 1;
       if (v_seq > 99) then
          exit;
       end if;
  end loop; 
  commit;
exception when others then  
  ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Origem: ' || v_origem || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 

end ImportaOfferPayExc;

procedure ImportaOfferFidExc(p_databatch date := trunc(sysdate)) is
  v_origem  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
  v_sucesso pls_integer;
begin
  v_inicio    := sysdate;
  v_interface := 1707;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  v_seq := 1;
  
   -- INTERFACE 1705
   -- DINTERFACE OFFER FIDELITY CARD EXCEPTION
   -- EXCLUI DA TABELA STAGE
   v_query := 'TRUNCATE TABLE gs_prf_offerfidexc';
   execute immediate v_query;
   commit;
   
   while true    
  loop
       v_sucesso := 0;
       
       v_origem := '';
       v_origem := f_get_table(v_interface, v_ano, v_mes, v_dia, v_seq);
       
       if (v_origem is null) then
          v_seq := v_seq + 1;
          if (v_seq > 99) then
             exit;
          end if;
          continue;
       end if;
       
       f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'W');
       
       begin
           /* COPIA DA PROFMETRICS PARA GSRETAIL */
           v_query := 'INSERT INTO gs_prf_offerfidexc
                       SELECT OFFER_ID,
                              CLIENT_GROUP_ID,
                              RECORD_STATUS,
                              CREATE_USER_ID,
                              CREATE_DATETIME,
                              LAST_UPDATE_USER_ID,
                              LAST_UPDATE_DATETIME
                       FROM '|| v_origem ||'@LK_PROFIMETRICS';
           
           execute immediate v_query;
           commit;
          
           v_sucesso := 1;
           commit;
       exception when others then
           rollback;
           v_sucesso := 0;           
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'E');
           raise;
       end;
       
       BEGIN
  v_query := 'MERGE INTO OFERTAS_PRF_FIDEXC G
                     USING (SELECT PRO.OFFER_ID,
                                   PRO.CLIENT_GROUP_ID,
                                   PRO.RECORD_STATUS,
                                   PRO.CREATE_USER_ID,
                                   PRO.CREATE_DATETIME,
                                   PRO.LAST_UPDATE_USER_ID,
                                   PRO.LAST_UPDATE_DATETIME,
                                   PRO.OFFER_ID || PRO.CLIENT_GROUP_ID AS CHV
                              FROM ' || v_origem || '@LK_PROFIMETRICS PRO) A
                                ON (G.CHV = A.CHV)
                              WHEN MATCHED THEN
                            UPDATE
                               SET G.OFFER_ID         = A.OFFER_ID,
                                   G.CLIENT_GROUP_ID  = A.CLIENT_GROUP_ID
                              WHEN NOT MATCHED THEN
                            INSERT
                                   (G.OFFER_ID,G.CLIENT_GROUP_ID,G.RECORD_STATUS,G.CREATE_USER_ID,G.CREATE_DATETIME,
                                    G.LAST_UPDATE_USER_ID,G.LAST_UPDATE_DATETIME,G.CHV)
                             VALUES
                                  (A.OFFER_ID,A.CLIENT_GROUP_ID,A.RECORD_STATUS,A.CREATE_USER_ID,
                                   A.CREATE_DATETIME,A.LAST_UPDATE_USER_ID,A.LAST_UPDATE_DATETIME,A.CHV)';

  execute immediate v_query;
  commit;

end;
       
       if (v_sucesso = 1) then
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'A');
       end if;
       v_seq := v_seq + 1;
       if (v_seq > 99) then
          exit;
       end if;
  end loop; 
  commit;
exception when others then  
  ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Origem: ' || v_origem || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 

end ImportaOfferFidExc;

procedure ImportaOfferAdMode(p_databatch date := trunc(sysdate)) is
  v_origem  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
  v_sucesso pls_integer;
begin
  v_inicio    := sysdate;
  v_interface := 1710;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  v_seq := 1;
  
   -- INTERFACE 1710
   -- DINTERFACE OFFER AD MODE
   -- EXCLUI DA TABELA STAGE
   v_query := 'TRUNCATE TABLE gs_prf_offeradmode';
   execute immediate v_query;
   commit;
   
   while true    
  loop
       v_sucesso := 0;
       
       v_origem := '';
       v_origem := f_get_table(v_interface, v_ano, v_mes, v_dia, v_seq);
       
       if (v_origem is null) then
          v_seq := v_seq + 1;
          if (v_seq > 99) then
             exit;
          end if;
          continue;
       end if;
       
       f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'W');
       
       begin
           /* COPIA DA PROFMETRICS PARA GSRETAIL */
           v_query := 'INSERT INTO gs_prf_offeradmode
                       SELECT OFFER_ID,
                              AD_MODE_ID,
                              AD_MODE_DESC,
                              RECORD_STATUS,
                              CREATE_USER_ID,
                              CREATE_DATETIME,
                              LAST_UPDATE_USER_ID,
                              LAST_UPDATE_DATETIME
                       FROM '|| v_origem ||'@LK_PROFIMETRICS';
           
           execute immediate v_query;
           commit;
          
           v_sucesso := 1;
           commit;
       exception when others then
           rollback;
           v_sucesso := 0;           
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'E');
           raise;
       end;
       
       if (v_sucesso = 1) then
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'A');
       end if;
       v_seq := v_seq + 1;
       if (v_seq > 99) then
          exit;
       end if;
  end loop; 
  commit;
exception when others then  
  ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Origem: ' || v_origem || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 

end ImportaOfferAdMode;

procedure ImportaThreshold(p_databatch date := trunc(sysdate)) is
  v_origem  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
  v_sucesso pls_integer;
begin
  v_inicio    := sysdate;
  v_interface := 1711;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  v_seq := 1;
  
   -- INTERFACE 1711
   -- DINTERFACE THRESHOLD HEADER
   -- EXCLUI DA TABELA STAGE
   v_query := 'TRUNCATE TABLE gs_prf_threshold';
   execute immediate v_query;
   commit;
   
   while true    
  loop
       v_sucesso := 0;
       
       v_origem := '';
       v_origem := f_get_table(v_interface, v_ano, v_mes, v_dia, v_seq);
       
       if (v_origem is null) then
          v_seq := v_seq + 1;
          if (v_seq > 99) then
             exit;
          end if;
          continue;
       end if;
       
       f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'W');
       
       begin
           /* COPIA DA PROFMETRICS PARA GSRETAIL */
           v_query := 'INSERT INTO gs_prf_threshold
                       SELECT THRESHOLD_ID,
                              THRESHOLD_DESC,
                              THRESHOLD_TYPE,
                              THRESHOLD_DISC_TYPE,
                              RECORD_STATUS,
                              CREATE_USER_ID,
                              CREATE_DATETIME,
                              LAST_UPDATE_USER_ID,
                              LAST_UPDATE_DATETIME
                       FROM '|| v_origem ||'@LK_PROFIMETRICS';
           
           execute immediate v_query;
           commit;
          
           v_sucesso := 1;
           commit;
       exception when others then
           rollback;
           v_sucesso := 0;           
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'E');
           raise;
       end;
       
       if (v_sucesso = 1) then
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'A');
       end if;
       v_seq := v_seq + 1;
       if (v_seq > 99) then
          exit;
       end if;
  end loop; 
  commit;
exception when others then  
  ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Origem: ' || v_origem || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 

end ImportaThreshold;

procedure ImportaThresholdTier(p_databatch date := trunc(sysdate)) is
  v_origem  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
  v_sucesso pls_integer;
begin
  v_inicio    := sysdate;
  v_interface := 1712;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  v_seq := 1;
  
   -- INTERFACE 1712
   -- DINTERFACE THRESHOLD TIER
   -- EXCLUI DA TABELA STAGE
   v_query := 'TRUNCATE TABLE gs_prf_thresholdtier';
   execute immediate v_query;
   commit;
   
   while true    
  loop
       v_sucesso := 0;
       
       v_origem := '';
       v_origem := f_get_table(v_interface, v_ano, v_mes, v_dia, v_seq);
       
       if (trim(v_origem) is null) then
          v_seq := v_seq + 1;
          if (v_seq > 99) then
             exit;
          end if;
          continue;
       end if;
       
       f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'W');
       
       begin
           /* COPIA DA PROFMETRICS PARA GSRETAIL */
           v_query := 'INSERT INTO gs_prf_thresholdtier
                       SELECT THRESHOLD_ID,
                              MINIMUM_VAL,
                              DISCOUNT_VAL,
                              RECORD_STATUS,
                              CREATE_USER_ID,
                              CREATE_DATETIME,
                              LAST_UPDATE_USER_ID,
                              LAST_UPDATE_DATETIME
                       FROM '|| v_origem ||'@LK_PROFIMETRICS';
           
           execute immediate v_query;
           commit;
          
           v_sucesso := 1;
           commit;
       exception when others then
           rollback;
           v_sucesso := 0;           
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'E');
           raise;
       end;
       
       if (v_sucesso = 1) then
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'A');
       end if;
       v_seq := v_seq + 1;
       if (v_seq > 99) then
          exit;
       end if;
  end loop; 
  commit;
exception when others then  
  ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Origem: ' || v_origem || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 

end ImportaThresholdTier;

procedure ImportaOfferAppLevel(p_databatch date := trunc(sysdate)) is
  v_origem  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
  v_sucesso pls_integer;
begin
  v_inicio    := sysdate;
  v_interface := 1715;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  v_seq := 1;
  
   -- INTERFACE 1712
   -- DINTERFACE OFFER APP LEVEL
   -- EXCLUI DA TABELA STAGE
   v_query := 'TRUNCATE TABLE gs_prf_offerapplevel';
   execute immediate v_query;
   commit;
   
   while true    
  loop
       v_sucesso := 0;
       
       v_origem := '';
       v_origem := f_get_table(v_interface, v_ano, v_mes, v_dia, v_seq);
       
       if (v_origem is null) then
          v_seq := v_seq + 1;
          if (v_seq > 99) then
             exit;
          end if;
          continue;
       end if;
       
       f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'W');
       
       begin
           /* COPIA DA PROFMETRICS PARA GSRETAIL */
           v_query := 'INSERT INTO gs_prf_offerapplevel
                       SELECT OFFER_ID,
                              MERCH_ID,
                              QTY,
                              OFFER_LIST_FLAG,
                              VAL_TYPE,
                              VAL,
                              PUBLISH_PRICE,
                              RECORD_STATUS,
                              CREATE_USER_ID,
                              CREATE_DATETIME,
                              LAST_UPDATE_USER_ID,
                              LAST_UPDATE_DATETIME
                       FROM '|| v_origem ||'@LK_PROFIMETRICS';
           
           execute immediate v_query;
           commit;
          
           v_sucesso := 1;
           commit;
       exception when others then
           rollback;
           v_sucesso := 0;           
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'E');
           raise;
       end;
       
       if (v_sucesso = 1) then
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'A');
       end if;
       v_seq := v_seq + 1;
       if (v_seq > 99) then
          exit;
       end if;
  end loop; 
  commit;
exception when others then  
  ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Origem: ' || v_origem || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 

end ImportaOfferAppLevel;

procedure ImportaOfferProduct(p_databatch date := trunc(sysdate)) is
  v_origem  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
  v_sucesso pls_integer;
begin
  v_inicio    := sysdate;
  v_interface := 1716;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  v_seq := 1;
  
   -- INTERFACE 1712
   -- DINTERFACE OFFER PRODUCT
   -- EXCLUI DA TABELA STAGE
   v_query := 'TRUNCATE TABLE gs_prf_offerproduct';
   execute immediate v_query;
   commit;
   
   while true    
  loop
       v_sucesso := 0;
       
       v_origem := '';
       v_origem := f_get_table(v_interface, v_ano, v_mes, v_dia, v_seq);
       
       if (v_origem is null) then
          v_seq := v_seq + 1;
          if (v_seq > 99) then
             exit;
          end if;
          continue;
       end if;
       
       f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'W');
       
       begin
           /* COPIA DA PROFMETRICS PARA GSRETAIL */
           v_query := 'INSERT INTO gs_prf_offerproduct (
                              OFFER_ID,
                              SKU_ID,
                              QTY,
                              OFFER_LIST_FLAG,
                              VAL_TYPE,
                              VAL,
                              PUBLISH_PRICE,
                              PROMO_PRICE,
                              REVIEW_COMMENTS,
                              PRICE_RELATION_GROUP,
                              LOC_ID,
                              RECORD_STATUS,
                              CREATE_USER_ID,
                              CREATE_DATETIME,
                              LAST_UPDATE_USER_ID,
                              LAST_UPDATE_DATETIME)
                       SELECT OFFER_ID,
                              SKU_ID,
                              QTY,
                              OFFER_LIST_FLAG,
                              VAL_TYPE,
                              VAL,
                              PUBLISH_PRICE,
                              PROMO_PRICE,
                              REVIEW_COMMENTS,
                              PRICE_RELATION_GROUP,
                              LOC_ID,
                              RECORD_STATUS,
                              CREATE_USER_ID,
                              CREATE_DATETIME,
                              LAST_UPDATE_USER_ID,
                              LAST_UPDATE_DATETIME
                       FROM '|| v_origem ||'@LK_PROFIMETRICS';
           
           execute immediate v_query;
           commit;
          
           v_sucesso := 1;
           commit;
       exception when others then
           rollback;
           v_sucesso := 0;           
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'E');
           raise;
       end;
       
       BEGIN
         v_query := 'MERGE INTO OFERTAS_PRF_SELLOUT G
                     USING (SELECT PRO.OFFER_ID,
                                   PRO.SKU_ID,
                                   PRO.PROMO_PRICE,
                                   PRO.LOC_ID,
                                   PRO.OFFER_PRODUCT_ATTR_01_NO,
                                   PRO.CREATE_DATETIME,
                                   PRO.OFFER_ID||PRO.SKU_ID||PRO.LOC_ID AS CHV
                              FROM '|| v_origem ||'@LK_PROFIMETRICS PRO
                             WHERE OFFER_PRODUCT_ATTR_01_NO IS NOT NULL) A
                                ON (G.CHV = A.CHV)
                              WHEN MATCHED THEN
                            UPDATE
                               SET G.OFFER_ID                 = A.OFFER_ID,
                                   G.SKU_ID                   = A.SKU_ID,
                                   G.PROMO_PRICE              = A.PROMO_PRICE,
                                   G.LOC_ID                   = A.LOC_ID,
                                   G.OFFER_PRODUCT_ATTR_01_NO = A.OFFER_PRODUCT_ATTR_01_NO
                              WHEN NOT MATCHED THEN
                            INSERT
                                   (G.OFFER_ID,
                                    G.SKU_ID,
                                    G.PROMO_PRICE,
                                    G.LOC_ID,
                                    G.OFFER_PRODUCT_ATTR_01_NO,
                                    G.CREATE_DATETIME,
                                    G.CHV)
                             VALUES
                                    (A.OFFER_ID,
                                     A.SKU_ID,
                                     A.PROMO_PRICE,
                                     A.LOC_ID,
                                     A.OFFER_PRODUCT_ATTR_01_NO,
                                     A.CREATE_DATETIME,
                                     A.CHV)';
               
         execute immediate v_query;
         commit;
         
       END;
       
       if (v_sucesso = 1) then
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'A');
       end if;
       v_seq := v_seq + 1;
       if (v_seq > 99) then
          exit;
       end if;
  end loop; 
  commit;
exception when others then  
  ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Origem: ' || v_origem || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 

end ImportaOfferProduct;


procedure ImportaAdMode(p_databatch date := trunc(sysdate)) is
  v_origem  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
  v_sucesso pls_integer;
begin
  v_inicio    := sysdate;
  v_interface := 1344;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  v_seq := 1;
  
   -- INTERFACE 1344
   -- DINTERFACE AD MODE
   -- EXCLUI DA TABELA STAGE
   v_query := 'TRUNCATE TABLE gs_prf_admode';
   execute immediate v_query;
   commit;
   
   while true    
  loop
       v_sucesso := 0;
       
       v_origem := '';
       v_origem := f_get_table(v_interface, v_ano, v_mes, v_dia, v_seq);
       
       if (v_origem is null) then
          v_seq := v_seq + 1;
          if (v_seq > 99) then
             exit;
          end if;
          continue;
       end if;
       
       f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'W');
       
       begin
           /* COPIA DA PROFMETRICS PARA GSRETAIL */
           v_query := 'INSERT INTO gs_prf_admode 
                       SELECT AD_MODE_ID,AD_MODE_DESC,RECORD_STATUS,
                       create_user_id,create_datetime FROM '|| v_origem ||'@LK_PROFIMETRICS';
           
           execute immediate v_query;
           commit;
          
           v_sucesso := 1;
           commit;
       exception when others then
           rollback;
           v_sucesso := 0;           
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'E');
           raise;
       end;
       
       if (v_sucesso = 1) then
           f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'A');
       end if;
       v_seq := v_seq + 1;
       if (v_seq > 99) then
          exit;
       end if;
  end loop; 
  commit;
exception when others then  
  ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Origem: ' || v_origem || chr(13) || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface)); 
  
end ImportaAdMode;

procedure ImportaRoqOut(p_databatch date := trunc(sysdate)) is
  v_origem  varchar2(500);
  v_query    varchar2(5000);
  v_passo    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
  v_sucesso pls_integer;
  v_nro_pedido number(7) := 0;
  v_nro_controle number(7) := 0;
begin
  v_inicio    := sysdate;
  v_interface := 9028;
  v_ano := to_number(to_char(p_databatch, 'yyyy'));
  v_mes := to_number(to_char(p_databatch, 'mm'));
  v_dia := to_number(to_char(p_databatch, 'dd'));
  v_seq := 1;

   -- INTERFACE 9028
   -- DINTERFACE ROQ OUT
   -- EXCLUI DA TABELA STAGE
   v_query := 'TRUNCATE TABLE GS_PRF_ROQOUT';
   execute immediate v_query;
   commit;
   v_passo := 'EXCLUI GS_PRF_ROQOUT';
  
   v_sucesso := 0;
   
   -- VERIFICA QUAL FOI A ULTIMA SEQUENCIA DE HOJE PARA ESSA INTERFACE
   begin
     select nvl(max(lp.seq),0) + 1 into v_seq
     from gs_log_profimetrics_interface lp
     where lp.dia_exec = (v_ano-1900)*10000+v_mes*100+v_dia
     and lp.interface = v_interface
     and lp.ano = v_ano
     and lp.mes = v_mes
     and lp.dia = v_dia
     and lp.submit = 1;
   exception when others then
       v_seq := 1;
   end;
   v_origem := '';
   v_origem := f_get_table(v_interface, v_ano, v_mes, v_dia, v_seq);

   if (v_origem is null) then
         return; -- NAO TEM ESSA SEQUENCIA, ENCERRA A ROTINA
   end if;

   f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'W');

   begin
       v_passo := 'COPIA GS_PRF_ROQOUT';
       /* COPIA DA PROFMETRICS PARA GSRETAIL */
       v_query := 'INSERT INTO GS_PRF_ROQOUT (
                          SKU_ID,
                          STORE_ID,
                          NEED_QTY,
                          ROQ_QTY,
                          WOQ_QTY,
                          WOQ_STATUS,
                          CALCULATION_DATE,
                          APPROVE_DATETIME,
                          APPROVE_USER_ID,
                          MAIN_SUPPLIER_ID,
                          SUPPLIER_ID,
                          STOCK_CAT,
                          WH_LEAD_TIME,
                          SUPPLIER_LEAD_TIME,
                          BATCH_AUDIT,
                          ROQ_ATTR_01_FLAG,
                          ROQ_ATTR_02_FLAG,
                          ROQ_ATTR_03_FLAG,
                          ROQ_ATTR_04_FLAG,
                          ROQ_ATTR_05_FLAG,
                          RECORD_STATUS,
                          CREATE_USER_ID,
                          CREATE_DATETIME,
                          LAST_UPDATE_USER_ID,
                          LAST_UPDATE_DATETIME)
                   SELECT SKU_ID,
                          STORE_ID,
                          NEED_QTY,
                          ROQ_QTY,
                          WOQ_QTY,
                          WOQ_STATUS,
                          CALCULATION_DATE,
                          APPROVE_DATETIME,
                          APPROVE_USER_ID,
                          MAIN_SUPPLIER_ID,
                          SUPPLIER_ID,
                          STOCK_CAT,
                          WH_LEAD_TIME,
                          SUPPLIER_LEAD_TIME,
                          BATCH_AUDIT,
                          ROQ_ATTR_01_FLAG,
                          ROQ_ATTR_02_FLAG,
                          ROQ_ATTR_03_FLAG,
                          ROQ_ATTR_04_FLAG,
                          ROQ_ATTR_05_FLAG,
                          RECORD_STATUS,
                          CREATE_USER_ID,
                          CREATE_DATETIME,
                          LAST_UPDATE_USER_ID,
                          LAST_UPDATE_DATETIME
                   FROM '|| v_origem ||'@LK_PROFIMETRICS 
                    left join gs_mvw_caditens i
                      on trunc(to_number(trim(sku_id)) / 10) = i.prod
                    left join GS_PROFIMETRICS_EXCECAO_SECAO e
                      on i.sec = e.secao
                    left join GS_PROFIMETRICS_EXCECAO_FILIAL F
                      on TO_NUMBER(STORE_ID) = F.LOJA
                   WHERE WOQ_QTY > 0
                     AND i.SA = 1
                     AND STORE_ID < 8999
                     and e.secao is null
                     AND F.LOJA IS NULL';

       execute immediate v_query;
       commit;

       v_sucesso := 1;
       commit;
   exception when others then
       rollback;
       v_sucesso := 0;
       f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'E');
       raise;
   end;
       
  commit;

  --- GERA PEDIDO DE ABASTECIMENTO PRODUTOS SISTEMATICA 01
  for reg in (
              SELECT distinct /*i.deposito deposito*/ --SUBSTITUIDO PELO CASE A SEGUIR 17/01/2021 HENRIQUE DISTINCGUIR CD ALTERNATIVO
                             case 
                               when i.deposito > 0 and abast.abt_cod_fil > 0     then abast.abt_cod_ent_abast 
                               else i.deposito 
                             end AS deposito,
                             (case
                                when (to_number(r.store_id)) between 6000 and 6900 then (trunc(to_number(trim(r.store_id))/10)-600)
                                else trunc(to_number(trim(r.store_id))/10) 
                              end) as filial
                FROM GS_PRF_ROQOUT r                      
               inner join gs_mvw_caditens i
                  on i.prod = trunc(to_number(trim(r.sku_id)) / 10)
                left join ag1abast abast
                  on (case
                        when (to_number(r.store_id)) between 6000 and 6900 then (trunc(to_number(trim(r.store_id))/10)-600)
                        else trunc(to_number(trim(r.store_id))/10) 
                      end)/*trunc(r.store_id/10)*/ = abast.abt_cod_fil --JOIN ADICIONADO 17/01/2021 HENRIQUE DISTINGUIR CD ALTERNATIVOS
               where i.sa        = 1
                 and r.exportado is null
                 and i.deposito  > 0
                 AND R.STORE_ID < 8999
               order by 1, 2
                 ) loop
  v_nro_pedido     := PROXIMO_NROPED();
  v_passo := 'GRAVA AG1DPEDI';
  -- GRAVA DETALHE DOS PEDIDOS
  insert into AG1DPEDI (
    codloj_det,
    nroped_det,
    digped_det,
    for_det,
    itm_det,
    dig_det,
    itm_det_2,
    dig_det_2,
    dist_det_2,
    codloj_det_2,
    nroped_det_2,
    digped_det_2,
    emb_det,
    qtdped_det,
    qtdent_det,
    for_cst_det,
    dsc_det,
    ipi_det,
    prc_soc_det,
    total_det,
    saldo_det,
    status_det,
    ipi_valor_det,
    desc_merc_det,
    desp_aces_det,
    desp_aces_is_det,
    perc_bonif_det,
    frete_det,
    vago_det,
    qtdfat_det
  )
  SELECT (case
            when (to_number(r.store_id)) between 6000 and 6900 then (trunc(to_number(trim(r.store_id))/10)-600)
            else trunc(to_number(trim(r.store_id))/10) 
          end)/*trunc(to_number(trim(r.store_id))/10)*/ codloj_det,
         v_nro_pedido nroped_det,
         dac(v_nro_pedido) digped_det,
         case 
           when i.deposito > 0 and abast.abt_cod_fil > 0     then abast.abt_cod_ent_abast 
           else i.deposito 
         end/*i.deposito*/ for_det, -- SE FOR PRODUTO DROGARIA MUDA O DEPOSITO
         trunc(to_number(trim(r.sku_id))/10) ITM_DET,
         mod(to_number(trim(r.sku_id)),10)   DIG_DET,
         trunc(to_number(trim(r.sku_id))/10) ITM_DET_2,
         mod(to_number(trim(r.sku_id)),10)   DIG_DET_2,
         case 
           when i.deposito > 0 and abast.abt_cod_fil > 0     then abast.abt_cod_ent_abast 
           else i.deposito 
         end/*i.deposito*/ dist_det_2, -- SE FOR PRODUTO DROGARIA MUDA O DEPOSITO
         (case
            when (to_number(r.store_id)) between 6000 and 6900 then (trunc(to_number(trim(r.store_id))/10)-600)
            else trunc(to_number(trim(r.store_id))/10) 
          end)/*trunc(to_number(trim(r.store_id))/10)*/ codloj_det_2,
         v_nro_pedido nroped_det_2,
         dac(v_nro_pedido) digped_det_2,
         case 
           when i.deposito > 0 and abast.abt_cod_fil > 0     then 1
           else i.embtrf
         end /*i.embtrf*/ EMB_DET,
         TRUNC(round(r.woq_qty / (case 
                              when i.deposito > 0 and abast.abt_cod_fil > 0     then 1
                              else i.embtrf
                            end)/*i.embtrf*/, 3)) qtdped_det,
         0 qtdent_det,
         round(r.woq_qty * nvl(e.cm, 0),6) FOR_CST_DET,
         0 dsc_det,
         0 ipi_det,
         round(NVL(e.cm, 0),4) prc_soc_det,
         round(r.woq_qty * nvl(e.cm, 0),2) total_det,
         round(r.woq_qty * nvl(e.cm, 0),2) saldo_det,
         1 status_det,
         0 ipi_valor_det,
         0 desc_merc_det,
         0 desp_aces_det,
         0 desp_aces_is_det,
         0 perc_bonif_det,
         0 frete_det,
         0 vago_det ,
         0 qtdfat_det
  FROM GS_PRF_ROQOUT r
  inner join gs_mvw_caditens i on i.prod = trunc(to_number(trim(r.sku_id))/10)
  inner join GS_MVW_FILIAIS fil on fil.codigo = (case
                                                   when (to_number(r.store_id)) between 6000 and 6900 then (trunc(to_number(trim(r.store_id))/10)-600)
                                                   else trunc(to_number(trim(r.store_id))/10) 
                                                 end)/*trunc(to_number(trim(r.store_id))/10)*/
  left join gs_posestq e on e.produto = trunc(to_number(trim(r.sku_id))/10)
                        and e.filial = i.deposito
  left join ag1abast abast --JOIN ADICIONADO 17/01/2021 HENRIQUE DISTINGUIR CD ALTERNATIVOS
  on (case
        when (to_number(r.store_id)) between 6000 and 6900 then (trunc(to_number(trim(r.store_id))/10)-600)
        else trunc(to_number(trim(r.store_id))/10) 
      end)/*trunc(r.store_id/10)*/ = abast.abt_cod_fil
  where i.sa = 1
  and r.exportado is null
  and fil.tipofilial not in ('D')
  and /*i.deposito*/ --SUBSTITUIDO PELO CASE A SEGUIR 17/01/2021 HENRIQUE DISTINCGUIR CD ALTERNATIVO
  (case 
        when i.deposito > 0 and abast.abt_cod_fil > 0     then abast.abt_cod_ent_abast 
        else i.deposito 
   end) = reg.deposito 
  and fil.codigo = reg.filial
  and (TRUNC(round(r.woq_qty / (case 
                              when i.deposito > 0 and abast.abt_cod_fil > 0     then 1
                              else i.embtrf
                            end)/*i.embtrf*/, 3))) > 0 --ADICIONADO EM 18/02/2021 HENRIQUE N?O IMPORTAR MENOS DO QUE 1 EMBALAGEM DE TRANSFERENCIA . EXCETO FRACIONADO
  ;
  
  IF reg.deposito <> 300 THEN 

  -- AG1DPEXT
  v_passo := 'GRAVA AG1DPEXT';
  INSERT INTO AG1DPEXT (
    LOJ_VEN_PEXT,
    NUM_PEXT,
    ORD_PEXT,
    SIT_PEXT_1,
    ITM_PEXT,
    DIG_PEXT,
    LOJ_ORG_PEXT_3,
    LOJ_VEN_PEXT_3,
    CLIENTE_PEXT_3,
    EMIS_PEXT,
    NUM_PEXT_3,
    C_PEXT_2,
    D_PEXT_2,
    LOJ_VEN_PEXT_4,
    VENDEDOR_PEXT_4,
    NUM_PEXT_4,
    ORD_PEXT_4,
    CLIENTE_PEXT,
    NUM_PEXT_5,
    ORD_PEXT_5,
    ROTA_PEXT,
    LOJ_VEN_PEXT_6,
    NUM_PEXT_6,
    ORD_PEXT_6,
    QTD_PEXT,
    QTDBON_PEXT,
    QTDNAT_PEXT,
    QTDATE_PEXT,
    DESC_PEXT,
    VLR_PEXT,
    PRC_VEND_PEXT,
    LIQ_PEXT,
    PRC_CAD_PEXT,
    COD_PRC_SEC_PEXT,
    DATA_PEXT_1,
    QTDE_PEXT_1,
    DATA_PEXT_2,
    QTDE_PEXT_2,
    DATA_PEXT_3,
    QTDE_PEXT_3,
    DATA_PEXT_4,
    QTDE_PEXT_4,
    TBERR_PEXT,
    MRG_PEXT,
    COMIS_PEXT,
    LIB_PEXT,
    PGTO_PEXT,
    DEPUF_PEXT,
    CLIUF_PEXT,
    DESCR_PEXT,
    EMB_PEXT,
    TPO_EMB_PEXT,
    DESC_LEXT_PEXT,
    SUBROTA_PEXT,
    LOCALIDADE_PEXT,
    DESC_DST_PEXT,
    FIGURA_PEXT,
    NIVEL_PRECO_PEXT,
    NIVEL_PROMO_PEXT,
    ALIQ_ISS_PEXT,
    ALIQ_IR_PEXT,
    ALIQ_AIRE_PEXT,
    ALIQ_ICM_PEXT,
    ICM_FONTE_PEXT,
    BASE_REDUZ_PEXT,
    SUBS_TRIB_PEXT,
    CRED_PRES_PEXT,
    VAL_PAUTA_PEXT,
    OPERACAO_PEXT,
    VD_CUSTO_PEXT,
    TRANS_SAI_CUSTO_PEXT,
    DEVOLUCAO_CUSTO_PEXT,
    EMB_FOR_PEXT,
    PESO_UN_PEXT,
    VOLU_UN_PEXT,
    MOEDA_PEXT,
    PRC_MOEDA_PEXT,
    AGENDA_PEXT,
    TIP_LOJ_CLI_PEXT,
    LOJ_CONTR_ESTQ_PEXT,
    TBC_INTG_07_PEXT,
    TBC_INTG_11_PEXT,
    TBC_INTG_17_PEXT,
    ESTLOC_PEXT,
    ABAST_PEXT,
    SITUACAO_PEXT,
    NUM_NFF_PDV_PEXT,
    SER_NFF_PDV_PEXT,
    ORIGEM_PEXT,
    GALPAO_PEXT,
    RUA_PEXT,
    POSICAO_PEXT,
    APT_PEXT
  )
  SELECT P.CODLOJ_DET*10+DAC(P.CODLOJ_DET) LOJ_VEN_PEXT,
         P.NROPED_DET NUM_PEXT,
         P.ITM_DET ORD_PEXT,
         4 SIT_PEXT_1,
         P.ITM_DET ITM_PEXT,
         P.DIG_DET    DIG_PEXT,
         P.FOR_DET*10+DAC(P.FOR_DET) LOJ_ORG_PEXT_3,
         P.CODLOJ_DET*10+DAC(P.CODLOJ_DET) LOJ_VEN_PEXT_3,
         P.CODLOJ_DET*10+DAC(P.CODLOJ_DET) CLIENTE_PEXT_3,
         DATETO_RMS7(SYSDATE) EMIS_PEXT,
         P.NROPED_DET NUM_PEXT_3,
         P.CODLOJ_DET C_PEXT_2,
         DAC(P.CODLOJ_DET) D_PEXT_2,
         P.CODLOJ_DET*10+DAC(P.CODLOJ_DET) LOJ_VEN_PEXT_4,
         50415 VENDEDOR_PEXT_4,
         P.NROPED_DET NUM_PEXT_4,
         P.ITM_DET ORD_PEXT_4,
         P.CODLOJ_DET*10+DAC(P.CODLOJ_DET) CLIENTE_PEXT,
         P.NROPED_DET NUM_PEXT_5,
         P.ITM_DET ORD_PEXT_5,
         1 ROTA_PEXT,
         P.CODLOJ_DET*10+DAC(P.CODLOJ_DET) LOJ_VEN_PEXT_6,
         P.NROPED_DET NUM_PEXT_6,
         P.ITM_DET ORD_PEXT_6,
         P.QTDPED_DET QTD_PEXT,
         0 QTDBON_PEXT,
         0 QTDNAT_PEXT,
         0 QTDATE_PEXT,
         0 DESC_PEXT,
         0 VLR_PEXT,
         0 PRC_VEND_PEXT,
         0 LIQ_PEXT,
         0 PRC_CAD_PEXT,
         0 COD_PRC_SEC_PEXT,
         0 DATA_PEXT_1,
         0 QTDE_PEXT_1,
         0 DATA_PEXT_2,
         0 QTDE_PEXT_2,
         0 DATA_PEXT_3,
         0 QTDE_PEXT_3,
         0 DATA_PEXT_4,
         0 QTDE_PEXT_4,
         '                    ' TBERR_PEXT,
         0 MRG_PEXT,
         0 COMIS_PEXT,
         9 LIB_PEXT,
         0 PGTO_PEXT,
         'SP' DEPUF_PEXT,
         'SP' CLIUF_PEXT,
         '                                        ' DESCR_PEXT,
         emb_det EMB_PEXT,
         git_tpo_emb_transf  TPO_EMB_PEXT,
         0 DESC_LEXT_PEXT,
         1 SUBROTA_PEXT,
         1 LOCALIDADE_PEXT,
         0 DESC_DST_PEXT,
         0 FIGURA_PEXT,
         0 NIVEL_PRECO_PEXT,
         0 NIVEL_PROMO_PEXT,
         0 ALIQ_ISS_PEXT,
         0 ALIQ_IR_PEXT,
         0 ALIQ_AIRE_PEXT,
         0 ALIQ_ICM_PEXT,
         0 ICM_FONTE_PEXT,
         0 BASE_REDUZ_PEXT,
         0 SUBS_TRIB_PEXT,
         0 CRED_PRES_PEXT,
         0 VAL_PAUTA_PEXT,
         0 OPERACAO_PEXT,
         0 VD_CUSTO_PEXT,
         1 TRANS_SAI_CUSTO_PEXT,
         0 DEVOLUCAO_CUSTO_PEXT,
         0 EMB_FOR_PEXT,
         0 PESO_UN_PEXT,
         0 VOLU_UN_PEXT,
         0 MOEDA_PEXT,
         0 PRC_MOEDA_PEXT,
         141 AGENDA_PEXT,
         'D' TIP_LOJ_CLI_PEXT,
         'S' LOJ_CONTR_ESTQ_PEXT,
          'S'  TBC_INTG_07_PEXT,
          'T'  TBC_INTG_11_PEXT,
          'N'  TBC_INTG_17_PEXT,
          'S'  ESTLOC_PEXT,
          1  ABAST_PEXT,
          0  SITUACAO_PEXT,
          0  NUM_NFF_PDV_PEXT,
          '   '  SER_NFF_PDV_PEXT,
          6  ORIGEM_PEXT,
          0  GALPAO_PEXT,
          0  RUA_PEXT,
          0  POSICAO_PEXT,
          0  APT_PEXT
  FROM AG1DPEDI p
  LEFT JOIN AA3CITEM 
    ON ITM_DET = GIT_COD_ITEM
 where p.nroped_det = v_nro_pedido;

 ELSE v_passo := 'CPAN - NAO GERA AG1DPEXT';
 
 END IF;

 v_passo := 'GRAVA AG1LPEDI';
  -- GRAVA CAPA DO PEDIDO
  insert into AG1LPEDI (
    cloj_car,
    dloj_car,
    codfor_car,
    codloj_car,
    nroped_car,
    digped_car,
    cond_pag_car,
    dtaini_car,
    dtafim_car,
    compr_car,
    dtaemi_car,
    secao_car,
    dia_visita_car,
    pagmto_car,
    frete_car,
    transp_car,
    tot_bruto_car,
    sld_bruto_car,
    tot_desc_car,
    sld_desc_car,
    tot_ipi_car,
    sld_ipi_car,
    tot_liq_car,
    sld_liq_car,
    dta_ult_mov_car,
    versao_car,
    st1_car,
    st2_car,
    est_ori_car,
    pf_car,
    manual_car,
    dep_car,
    form_car,
    exp_icms_car,
    obs_car,
    nro_pedido_bonif_car,
    vencimento_car,
    doca_car,
    hora_ini_car,
    hora_fim_car,
    veiculo_car,
    vago_car
  )
  select p.codloj_det,
         dac(p.codloj_det),
         max(p.for_det),
         p.codloj_det,
         p.nroped_det,
         dac(p.nroped_det),
         0,
         dateto_rms(sysdate),
         dateto_rms(sysdate+3),
         999,
         to_number(to_char(sysdate,'ddmmyy')),
         0,
          0,
          2,
          1,
          0,
         sum(p.total_det),
         sum(p.total_det),
         0,
         0,
         0,
         0,
         sum(p.total_det),
         sum(p.total_det),
         0,
         0,
         2,
         1,
         'SP',
         0,
         0,
         0,
         'C',
         0,
         'ORIGEM PROFIMETRICS',
         0,
         0,
         0,
         0,
         0,
         0,
         0
  from AG1DPEDI p
  where p.nroped_det = v_nro_pedido
  group by p.codloj_det, p.nroped_det;
  
  end loop;

  -- ATUALIZA QUE EXPORTOU

  merge into GS_PRF_ROQOUT g
  using
  (
    select r.sku_id, r.store_id, r.create_datetime
    from GS_PRF_ROQOUT r
    inner join gs_mvw_caditens i on i.prod = trunc(to_number(trim(r.sku_id))/10)
    where i.sa = 1
    and r.exportado is null
    and i.deposito  > 0
    AND R.STORE_ID < 8999
  ) a
  on ( g.sku_id = a.sku_id and g.store_id = a.store_id and g.create_datetime = a.create_datetime
  )
  when matched then update set g.exportado = 1, g.data_exporta = trunc(sysdate);
  
  commit;
  
  -- GERA CROSS DOCKING
  
  for reg in (
    select i.deposito, r.supplier_id, i.compr
    from GS_PRF_ROQOUT r
    inner join gs_mvw_caditens i on i.prod = trunc(to_number(r.sku_id)/10)
    where i.sa = 11
    group by i.deposito, r.supplier_id, i.compr
    )
  loop
    v_nro_controle   := PROXIMO_CONTROLE(reg.compr);
    v_passo := 'GRAVA AG2CACMP CROSS';
    insert into AG2CACMP(PDG_COMPRADOR,
                         PDG_CONTROLE,
                         PDG_ITEM,
                         PDG_DIGITO,
                         PDG_LOJA,
                         PDG_COMPRADOR1,
                         PDG_CONTROLE1,
                         PDG_LOJA1,
                         PDG_DISTRIBUIDORA,
                         PDG_FORNECEDOR,
                         PDG_SECAO,
                         PDG_CONDICAO,
                         PDG_ITEM1,
                         PDG_DIGITO1,
                         PDG_PEDIDO_1,
                         PDG_PEDIDO_2,
                         PDG_PEDIDO_3,
                         PDG_DATA_PRECO,
                         PDG_PRECO,
                         PDG_BONIFICACAO,
                         PDG_IPI,
                         PDG_IPI_VALOR,
                         PDG_EMB_FOR,
                         PDG_TOT_GRADE_1,
                         PDG_TOT_GRADE_2,
                         PDG_TOT_GRADE_3,
                         PDG_DESC_MERC,
                         PDG_LIQUIDO,
                         PDG_DESP_ACES,
                         PDG_DESP_ACES_ISEN,
                         PDG_FRETE,
                         PDG_FRETE_VALOR,
                         PDG_ACRE_FIN,
                         PDG_FILIAL,
                         PDG_TIPREG,
                         PDG_DEPOSITO,
                         PDG_PALLET,
                         PDG_PESO,
                         PDG_M3,
                         PDG_QTD_BONIF)
    SELECT reg.compr PDG_COMPRADOR,
           v_nro_controle PDG_CONTROLE,
           i.prod PDG_ITEM,
           to_number(dac(i.prod)) PDG_DIGITO,
           reg.deposito*10+dac(reg.deposito) PDG_LOJA,
           reg.compr PDG_COMPRADOR1,
           v_nro_controle PDG_CONTROLE1,
           reg.deposito*10+dac(reg.deposito) PDG_LOJA1,
           trunc(to_number(reg.supplier_id)/10) PDG_DISTRIBUIDORA,
           trunc(to_number(reg.supplier_id)/10) PDG_FORNECEDOR,
           99 PDG_SECAO,
           MAX(i.condpgto) PDG_CONDICAO,
           i.prod PDG_ITEM1,
           to_number(dac(i.prod)) PDG_DIGITO1,
           round(sum(r.woq_qty)/max(i.emb),3) PDG_PEDIDO_1,
           0 PDG_PEDIDO_2,
           0 PDG_PEDIDO_3,
           MAX(ID.GIT_DAT_CUS_FOR) PDG_DATA_PRECO,
           ROUND(MAX(ID.GIT_CUS_FOR) * sum(r.woq_qty), 6)  PDG_PRECO,
           0 PDG_BONIFICACAO,
           0 PDG_IPI,
           0 PDG_IPI_VALOR,
           max(i.emb) PDG_EMB_FOR,
           round(sum(r.woq_qty)/max(i.emb),3) PDG_TOT_GRADE_1,
           0 PDG_TOT_GRADE_2,
           0 PDG_TOT_GRADE_3,
           0 PDG_DESC_MERC,
           ROUND(MAX(ID.GIT_CUS_FOR) *sum(r.woq_qty), 6) PDG_LIQUIDO,
           0 PDG_DESP_ACES,
           0 PDG_DESP_ACES_ISEN,
           0 PDG_FRETE,
           0 PDG_FRETE_VALOR,
           0 PDG_ACRE_FIN,
           0 PDG_FILIAL,
           ' ' PDG_TIPREG,
           0 PDG_DEPOSITO,
           0 /*MAX(id.git_base_pallet) * MAX(id.git_altura_pallet)*/ PDG_PALLET, -- COMENTADO PORQUE DA ERRO DE PRECISAO NA COLUNA
           0 /*MAX(id.git_peso)*/ PDG_PESO,
           0 /*MAX(id.git_altura_emb_vnd)*MAX(id.git_largura_emb_vnd)*MAX(id.git_compr_emb_vnd)*/ PDG_M3, -- COMENTADO PORQUE DA ERRO DE PRECISAO
           0 PDG_QTD_BONIF
    FROM GS_PRF_ROQOUT r
    inner join gs_mvw_caditens i on i.prod = trunc(to_number(r.sku_id)/10)
    inner join aa3citem id on id.Git_Cod_Item = i.prod
    where r.supplier_id = reg.supplier_id
    and i.deposito = reg.deposito
    and i.compr = reg.compr
    and i.sa = 11
    GROUP BY i.prod;
    
    v_passo := 'GRAVA AG2CCCMP CROSS';
    INSERT INTO AG2CCCMP (PDGC_COMPRADOR,
                          PDGC_CONTROLE,
                          PDGC_ITEM,
                          PDGC_DIGITO,
                          PDGC_LOJA,
                          PDGC_CUS_UN_NF,
                          PDGC_CUS_UN_TR,
                          PDGC_CUS_QTD_NF,
                          PDGC_CUS_QTD_TR,
                          PDGC_PERC_PUBLIC,
                          PDGC_PERC_COMPROR,
                          PDGC_PERC_VENDOR,
                          PDGC_FRETE_TPO,
                          PDGC_FRETE_QTD,
                          PDGC_FRETE_VAL,
                          PDGC_FRETE_VAL_NF,
                          PDGC_TRANSP,
                          PDGC_COND_PGT,
                          PDGC_TIP_COMPROR,
                          PDGC_ICM_FONTE,
                          PDGC_VLR_ACORDO,
                          PDGC_CMP_FORN,
                          PDGC_FRETE_VAL2,
                          PDGC_FRETE_VAL3,
                          PDGC_DESP_ACES,
                          PDGC_SUGESTAO,
                          PDGC_TIPO_FRETE)
     SELECT reg.compr PDG_COMPRADOR,
           v_nro_controle PDG_CONTROLE,
           i.prod PDG_ITEM,
           to_number(dac(i.prod)) PDG_DIGITO,
           reg.deposito*10+dac(reg.deposito) PDG_LOJA,
           ROUND(MAX(ID.GIT_CUS_FOR) *sum(r.woq_qty), 7) PDGC_CUS_UN_NF,
           0               PDGC_CUS_UN_TR,
           0               PDGC_CUS_QTD_NF,
           0               PDGC_CUS_QTD_TR,
           0               PDGC_PERC_PUBLIC,
           0               PDGC_PERC_COMPROR,
           0               PDGC_PERC_VENDOR,
           ' '               PDGC_FRETE_TPO,
           0               PDGC_FRETE_QTD,
           0               PDGC_FRETE_VAL,
           0               PDGC_FRETE_VAL_NF,
           0               PDGC_TRANSP,
           0               PDGC_COND_PGT,
           0               PDGC_TIP_COMPROR,
           0               PDGC_ICM_FONTE,
           0               PDGC_VLR_ACORDO,
           0               PDGC_CMP_FORN,
           0               PDGC_FRETE_VAL2,
           0               PDGC_FRETE_VAL3,
           0               PDGC_DESP_ACES,
           0               PDGC_SUGESTAO,
           1               PDGC_TIPO_FRETE
    FROM GS_PRF_ROQOUT r
    inner join gs_mvw_caditens i on i.prod = trunc(to_number(r.sku_id)/10)
    inner join aa3citem id on id.Git_Cod_Item = i.prod
    where r.supplier_id = reg.supplier_id
    and i.deposito = reg.deposito
    and i.compr = reg.compr
    and i.sa = 11
    GROUP BY i.prod;
    
    v_passo := 'GRAVA AG2CCONT CROSS';
    INSERT INTO AG2CCONT (CNT_COMPRADOR,
                          CNT_CONTROLE,
                          CNT_COMPRADOR2,
                          CNT_K_FORN,
                          CNT_CONTROLE2,
                          CNT_TIPO,
                          CNT_DISTRIBUIDORA,
                          CNT_FORNECEDOR,
                          CNT_SECAO,
                          CNT_GRUPO,
                          CNT_SUBGRUPO,
                          CNT_DTA_1,
                          CNT_DTA_2,
                          CNT_DTA_3,
                          CNT_DTA_EMISSAO_1,
                          CNT_DTA_EMISSAO_2,
                          CNT_DTA_EMISSAO_3,
                          CNT_LIQUIDO_1,
                          CNT_LIQUIDO_2,
                          CNT_LIQUIDO_3,
                          CNT_SITUACAO,
                          CNT_OBS,
                          CNT_TRANSP,
                          CNT_DIA_VISITA,
                          CNT_PAGMTO,
                          CNT_PRAZO_ENTREGA,
                          CNT_DATA_CRI,
                          CNT_NRO_PEDIDO_1,
                          CNT_NRO_PEDIDO_2,
                          CNT_NRO_PEDIDO_3,
                          CNT_VAGO)
      SELECT REG.COMPR CNT_COMPRADOR,
             v_nro_controle CNT_CONTROLE,
             reg.compr CNT_COMPRADOR2,
             0 CNT_K_FORN,
             v_nro_controle CNT_CONTROLE2,
             0 CNT_TIPO,
             trunc(to_number(reg.supplier_id)/10) CNT_DISTRIBUIDORA,
             trunc(to_number(reg.supplier_id)/10) CNT_FORNECEDOR,
             0 CNT_SECAO,
             0 CNT_GRUPO,
             0 CNT_SUBGRUPO,
             0 CNT_DTA_1,
             0 CNT_DTA_2,
             0 CNT_DTA_3,
             0 CNT_DTA_EMISSAO_1,
             0 CNT_DTA_EMISSAO_2,
             0 CNT_DTA_EMISSAO_3,
             ROUND(sum(ID.GIT_CUS_FOR * r.woq_qty), 2) CNT_LIQUIDO_1,
             0 CNT_LIQUIDO_2,
             0 CNT_LIQUIDO_3,
             0 CNT_SITUACAO,
             rpad(' ',79,' ') CNT_OBS,
             0 CNT_TRANSP,
             t.for_dia_visita CNT_DIA_VISITA,
             t.for_pgmto CNT_PAGMTO,
             t.for_prz_entrega CNT_PRAZO_ENTREGA,
             to_char(sysdate,'ddmmyy') CNT_DATA_CRI,
             0 CNT_NRO_PEDIDO_1,
             0 CNT_NRO_PEDIDO_2,
             0 CNT_NRO_PEDIDO_3,
             0 CNT_VAGO
      FROM GS_PRF_ROQOUT r
      inner join gs_mvw_caditens i on i.prod = trunc(to_number(r.sku_id)/10)
      inner join aa3citem id on id.Git_Cod_Item = i.prod
      inner join AA2CFORN t on t.for_codigo = trunc(to_number(r.supplier_id/10))
      where r.supplier_id = reg.supplier_id
      and i.deposito = reg.deposito
      and i.compr = reg.compr
      and i.sa = 11
      GROUP BY t.for_freq_visita, t.for_dia_visita, t.for_pgmto, t.for_prz_entrega;
    
    v_passo := 'GRAVA AG2CGRAD CROSS';
      INSERT INTO AG2CGRAD (GRD_COMPRADOR,
                            GRD_CONTROLE,
                            GRD_ITEM,
                            GRD_DIGITO,
                            GRD_DEPOSITO,
                            GRD_LOJA,
                            GRD_PEDIDO_1,
                            GRD_PEDIDO_2,
                            GRD_PEDIDO_3,
                            GRD_PEDIDO_GRADE)
     SELECT REG.COMPR,
            v_nro_controle,
            id.git_cod_item,
            id.git_digito,
            reg.deposito*10+dac(reg.deposito),
            (case
               when (to_number(r.store_id)) between 6000 and 6900 then (trunc(to_number(trim(r.store_id))/10)-600)
               else trunc(to_number(trim(r.store_id))/10) 
             end)/*to_number(r.store_id)*/,
            trunc(r.woq_qty / i.emb),
            0,
            0,
            0                           
     FROM GS_PRF_ROQOUT r
     inner join gs_mvw_caditens i on i.prod = trunc(to_number(r.sku_id)/10)
     inner join aa3citem id on id.Git_Cod_Item = i.prod
     where r.supplier_id = reg.supplier_id
     and i.deposito = reg.deposito
     and i.compr = reg.compr
     and i.sa = 11;
    
  end loop;
  
  -- ATUALIZA QUE EXPORTOU

  merge into GS_PRF_ROQOUT g
  using
  (
    select r.sku_id, r.store_id, r.create_datetime
    from GS_PRF_ROQOUT r
    inner join gs_mvw_caditens i on i.prod = trunc(to_number(trim(r.sku_id))/10)
    where i.sa = 11
    and r.exportado is null
  ) a
  on ( g.sku_id = a.sku_id and g.store_id = a.store_id and g.create_datetime = a.create_datetime
  )
  when matched then update set g.exportado = 1, g.data_exporta = trunc(sysdate);
  
  commit;
  
  -- GERA SUGESTAO DE COMPRA
  
  for reg in (
    select (case
              when (to_number(r.store_id)) between 6000 and 6900 then (trunc(to_number(trim(r.store_id))/10)-600)
              else trunc(to_number(trim(r.store_id))/10) 
            end) as store_id/*r.store_id*/, r.supplier_id, i.compr
    from GS_PRF_ROQOUT r
    inner join gs_mvw_caditens i on i.prod = trunc(to_number(r.sku_id)/10)
    where i.sa not in (1,11)
    group by r.store_id, r.supplier_id, i.compr
    )
  loop
    v_nro_controle   := PROXIMO_CONTROLE(reg.compr);
    v_passo := 'GRAVA AG2CACMP NORMAL';
    insert into AG2CACMP(PDG_COMPRADOR,
                         PDG_CONTROLE,
                         PDG_ITEM,
                         PDG_DIGITO,
                         PDG_LOJA,
                         PDG_COMPRADOR1,
                         PDG_CONTROLE1,
                         PDG_LOJA1,
                         PDG_DISTRIBUIDORA,
                         PDG_FORNECEDOR,
                         PDG_SECAO,
                         PDG_CONDICAO,
                         PDG_ITEM1,
                         PDG_DIGITO1,
                         PDG_PEDIDO_1,
                         PDG_PEDIDO_2,
                         PDG_PEDIDO_3,
                         PDG_DATA_PRECO,
                         PDG_PRECO,
                         PDG_BONIFICACAO,
                         PDG_IPI,
                         PDG_IPI_VALOR,
                         PDG_EMB_FOR,
                         PDG_TOT_GRADE_1,
                         PDG_TOT_GRADE_2,
                         PDG_TOT_GRADE_3,
                         PDG_DESC_MERC,
                         PDG_LIQUIDO,
                         PDG_DESP_ACES,
                         PDG_DESP_ACES_ISEN,
                         PDG_FRETE,
                         PDG_FRETE_VALOR,
                         PDG_ACRE_FIN,
                         PDG_FILIAL,
                         PDG_TIPREG,
                         PDG_DEPOSITO,
                         PDG_PALLET,
                         PDG_PESO,
                         PDG_M3,
                         PDG_QTD_BONIF)
    SELECT reg.compr PDG_COMPRADOR,
           v_nro_controle PDG_CONTROLE,
           i.prod PDG_ITEM,
           to_number(dac(i.prod)) PDG_DIGITO,
           to_number(reg.store_id) * 10 + dac(to_number(reg.store_id)) PDG_LOJA,
           reg.compr PDG_COMPRADOR1,
           v_nro_controle PDG_CONTROLE1,
           to_number(reg.store_id) * 10 + dac(to_number(reg.store_id)) PDG_LOJA1,
           trunc(to_number(reg.supplier_id)/10) PDG_DISTRIBUIDORA,
           trunc(to_number(reg.supplier_id)/10) PDG_FORNECEDOR,
           99 PDG_SECAO,
           MAX(i.condpgto) PDG_CONDICAO,
           i.prod PDG_ITEM1,
           to_number(dac(i.prod)) PDG_DIGITO1,
           ROUND(sum(r.woq_qty)/max(i.emb),3) PDG_PEDIDO_1,
           0 PDG_PEDIDO_2,
           0 PDG_PEDIDO_3,
           MAX(ID.GIT_DAT_CUS_FOR) PDG_DATA_PRECO,
           ROUND(MAX(ID.GIT_CUS_FOR) * sum(r.woq_qty), 6)  PDG_PRECO,
           0 PDG_BONIFICACAO,
           0 PDG_IPI,
           0 PDG_IPI_VALOR,
           max(i.emb) PDG_EMB_FOR,
           ROUND(sum(r.woq_qty)/max(i.emb),3) PDG_TOT_GRADE_1,
           0 PDG_TOT_GRADE_2,
           0 PDG_TOT_GRADE_3,
           0 PDG_DESC_MERC,
           ROUND(MAX(ID.GIT_CUS_FOR) *sum(r.woq_qty), 6) PDG_LIQUIDO,
           0 PDG_DESP_ACES,
           0 PDG_DESP_ACES_ISEN,
           0 PDG_FRETE,
           0 PDG_FRETE_VALOR,
           0 PDG_ACRE_FIN,
           0 PDG_FILIAL,
           ' ' PDG_TIPREG,
           0 PDG_DEPOSITO,
           0 /*MAX(id.git_base_pallet) * MAX(id.git_altura_pallet)*/ PDG_PALLET, -- COMENTADO POR CAUSA DE ERRO DE PRECISAO
           0 /*MAX(id.git_peso)*/ PDG_PESO,
           0 /*MAX(id.git_altura_emb_vnd)*MAX(id.git_largura_emb_vnd)*MAX(id.git_compr_emb_vnd)*/ PDG_M3, -- COMENTADO POR ERRO PRECISAO
           0 PDG_QTD_BONIF
    FROM GS_PRF_ROQOUT r
    inner join gs_mvw_caditens i on i.prod = trunc(to_number(r.sku_id)/10)
    inner join aa3citem id on id.Git_Cod_Item = i.prod
    where r.supplier_id = reg.supplier_id
    and (case
           when (to_number(r.store_id)) between 6000 and 6900 then (trunc(to_number(trim(r.store_id))/10)-600)
           else trunc(to_number(trim(r.store_id))/10) 
         end)/*r.store_id*/ = reg.store_id
    and i.compr = reg.compr
    and i.sa not in (1,11)
    GROUP BY i.prod;
    
    v_passo := 'GRAVA AG2CCCMP NORMAL';
    INSERT INTO AG2CCCMP (PDGC_COMPRADOR,
                          PDGC_CONTROLE,
                          PDGC_ITEM,
                          PDGC_DIGITO,
                          PDGC_LOJA,
                          PDGC_CUS_UN_NF,
                          PDGC_CUS_UN_TR,
                          PDGC_CUS_QTD_NF,
                          PDGC_CUS_QTD_TR,
                          PDGC_PERC_PUBLIC,
                          PDGC_PERC_COMPROR,
                          PDGC_PERC_VENDOR,
                          PDGC_FRETE_TPO,
                          PDGC_FRETE_QTD,
                          PDGC_FRETE_VAL,
                          PDGC_FRETE_VAL_NF,
                          PDGC_TRANSP,
                          PDGC_COND_PGT,
                          PDGC_TIP_COMPROR,
                          PDGC_ICM_FONTE,
                          PDGC_VLR_ACORDO,
                          PDGC_CMP_FORN,
                          PDGC_FRETE_VAL2,
                          PDGC_FRETE_VAL3,
                          PDGC_DESP_ACES,
                          PDGC_SUGESTAO,
                          PDGC_TIPO_FRETE)
     SELECT reg.compr PDG_COMPRADOR,
           v_nro_controle PDG_CONTROLE,
           i.prod PDG_ITEM,
           to_number(dac(i.prod)) PDG_DIGITO,
           to_number(reg.store_id) * 10 + to_number(reg.store_id) PDG_LOJA,
           ROUND(MAX(ID.GIT_CUS_FOR) *sum(r.woq_qty), 7) PDGC_CUS_UN_NF,
           0               PDGC_CUS_UN_TR,
           0               PDGC_CUS_QTD_NF,
           0               PDGC_CUS_QTD_TR,
           0               PDGC_PERC_PUBLIC,
           0               PDGC_PERC_COMPROR,
           0               PDGC_PERC_VENDOR,
           ' '               PDGC_FRETE_TPO,
           0               PDGC_FRETE_QTD,
           0               PDGC_FRETE_VAL,
           0               PDGC_FRETE_VAL_NF,
           0               PDGC_TRANSP,
           0               PDGC_COND_PGT,
           0               PDGC_TIP_COMPROR,
           0               PDGC_ICM_FONTE,
           0               PDGC_VLR_ACORDO,
           0               PDGC_CMP_FORN,
           0               PDGC_FRETE_VAL2,
           0               PDGC_FRETE_VAL3,
           0               PDGC_DESP_ACES,
           0               PDGC_SUGESTAO,
           1               PDGC_TIPO_FRETE
    FROM GS_PRF_ROQOUT r
    inner join gs_mvw_caditens i on i.prod = trunc(to_number(r.sku_id)/10)
    inner join aa3citem id on id.Git_Cod_Item = i.prod
    where r.supplier_id = reg.supplier_id
    and (case
           when (to_number(r.store_id)) between 6000 and 6900 then (trunc(to_number(trim(r.store_id))/10)-600)
           else trunc(to_number(trim(r.store_id))/10)
         end) /*r.store_id*/ = reg.store_id
    and i.compr = reg.compr
    and i.sa not in(1,11)
    GROUP BY i.prod;
    
    v_passo := 'GRAVA AG2CCONT NORMAL';
    INSERT INTO AG2CCONT (CNT_COMPRADOR,
                          CNT_CONTROLE,
                          CNT_COMPRADOR2,
                          CNT_K_FORN,
                          CNT_CONTROLE2,
                          CNT_TIPO,
                          CNT_DISTRIBUIDORA,
                          CNT_FORNECEDOR,
                          CNT_SECAO,
                          CNT_GRUPO,
                          CNT_SUBGRUPO,
                          CNT_DTA_1,
                          CNT_DTA_2,
                          CNT_DTA_3,
                          CNT_DTA_EMISSAO_1,
                          CNT_DTA_EMISSAO_2,
                          CNT_DTA_EMISSAO_3,
                          CNT_LIQUIDO_1,
                          CNT_LIQUIDO_2,
                          CNT_LIQUIDO_3,
                          CNT_SITUACAO,
                          CNT_OBS,
                          CNT_TRANSP,
                          CNT_DIA_VISITA,
                          CNT_PAGMTO,
                          CNT_PRAZO_ENTREGA,
                          CNT_DATA_CRI,
                          CNT_NRO_PEDIDO_1,
                          CNT_NRO_PEDIDO_2,
                          CNT_NRO_PEDIDO_3,
                          CNT_VAGO)
      SELECT REG.COMPR CNT_COMPRADOR,
             v_nro_controle CNT_CONTROLE,
             reg.compr CNT_COMPRADOR2,
             0 CNT_K_FORN,
             v_nro_controle CNT_CONTROLE2,
             0 CNT_TIPO,
             trunc(to_number(reg.supplier_id)/10) CNT_DISTRIBUIDORA,
             trunc(to_number(reg.supplier_id)/10) CNT_FORNECEDOR,
             0 CNT_SECAO,
             0 CNT_GRUPO,
             0 CNT_SUBGRUPO,
             0 CNT_DTA_1,
             0 CNT_DTA_2,
             0 CNT_DTA_3,
             0 CNT_DTA_EMISSAO_1,
             0 CNT_DTA_EMISSAO_2,
             0 CNT_DTA_EMISSAO_3,
             ROUND(sum(ID.GIT_CUS_FOR * r.woq_qty), 2) CNT_LIQUIDO_1,
             0 CNT_LIQUIDO_2,
             0 CNT_LIQUIDO_3,
             0 CNT_SITUACAO,
             rpad(' ',79,' ') CNT_OBS,
             0 CNT_TRANSP,
             t.for_dia_visita CNT_DIA_VISITA,
             t.for_pgmto CNT_PAGMTO,
             t.for_prz_entrega CNT_PRAZO_ENTREGA,
             to_char(sysdate,'ddmmyy') CNT_DATA_CRI,
             0 CNT_NRO_PEDIDO_1,
             0 CNT_NRO_PEDIDO_2,
             0 CNT_NRO_PEDIDO_3,
             0 CNT_VAGO
      FROM GS_PRF_ROQOUT r
      inner join gs_mvw_caditens i on i.prod = trunc(to_number(r.sku_id)/10)
      inner join aa3citem id on id.Git_Cod_Item = i.prod
      inner join AA2CFORN t on t.for_codigo = trunc(to_number(r.supplier_id/10))
      where r.supplier_id = reg.supplier_id
      and (case
             when (to_number(r.store_id)) between 6000 and 6900 then (trunc(to_number(trim(r.store_id))/10)-600)
             else trunc(to_number(trim(r.store_id))/10) 
           end)/*r.store_id*/ = reg.store_id
      and i.compr = reg.compr
      and i.sa not in(1, 11)
      GROUP BY t.for_freq_visita, t.for_dia_visita, t.for_pgmto, t.for_prz_entrega;
        
  end loop;
  
  -- ATUALIZA QUE EXPORTOU

  merge into GS_PRF_ROQOUT g
  using
  (
    select r.sku_id, r.store_id, r.create_datetime
    from GS_PRF_ROQOUT r
    inner join gs_mvw_caditens i on i.prod = trunc(to_number(trim(r.sku_id))/10)
    where i.sa not in (1, 11)
    and r.exportado is null
  ) a
  on ( g.sku_id = a.sku_id and g.store_id = a.store_id and g.create_datetime = a.create_datetime
  )
  when matched then update set g.exportado = 1, g.data_exporta = trunc(sysdate);
  
  commit;
  
  if (v_sucesso = 1) then
       f_change_status(v_interface, v_ano, v_mes, v_dia, v_seq, 'A');
   end if;
   commit;

exception when others then
  ROLLBACK;
    registrarlog('Erro ao na interface ' || to_char(v_interface) ||'. Tabela Origem: ' || v_origem || chr(13) || ' Passo: ' || v_passo || ' Erro: ' || sqlerrm, 'PROFMETRICS', 'PROFMETRICS API', 'Interface ' || to_char(v_interface));

end ImportaRoqOut;

procedure AtualizaPrecoRegularRms(p_databatch date := trunc(sysdate)) is
begin
   
           /* GRAVA PRECO REGULAR NO PROFMETRICS */
           
           for reg in ( select case when (to_number(p.loc_id)) between 6000 and 6999
                                         then (trunc(to_number(p.loc_id)/10)-600)
                                         else trunc(to_number(p.loc_id)/10) end filial,
                               trunc(to_number(p.product_id)/10) produto,
                               dateto_rms7(p.effective_date)     data_inicio,
                         TRUNC(p.approved_price,2)                  preco, --TRUNC ADICIONADO EM 12/12/2019 HENRIQUE
                               case when p.price_type = 'R' then 'N'
                                    else 'O' end                      tipo_preco,
                               round(e.cm, 3)                         custo,
                               i.git_cod_for,
                               i.git_secao,
                               i.git_codigo_ean13,
                               i.git_tipo_plu,
                               i.git_tipo_pro,
                               i.git_classe,
                               i.git_digito,
                               to_number(to_char(p.effective_date, 'ddmmyy')) dianum,
                               dateto_rms7(sysdate) diaatu,
                               to_number(to_char(sysdate, 'hh24miss'))*100 hora
                        from gs_prf_approvedprice p
                        inner join aa3citem i on i.git_cod_item = trunc(to_number(p.product_id)/10)
                        inner join gs_mvw_posestq e on e.prod = trunc(to_number(p.product_id)/10)
                                                   and e.filial = case when to_number(p.loc_id) between 6000 and 6999 
                                                                            then (trunc(to_number(p.loc_id)/10)-600) * 10 +dac((trunc(to_number(p.loc_id)/10)-600))
                                                                            else to_number(p.loc_id) end
                        where p.price_type = 'R'
                        and p.create_datetime >= trunc(p_databatch)
                       )
           loop
               begin
                    insert into aa2cprec
                    ( pre_loja, pre_nivel, pre_cod_item, pre_tipo, pre_dat_inicio, pre_prioridade,
                      pre_preco, pre_dat_fim, pre_validacao, pre_custo, pre_cod_oferta, pre_perc_desc)
                    values (reg.filial, 1, reg.produto, reg.tipo_preco, reg.data_inicio, 0, 
                     reg.preco, 0, 'N', reg.custo, 0, 0);
               exception when dup_val_on_index then
                    update aa2cprec set pre_preco = reg.preco
                    where PRE_LOJA = reg.filial
                    and   PRE_NIVEL = 1
                    and   PRE_COD_ITEM = reg.produto
                    and   PRE_TIPO = reg.tipo_preco
                    and   PRE_DAT_INICIO = reg.data_inicio
                    and   PRE_PRIORIDADE = 0;
               end; 
               /* REGISTRA LOG AA3MITEM */
               begin
                  insert into AA3MITEM (MVG_DAT_ALTER, MVG_COD_ITEM,MVG_DIG_ITEM,MVG_TRANSACAO,
                   MVG_COD_FORN,MVG_COD_EAN13,MVG_SECAO,MVG_CLASSE,MVG_TIPO_PLU, MVG_TIPO_PRO,MVG_TIPO_REG,
                   MVG_DATA_VIGENCIA_1,MVG_DATA_VIGENCIA_2,MVG_DATA_VIGENCIA_3,MVG_DATA_VIGENCIA_4,MVG_DATA_VIGENCIA_5)
                   values (reg.data_inicio, reg.produto, reg.git_digito, 19, reg.git_cod_for, 
                   reg.git_codigo_ean13,reg.git_secao,reg.git_classe,reg.git_tipo_plu, reg.git_tipo_pro,2,
                   reg.dianum, 0, 0, 0,0);
               exception when dup_val_on_index then
                  null;
               end; 
               
               /* REGISTRA LOG AA4MITEM */
               begin
                  insert into aa4mitem (mvg_filial,mvg_dat_alter,mvg_cod_item,mvg_transacao,
                  mvg_cod_ean13,mvg_secao,mvg_tipo_reg,mvg_lote,mvg_usuario,mvg_preco_novo,mvg_preco_atual,mvg_preco_data)
                  values (reg.filial, reg.data_inicio, reg.produto, 19, reg.git_codigo_ean13, reg.git_secao,
                  2, null, 'PROFMETR', reg.preco, null, null);
               exception when dup_val_on_index then
                  null;
               end;
               
               /* REGISTRA LOGIT */
               /*begin
                 insert into AA0LOGIT (LOGIT_DAT_ALTER, LOGIT_HOR_ALTER,LOGIT_COD_ITEM,LOGIT_DIG_ITEM,LOGIT_USUARIO,LOGIT_TRANSACAO,
                 LOGIT_ALT_COD_ITEM,LOGIT_ALT_DIG_ITEM,LOGIT_ALT_DAT_ALTER,LOGIT_ALT_HOR_ALTER,LOGIT_ALT_USUARIO,
                 LOGIT_ALT_TRANSACAO,LOGIT_ALT_0_TRANSACAO,LOGIT_ALT_0_DAT_ALTER,LOGIT_ALT_0_HOR_ALTER,LOGIT_ALT_0_COD_ITEM,LOGIT_ALT_0_DIG_ITEM,LOGIT_ALT_0_USUARIO,
                 LOGIT_ALT_1_USUARIO,LOGIT_ALT_1_DAT_ALTER,LOGIT_ALT_1_HOR_ALTER,LOGIT_ALT_1_TRANSACAO,LOGIT_ALT_1_COD_ITEM,LOGIT_ALT_1_DIG_ITEM,
                 LOGIT_COD_FORN,LOGIT_TIPO_REG,LOGIT_TIPO_TRN,LOGIT_DADO_ANTERIOR,LOGIT_DADO_ATUAL)
                 values (reg.diaatu, reg.hora, reg.produto, reg.git_digito, 'PROFMETR',19
                 
               exception when dup_val_on_index then
                  null;
               end;*/
           end loop;
           commit;  
end AtualizaPrecoRegularRms;

procedure AtualizaOfertaRms(p_databatch date := trunc(sysdate)) is
  v_cod_oferta pls_integer := 0;
begin
  --null;
  --return; -- PEDRO THENORIO PEDIU PARA DESATIVAR AS GRAVACAO DE OFERTAS NO RMS DIA 28-11-2021
  /* GRAVA CAPA DAS OFERTAS */
  for regOffer in (
    select trim(substr(o.offer_desc,1,40)) OFTA_DESCRICAO,
           dateto_rms7(o.offer_start_date) OFTA_INI_VIG,
           dateto_rms7(o.offer_end_date) OFTA_FIM_VIG,
           '05' OFTA_TIPO, -- TIPO DA OFERTA NO RMS
           0 OFTA_PRIORIDADE, -- PRIORIDADE DA OFERTA
           999 OFTA_COMPRADOR, -- COMPRADOR DA OFERTA
           'N' OFTA_LIBERADA,
           0 OFTA_DTA_LIMITE,
           ' ' OFTA_IMP_PUBC,
           'N' OFTA_CTRL_ESTQ ,
           'N' OFTA_CAMPANHA,
           'N' OFTA_TODAS_FIL,
           o.offer_id
    from gs_prf_offer o
    where o.offer_type_parent_id = 'SIMPLE' -- SOMENTE OFERTAS SIMPLES
    AND o.OFFER_ID NOT IN (select C.OFFER_ID from GS_PRF_OFFERFIDEXC C) -- SOMENTO OFERTA NAO EXCLUSIVAS
    and o.create_datetime >= p_databatch
  )
  loop
    /* CAPTURA O PROXIMO NUMERO DE OFERTA */
    SELECT to_number(substr(p.par_conteudo,1,10))+1 into v_cod_oferta
    FROM AA2CPARA P
    WHERE P.PAR_CODIGO = 107
    AND P.PAR_ACESSO = rpad('NROOFERTA',10, ' ');

    /* ATUALIZA O NUMERO DA OFERTA */
    UPDATE AA2CPARA P SET P.PAR_CONTEUDO = rpad(to_char(v_cod_oferta, 'fm0000000000'),30,'0')
    WHERE P.PAR_CODIGO = 107
    and p.par_acesso = rpad('NROOFERTA', 10, ' ');
    
    /* INSERE OFERTA */    
    INSERT INTO AA1COFTA (OFTA_COD_OFERTA, OFTA_DESCRICAO, OFTA_INI_VIG, OFTA_FIM_VIG,
           OFTA_TIPO,OFTA_PRIORIDADE,OFTA_COMPRADOR,OFTA_LIBERADA,OFTA_DTA_LIMITE,OFTA_IMP_PUBC,
           OFTA_CTRL_ESTQ,OFTA_CAMPANHA,OFTA_TODAS_FIL)
    VALUES (v_cod_oferta, regOffer.Ofta_Descricao, regoffer.ofta_ini_vig, regoffer.ofta_fim_vig,
           regoffer.ofta_tipo,regoffer.ofta_prioridade,regoffer.ofta_comprador,regoffer.ofta_liberada,regoffer.ofta_dta_limite,
           regoffer.ofta_imp_pubc,regoffer.ofta_ctrl_estq, regoffer.ofta_campanha, regoffer.ofta_todas_fil);
           
    /* INSERE FILIAIS DA OFERTA */       
    
    for regFil in (
      select distinct trunc(to_number(ap.store_id)/10) filial
      from gs_prf_offerstore ap
      where ap.offer_id = regOffer.Offer_Id
    )
    loop
      INSERT INTO AA1CLJOF (Ljof_Cod_Oferta, LJOF_COD_FILIAL)
      VALUES (v_cod_oferta, regFil.Filial);
    end loop;
    
    /* LOOP PARA CAPTURAR OS ITENS DA OFERTA */
    for regItens in ( 
      select v_cod_oferta,
             trunc(to_number(op.loc_id)/10) filial,
             trunc(to_number(op.product_id)/10) produto,
             op.approved_price preco_oferta,
             nvl(pe.cm, 0) custo,
             0 preco_refer,
             0 perc_desc,
             0 flg_situacao,
             'V' flg_tpoft,
             0 qtd_estq_disp,
             0 qtd_vda,
             0 fator_acresc,
             0 preco_atacado
      from gs_prf_approvedprice op
      left join gs_posestq pe on pe.produto = trunc(to_number(op.product_id)/10)
                             and pe.filial = trunc(to_number(op.loc_id)/10)
      where op.offer_id = regOffer.Offer_Id
    )
    loop
      INSERT INTO AA1PROFT (POF_COD_OFERTA, POF_LOJA, POF_COD_ITEM, POF_PRECO_OFTA, POF_CUSTO, POF_PRECO_REFER,
             POF_PERC_DESC, POF_FLG_SITUACAO, POF_FLG_TPOFT, POF_QTD_ESTQ_DISP, POF_QTD_VDA, POF_FATOR_ACRESC, POF_PRECO_ATACADO)
      VALUES (regItens.v_cod_oferta, regItens.filial, regItens.produto, regItens.preco_oferta, regItens.custo, regItens.preco_refer,
             regItens.perc_desc, regItens.flg_situacao, regItens.flg_tpoft, regItens.qtd_Estq_disp, regItens.qtd_vda, regItens.fator_acresc, regItens.preco_atacado);             
    end loop;
    
    for regComp in (
        select distinct v_cod_oferta cod_ofta, trunc(to_number(ap.product_id)/10) produto
        from gs_prf_approvedprice ap
        where ap.offer_id = regOffer.Offer_Id
     )
     loop
        insert into AA1CITOF (ITOF_COD_OFERTA, ITOF_COD_ITEM, ITOF_PREV_VDA, ITOF_VDA_EFETIVA, ITOF_FATOR_ACRESC, ITOF_QTD_ESTQ_DISP, ITOF_QTD_MAX_CUP)
        values (regComp.Cod_Ofta, regComp.Produto, 0, 0, 0, 0, 0);
     end loop;  
    commit;
    PC_RMS_OFERTA.PROC_LIBERACAO('V1', v_cod_oferta, 'PROFMETR');
  end loop;
end AtualizaOfertaRms;

procedure ExportaInterface(v_interface pls_integer := 0) is
begin
  if (v_interface = 0 or v_interface = 219) then
     ExportaSeason;
  end IF;
  if (v_interface = 0 or v_interface = 210) then
     ExportaBrandLabel;
  end IF;  
    if (v_interface = 0 or v_interface = 224) then
     ExportaLocation;
  end IF;
    if (v_interface = 0 or v_interface = 225) then
     ExportaSupplier;
  end IF;
  if (v_interface = 0 or v_interface = 237) then
     ExportaMerch01;
  end IF;
  if (v_interface = 0 or v_interface = 238) then
     ExportaMerch02;
  end IF;
  if (v_interface = 0 or v_interface = 239) then
     ExportaMerch03;
  end IF;
  if (v_interface = 0 or v_interface = 240) then
     ExportaMerch04;
  end IF;
  if (v_interface = 0 or v_interface = 241) then
     ExportaMerch05;
  end IF;        
  if (v_interface = 0 or v_interface = 331) then
     ExportaItemStoreVat;
  end IF;
  if (v_interface = 0 or v_interface = 248) then
     ExportaRegion;
  end IF;
  if (v_interface = 0 or v_interface = 323) then
     ExportaItemStore;
  end IF;
  if (v_interface = 0 or v_interface = 226) then
     ExportaItem;
  end IF;
  if (v_interface = 0 or v_interface = 381) then
     ExportaItemEan;
  end IF;
  if (v_interface = 0 or v_interface = 407) then
     ExportaCostPrice;
  end IF;
  if (v_interface = 0 or v_interface = 329) then
     ExportaFixedPrices;
  end IF;
  if (v_interface = 0 or v_interface = 810) then
     ExportaRetailPrices;
  end IF;
  if (v_interface = 0 or v_interface = 706) then
     ExportaCompetitorPrices;
  end if;
  if (v_interface = 0 or v_interface = 1204) then
     ExportaItemPriceRelation;
  end if;
  if (v_interface = 0 or v_interface = 1008) then
     ExportaStock(dateto_rms7(trunc(sysdate-1)), trunc(sysdate-1));
  end if;
  if (v_interface = 0 or v_interface = 510) then
     ExportaSales(dateto_rms7(sysdate-31), dateto_rms7(sysdate-1), trunc(sysdate-1));
  end if;
  IF (v_interface = 0 or v_interface = 1305) then
     ExportaBudget;
  end if;
end ExportaInterface;


procedure ExportaDemo is
  v_destino  varchar2(500);
  v_query    varchar2(5000);
  v_interface pls_integer;
  v_ano       pls_integer;
  v_mes       pls_integer;
  v_dia       pls_integer;
  v_seq       pls_integer;
  v_inicio    date;
  v_extracao  date;
  v_termino date;
begin
  v_inicio    := sysdate;
  v_interface := 407;
  v_ano := to_number(to_char(sysdate, 'yyyy'));
  v_mes := to_number(to_char(sysdate, 'mm'));
  v_dia := to_number(to_char(sysdate, 'dd'));
  v_seq := 1;
  -- INTERFACE 407
  -- DINTERFACE COST PRICE STORE
  -- EXCLUI DA TABELA STAGE
  
  
  -- INCLUI NA TABELA STAGE

  
  -- REGISTRA LOG
  MERGE INTO GS_LOG_PROFIMETRICS G
  USING
  (
      SELECT dateto_rms7(sysdate) DIA,
             v_interface INTERFACE,
             'COST PRICE STORE' DINTERFACE,
             dateto_rms7(sysdate) dia_envio,
             1 qtd_envio,
             count(*) registros,
             0 valor
      from gs_prf_costprice
   ) A
   ON
   (
         G.DIA = A.DIA
     AND G.INTERFACE = A.INTERFACE
   )
   WHEN MATCHED THEN UPDATE SET G.REGISTROS = A.REGISTROS, G.QTD_ENVIO = G.QTD_ENVIO + 1
   WHEN NOT MATCHED THEN INSERT  (DIA, INTERFACE, DINTERFACE, DIA_ENVIO, QTD_ENVIO, REGISTROS, VALOR)
                         VALUES (A.DIA, A.INTERFACE, A.DINTERFACE, A.DIA_ENVIO, A.QTD_ENVIO, A.REGISTROS, A.VALOR);
  COMMIT;
  
  v_extracao  := sysdate;
  
  -- REFRESH DA SEQUENCIA
  select lp.qtd_envio into v_seq
  from gs_log_profimetrics lp
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  -- ATIVA API
  v_destino := f_ativa_api(v_interface, v_ano, v_mes, v_dia); -- PCK_INTERFACE_API.get_source_table_name_at (v_interface, v_ano, v_mes, v_dia, v_seq);
  -- ENVIA API
  v_query := 'INSERT INTO IPO_EXT.' || v_destino || '@LK_PROFIMETRICS 
   (EFFECTIVE_DATE, CALCULATE_DATE,SKU_ID,SUPPLIER_ID,STORE_ID,CURRENCY_ID,
         ORIGIN_ID,UNIT_COST,NET_COST,AVG_COST)
   select EFFECTIVE_DATE, CALCULATE_DATE,SKU_ID,SUPPLIER_ID,STORE_ID,CURRENCY_ID,
         ORIGIN_ID,UNIT_COST,NET_COST,AVG_COST
   from gs_prf_costprice';
   
  execute immediate v_query;
   
  -- COMITA API
  f_submit_api(v_interface, v_ano, v_mes, v_dia); --PCK_INTERFACE_API.submit_interface (v_interface, v_ano, v_mes, v_dia, v_seq);
  commit;
  
  v_termino := sysdate;
  
  update gs_log_profimetrics lp set lp.inicio = v_inicio, lp.extracao = v_extracao, lp.publicacao = v_termino
  where lp.interface = v_interface
  and lp.dia_envio = dateto_rms7(sysdate);
  commit;
exception when others then
    raise_application_error(-20099, 'Erro ao na interface ' || to_char(v_interface) ||'. Tabela Destino: ' || v_destino || chr(13) || ' Erro: ' || sqlerrm);
end ExportaDemo;


begin
  -- Initialization
  null;
end GS_PKG_PROFIMETRICS;
/
